// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cloud/cloudpb/external_storage.proto

package cloudpb

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ExternalStorageProvider int32

const (
	ExternalStorageProvider_Unknown   ExternalStorageProvider = 0
	ExternalStorageProvider_nodelocal ExternalStorageProvider = 1
	ExternalStorageProvider_http      ExternalStorageProvider = 2
	ExternalStorageProvider_s3        ExternalStorageProvider = 3
	ExternalStorageProvider_gs        ExternalStorageProvider = 4
	ExternalStorageProvider_azure     ExternalStorageProvider = 5
	ExternalStorageProvider_userfile  ExternalStorageProvider = 7
	ExternalStorageProvider_null      ExternalStorageProvider = 8
	ExternalStorageProvider_external  ExternalStorageProvider = 9
)

var ExternalStorageProvider_name = map[int32]string{
	0: "Unknown",
	1: "nodelocal",
	2: "http",
	3: "s3",
	4: "gs",
	5: "azure",
	7: "userfile",
	8: "null",
	9: "external",
}

var ExternalStorageProvider_value = map[string]int32{
	"Unknown":   0,
	"nodelocal": 1,
	"http":      2,
	"s3":        3,
	"gs":        4,
	"azure":     5,
	"userfile":  7,
	"null":      8,
	"external":  9,
}

func (x ExternalStorageProvider) String() string {
	return proto.EnumName(ExternalStorageProvider_name, int32(x))
}

func (ExternalStorageProvider) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cc9668e2484a7cfb, []int{0}
}

type ExternalStorage struct {
	Provider                 ExternalStorageProvider                  `protobuf:"varint,1,opt,name=provider,proto3,enum=cockroach.cloud.cloudpb.ExternalStorageProvider" json:"provider,omitempty"`
	LocalFileConfig          ExternalStorage_LocalFileConfig          `protobuf:"bytes,2,opt,name=local_file_config,json=localFileConfig,proto3" json:"local_file_config"`
	HttpPath                 ExternalStorage_Http                     `protobuf:"bytes,3,opt,name=HttpPath,proto3" json:"HttpPath"`
	GoogleCloudConfig        *ExternalStorage_GCS                     `protobuf:"bytes,4,opt,name=GoogleCloudConfig,proto3" json:"GoogleCloudConfig,omitempty"`
	S3Config                 *ExternalStorage_S3                      `protobuf:"bytes,5,opt,name=S3Config,proto3" json:"S3Config,omitempty"`
	AzureConfig              *ExternalStorage_Azure                   `protobuf:"bytes,6,opt,name=AzureConfig,proto3" json:"AzureConfig,omitempty"`
	FileTableConfig          ExternalStorage_FileTable                `protobuf:"bytes,8,opt,name=FileTableConfig,proto3" json:"FileTableConfig"`
	ExternalConnectionConfig ExternalStorage_ExternalConnectionConfig `protobuf:"bytes,9,opt,name=external_connection_config,json=externalConnectionConfig,proto3" json:"external_connection_config"`
}

func (m *ExternalStorage) Reset()         { *m = ExternalStorage{} }
func (m *ExternalStorage) String() string { return proto.CompactTextString(m) }
func (*ExternalStorage) ProtoMessage()    {}
func (*ExternalStorage) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc9668e2484a7cfb, []int{0}
}
func (m *ExternalStorage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalStorage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExternalStorage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalStorage.Merge(m, src)
}
func (m *ExternalStorage) XXX_Size() int {
	return m.Size()
}
func (m *ExternalStorage) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalStorage.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalStorage proto.InternalMessageInfo

type ExternalStorage_LocalFileConfig struct {
	Path   string                                              `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	NodeID github_com_cockroachdb_cockroach_pkg_roachpb.NodeID `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
}

func (m *ExternalStorage_LocalFileConfig) Reset()         { *m = ExternalStorage_LocalFileConfig{} }
func (m *ExternalStorage_LocalFileConfig) String() string { return proto.CompactTextString(m) }
func (*ExternalStorage_LocalFileConfig) ProtoMessage()    {}
func (*ExternalStorage_LocalFileConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc9668e2484a7cfb, []int{0, 0}
}
func (m *ExternalStorage_LocalFileConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalStorage_LocalFileConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExternalStorage_LocalFileConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalStorage_LocalFileConfig.Merge(m, src)
}
func (m *ExternalStorage_LocalFileConfig) XXX_Size() int {
	return m.Size()
}
func (m *ExternalStorage_LocalFileConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalStorage_LocalFileConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalStorage_LocalFileConfig proto.InternalMessageInfo

type ExternalStorage_Http struct {
	BaseUri string `protobuf:"bytes,1,opt,name=baseUri,proto3" json:"baseUri,omitempty"`
}

func (m *ExternalStorage_Http) Reset()         { *m = ExternalStorage_Http{} }
func (m *ExternalStorage_Http) String() string { return proto.CompactTextString(m) }
func (*ExternalStorage_Http) ProtoMessage()    {}
func (*ExternalStorage_Http) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc9668e2484a7cfb, []int{0, 1}
}
func (m *ExternalStorage_Http) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalStorage_Http) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExternalStorage_Http) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalStorage_Http.Merge(m, src)
}
func (m *ExternalStorage_Http) XXX_Size() int {
	return m.Size()
}
func (m *ExternalStorage_Http) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalStorage_Http.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalStorage_Http proto.InternalMessageInfo

// AssumeRoleProvider contains fields about the role that needs to be assumed
// in order to access the external storage.
type ExternalStorage_AssumeRoleProvider struct {
	// Role, if non-empty, is the ARN of the AWS Role or the email address of
	// the GCP Service Account that is being assumed.
	Role string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	// ExternalID, if non-empty, is the external ID that must be passed along
	// with the role in order to assume it. Some additional information about
	// the issues that external IDs can address can be found on the AWS docs:
	// https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html
	//
	// Currently only AWS supports external ID, there is an open issue tracker
	// for support in GCP: https://issuetracker.google.com/issues/217037003
	ExternalID string `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
}

func (m *ExternalStorage_AssumeRoleProvider) Reset()         { *m = ExternalStorage_AssumeRoleProvider{} }
func (m *ExternalStorage_AssumeRoleProvider) String() string { return proto.CompactTextString(m) }
func (*ExternalStorage_AssumeRoleProvider) ProtoMessage()    {}
func (*ExternalStorage_AssumeRoleProvider) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc9668e2484a7cfb, []int{0, 2}
}
func (m *ExternalStorage_AssumeRoleProvider) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalStorage_AssumeRoleProvider) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExternalStorage_AssumeRoleProvider) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalStorage_AssumeRoleProvider.Merge(m, src)
}
func (m *ExternalStorage_AssumeRoleProvider) XXX_Size() int {
	return m.Size()
}
func (m *ExternalStorage_AssumeRoleProvider) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalStorage_AssumeRoleProvider.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalStorage_AssumeRoleProvider proto.InternalMessageInfo

type ExternalStorage_S3 struct {
	Bucket        string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Prefix        string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	AccessKey     string `protobuf:"bytes,3,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	Secret        string `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	TempToken     string `protobuf:"bytes,5,opt,name=temp_token,json=tempToken,proto3" json:"temp_token,omitempty"`
	Endpoint      string `protobuf:"bytes,6,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Region        string `protobuf:"bytes,7,opt,name=region,proto3" json:"region,omitempty"`
	Auth          string `protobuf:"bytes,8,opt,name=auth,proto3" json:"auth,omitempty"`
	ServerEncMode string `protobuf:"bytes,9,opt,name=server_enc_mode,json=serverEncMode,proto3" json:"server_enc_mode,omitempty"`
	ServerKMSID   string `protobuf:"bytes,10,opt,name=server_kms_id,json=serverKmsId,proto3" json:"server_kms_id,omitempty"`
	StorageClass  string `protobuf:"bytes,11,opt,name=storage_class,json=storageClass,proto3" json:"storage_class,omitempty"`
	// RoleARN if non-empty, is the ARN of the role that should be assumed in
	// order to access this storage.
	// TODO(rui): this field is currently kept for mixed-version state, remove
	// in 23.2 in favor of AssumeRoleProvider.
	RoleARN string `protobuf:"bytes,12,opt,name=role_arn,json=roleArn,proto3" json:"role_arn,omitempty"`
	// DelegateRoleARNs are the ARNs of intermediate roles in an assume role
	// chain. These roles will be assumed in the order they appear in the list
	// so that the role specified by RoleARN can be assumed.
	// TODO(rui): this field is currently kept for mixed-version state, remove
	// in 23.2 in favor of DelegateRoleProviders.
	DelegateRoleARNs []string `protobuf:"bytes,13,rep,name=delegate_role_arns,json=delegateRoleArns,proto3" json:"delegate_role_arns,omitempty"`
	// AssumeRoleProvider, if the role is non-empty, contains the ARN of the
	// role that should be assumed in order to access this storage, as well as
	// an optional external ID.
	AssumeRoleProvider ExternalStorage_AssumeRoleProvider `protobuf:"bytes,14,opt,name=assume_role_provider,json=assumeRoleProvider,proto3" json:"assume_role_provider"`
	// DelegateRoleProviders contain the ARNs of intermediate roles in an assume
	// role chain. These roles will be assumed in the order they appear in the
	// list so that the role specified in AssumeRoleProvider can be assumed.
	DelegateRoleProviders []ExternalStorage_AssumeRoleProvider `protobuf:"bytes,15,rep,name=delegate_role_providers,json=delegateRoleProviders,proto3" json:"delegate_role_providers"`
}

func (m *ExternalStorage_S3) Reset()         { *m = ExternalStorage_S3{} }
func (m *ExternalStorage_S3) String() string { return proto.CompactTextString(m) }
func (*ExternalStorage_S3) ProtoMessage()    {}
func (*ExternalStorage_S3) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc9668e2484a7cfb, []int{0, 3}
}
func (m *ExternalStorage_S3) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalStorage_S3) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExternalStorage_S3) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalStorage_S3.Merge(m, src)
}
func (m *ExternalStorage_S3) XXX_Size() int {
	return m.Size()
}
func (m *ExternalStorage_S3) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalStorage_S3.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalStorage_S3 proto.InternalMessageInfo

type ExternalStorage_GCS struct {
	Bucket string `protobuf:"bytes,1,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Prefix string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Auth   string `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
	// BillingProject if non-empty, is the Google Cloud project to bill for all storage requests.
	// This is required to be set if using a "requestor pays" bucket.
	BillingProject string `protobuf:"bytes,4,opt,name=billing_project,json=billingProject,proto3" json:"billing_project,omitempty"`
	Credentials    string `protobuf:"bytes,5,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// AssumeRole if non-empty, is the email of the service account that should
	// be assumed in order to access this storage.
	AssumeRole string `protobuf:"bytes,6,opt,name=assume_role,json=assumeRole,proto3" json:"assume_role,omitempty"`
	// AssumeRoleDelegates are the intermediate service account email addresses
	// in an assume role chain. These delegates will be assumed in the order
	// they appear in the list so that the service account specified by
	// AssumeRole can be assumed.
	AssumeRoleDelegates []string `protobuf:"bytes,8,rep,name=assume_role_delegates,json=assumeRoleDelegates,proto3" json:"assume_role_delegates,omitempty"`
	// BearerToken is a temporary bearer token that could be used to access the
	// storage. This token is only used for "specified" auth mode and if
	// Credentials is not supplied. Currently only OAuth 2.0 tokens are
	// supported.
	BearerToken string `protobuf:"bytes,7,opt,name=bearer_token,json=bearerToken,proto3" json:"bearer_token,omitempty"`
}

func (m *ExternalStorage_GCS) Reset()         { *m = ExternalStorage_GCS{} }
func (m *ExternalStorage_GCS) String() string { return proto.CompactTextString(m) }
func (*ExternalStorage_GCS) ProtoMessage()    {}
func (*ExternalStorage_GCS) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc9668e2484a7cfb, []int{0, 4}
}
func (m *ExternalStorage_GCS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalStorage_GCS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExternalStorage_GCS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalStorage_GCS.Merge(m, src)
}
func (m *ExternalStorage_GCS) XXX_Size() int {
	return m.Size()
}
func (m *ExternalStorage_GCS) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalStorage_GCS.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalStorage_GCS proto.InternalMessageInfo

type ExternalStorage_Azure struct {
	Container   string `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	Prefix      string `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	AccountName string `protobuf:"bytes,3,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	AccountKey  string `protobuf:"bytes,4,opt,name=account_key,json=accountKey,proto3" json:"account_key,omitempty"`
	Environment string `protobuf:"bytes,5,opt,name=environment,proto3" json:"environment,omitempty"`
}

func (m *ExternalStorage_Azure) Reset()         { *m = ExternalStorage_Azure{} }
func (m *ExternalStorage_Azure) String() string { return proto.CompactTextString(m) }
func (*ExternalStorage_Azure) ProtoMessage()    {}
func (*ExternalStorage_Azure) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc9668e2484a7cfb, []int{0, 5}
}
func (m *ExternalStorage_Azure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalStorage_Azure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExternalStorage_Azure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalStorage_Azure.Merge(m, src)
}
func (m *ExternalStorage_Azure) XXX_Size() int {
	return m.Size()
}
func (m *ExternalStorage_Azure) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalStorage_Azure.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalStorage_Azure proto.InternalMessageInfo

type ExternalStorage_FileTable struct {
	// User interacting with the external storage. This is used to check access
	// privileges of the requested user scoped tables.
	// This field is really of type security.SQLUsername. We can't use
	// the type directly however because it would create a circular dependency.
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// QualifiedTableName specifies the database.schema.tablename which the
	// FileTableSystem should interact with when servicing reads/writes.
	QualifiedTableName string `protobuf:"bytes,2,opt,name=qualified_table_name,json=qualifiedTableName,proto3" json:"qualified_table_name,omitempty"`
	// Path is the filename being read/written to via the FileTableSystem.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *ExternalStorage_FileTable) Reset()         { *m = ExternalStorage_FileTable{} }
func (m *ExternalStorage_FileTable) String() string { return proto.CompactTextString(m) }
func (*ExternalStorage_FileTable) ProtoMessage()    {}
func (*ExternalStorage_FileTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc9668e2484a7cfb, []int{0, 6}
}
func (m *ExternalStorage_FileTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalStorage_FileTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExternalStorage_FileTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalStorage_FileTable.Merge(m, src)
}
func (m *ExternalStorage_FileTable) XXX_Size() int {
	return m.Size()
}
func (m *ExternalStorage_FileTable) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalStorage_FileTable.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalStorage_FileTable proto.InternalMessageInfo

// ExternalConnectionConfig is the ExternalStorage configuration for the
// `external` provider.
type ExternalStorage_ExternalConnectionConfig struct {
	// Name identifies the External Connection object.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// User interacting with the external storage. This is used to check access
	// privileges of the external connection object.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// Path will be appended to the endpoint of the resource represented by the
	// external connection object. It is used to access subdirectories/buckets of
	// the external resource.
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (m *ExternalStorage_ExternalConnectionConfig) Reset() {
	*m = ExternalStorage_ExternalConnectionConfig{}
}
func (m *ExternalStorage_ExternalConnectionConfig) String() string { return proto.CompactTextString(m) }
func (*ExternalStorage_ExternalConnectionConfig) ProtoMessage()    {}
func (*ExternalStorage_ExternalConnectionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc9668e2484a7cfb, []int{0, 7}
}
func (m *ExternalStorage_ExternalConnectionConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExternalStorage_ExternalConnectionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExternalStorage_ExternalConnectionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExternalStorage_ExternalConnectionConfig.Merge(m, src)
}
func (m *ExternalStorage_ExternalConnectionConfig) XXX_Size() int {
	return m.Size()
}
func (m *ExternalStorage_ExternalConnectionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ExternalStorage_ExternalConnectionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ExternalStorage_ExternalConnectionConfig proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.cloud.cloudpb.ExternalStorageProvider", ExternalStorageProvider_name, ExternalStorageProvider_value)
	proto.RegisterType((*ExternalStorage)(nil), "cockroach.cloud.cloudpb.ExternalStorage")
	proto.RegisterType((*ExternalStorage_LocalFileConfig)(nil), "cockroach.cloud.cloudpb.ExternalStorage.LocalFileConfig")
	proto.RegisterType((*ExternalStorage_Http)(nil), "cockroach.cloud.cloudpb.ExternalStorage.Http")
	proto.RegisterType((*ExternalStorage_AssumeRoleProvider)(nil), "cockroach.cloud.cloudpb.ExternalStorage.AssumeRoleProvider")
	proto.RegisterType((*ExternalStorage_S3)(nil), "cockroach.cloud.cloudpb.ExternalStorage.S3")
	proto.RegisterType((*ExternalStorage_GCS)(nil), "cockroach.cloud.cloudpb.ExternalStorage.GCS")
	proto.RegisterType((*ExternalStorage_Azure)(nil), "cockroach.cloud.cloudpb.ExternalStorage.Azure")
	proto.RegisterType((*ExternalStorage_FileTable)(nil), "cockroach.cloud.cloudpb.ExternalStorage.FileTable")
	proto.RegisterType((*ExternalStorage_ExternalConnectionConfig)(nil), "cockroach.cloud.cloudpb.ExternalStorage.ExternalConnectionConfig")
}

func init() {
	proto.RegisterFile("cloud/cloudpb/external_storage.proto", fileDescriptor_cc9668e2484a7cfb)
}

var fileDescriptor_cc9668e2484a7cfb = []byte{
	// 1149 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0x8f, 0x93, 0x34, 0xb1, 0x9f, 0xdb, 0xc6, 0x3b, 0x74, 0xa9, 0x15, 0x41, 0x92, 0x5d, 0xd0,
	0x52, 0xfe, 0x25, 0xab, 0xe6, 0x82, 0xc4, 0x29, 0x49, 0x97, 0x12, 0xba, 0x5b, 0x2a, 0x67, 0x17,
	0x89, 0x5e, 0x2c, 0xc7, 0x9e, 0xa6, 0xde, 0x38, 0x33, 0xc1, 0x33, 0x29, 0x5b, 0x6e, 0x1c, 0xe0,
	0xc4, 0x81, 0xef, 0xc0, 0x19, 0x89, 0x8f, 0xd1, 0xe3, 0x1e, 0xf7, 0x14, 0x41, 0xfa, 0x2d, 0x38,
	0xa1, 0x19, 0x8f, 0xdd, 0xb4, 0xa5, 0x52, 0x90, 0xb8, 0xb4, 0x33, 0xbf, 0x79, 0xef, 0xf7, 0xde,
	0xbc, 0xf7, 0x7b, 0x13, 0xc3, 0xfb, 0x7e, 0x44, 0x67, 0x41, 0x4b, 0xfe, 0x9d, 0x0e, 0x5b, 0xf8,
	0x15, 0xc7, 0x31, 0xf1, 0x22, 0x97, 0x71, 0x1a, 0x7b, 0x23, 0xdc, 0x9c, 0xc6, 0x94, 0x53, 0xb4,
	0xed, 0x53, 0x7f, 0x1c, 0x53, 0xcf, 0x3f, 0x6d, 0x4a, 0xcb, 0xa6, 0xb2, 0xaf, 0x6e, 0x8d, 0xe8,
	0x88, 0x4a, 0x9b, 0x96, 0x58, 0x25, 0xe6, 0x0f, 0x7f, 0x47, 0x50, 0x79, 0xa2, 0x98, 0x06, 0x09,
	0x11, 0x7a, 0x0a, 0xfa, 0x34, 0xa6, 0x67, 0x61, 0x80, 0x63, 0x5b, 0x6b, 0x68, 0x3b, 0x9b, 0xbb,
	0x8f, 0x9b, 0x77, 0xb0, 0x36, 0x6f, 0xf8, 0x1e, 0x29, 0x3f, 0x27, 0x63, 0x40, 0x2f, 0xe1, 0x5e,
	0x44, 0x7d, 0x2f, 0x72, 0x4f, 0xc2, 0x08, 0xbb, 0x3e, 0x25, 0x27, 0xe1, 0xc8, 0xce, 0x37, 0xb4,
	0x1d, 0x73, 0xf7, 0xb3, 0x55, 0x69, 0x9b, 0x4f, 0x05, 0xc3, 0x17, 0x61, 0x84, 0x7b, 0xd2, 0xbf,
	0x5b, 0xbc, 0x98, 0xd7, 0x73, 0x4e, 0x25, 0xba, 0x0e, 0xa3, 0xaf, 0x41, 0xff, 0x92, 0xf3, 0xe9,
	0x91, 0xc7, 0x4f, 0xed, 0x82, 0x0c, 0xf1, 0xe9, 0xca, 0x21, 0x84, 0xa3, 0xe2, 0xcd, 0x48, 0xd0,
	0x31, 0xdc, 0xdb, 0xa7, 0x74, 0x14, 0xe1, 0x9e, 0xf0, 0x4a, 0xa2, 0xd8, 0x45, 0xc9, 0xfc, 0xc9,
	0xca, 0xcc, 0xfb, 0xbd, 0x81, 0x73, 0x9b, 0x06, 0xed, 0x83, 0x3e, 0x68, 0x2b, 0xca, 0x35, 0x49,
	0xf9, 0xf1, 0xca, 0x94, 0x83, 0xb6, 0x93, 0x39, 0xa3, 0x23, 0x30, 0x3b, 0x3f, 0xcc, 0x62, 0x55,
	0x04, 0xbb, 0x24, 0xb9, 0x9a, 0x2b, 0x73, 0x49, 0x5f, 0x67, 0x99, 0x02, 0x0d, 0xa1, 0x22, 0xaa,
	0xfa, 0xdc, 0x1b, 0xa6, 0xa5, 0xb5, 0x75, 0xc9, 0xba, 0xbb, 0x32, 0x6b, 0xe6, 0x9f, 0xf6, 0xea,
	0x06, 0x21, 0xfa, 0x49, 0x83, 0x6a, 0xa6, 0x61, 0x9f, 0x12, 0x82, 0x7d, 0x1e, 0x52, 0x92, 0x2a,
	0xc4, 0x90, 0xf1, 0x3a, 0x2b, 0xc7, 0x4b, 0xf7, 0xbd, 0x8c, 0xe9, 0x9a, 0x54, 0x6c, 0x7c, 0xc7,
	0x79, 0xf5, 0x47, 0x0d, 0x2a, 0x37, 0xe4, 0x85, 0x10, 0x14, 0xa7, 0x42, 0x43, 0x42, 0xfd, 0x86,
	0x23, 0xd7, 0xe8, 0x18, 0xca, 0x84, 0x06, 0xd8, 0x0d, 0x03, 0xa9, 0xde, 0x8d, 0x6e, 0x67, 0x31,
	0xaf, 0x97, 0x0e, 0x69, 0x80, 0xfb, 0x7b, 0x7f, 0xcf, 0xeb, 0xed, 0x51, 0xc8, 0x4f, 0x67, 0xc3,
	0xa6, 0x4f, 0x27, 0xad, 0x2c, 0xe7, 0x60, 0x78, 0xb5, 0x6e, 0x4d, 0xc7, 0xa3, 0x96, 0x5c, 0x4d,
	0x87, 0xcd, 0xc4, 0xcd, 0x29, 0x09, 0xc6, 0x7e, 0x50, 0x6d, 0x40, 0x51, 0x48, 0x0e, 0xd9, 0x50,
	0x1e, 0x7a, 0x0c, 0xbf, 0x88, 0x43, 0x15, 0x3a, 0xdd, 0x56, 0xbf, 0x05, 0xd4, 0x61, 0x6c, 0x36,
	0xc1, 0x0e, 0x8d, 0xb2, 0x29, 0x13, 0x79, 0xc6, 0x34, 0xc2, 0x69, 0x9e, 0x62, 0x8d, 0x5a, 0x60,
	0x66, 0x65, 0x55, 0xb9, 0x1a, 0xdd, 0xcd, 0xc5, 0xbc, 0x0e, 0x69, 0x89, 0xfa, 0x7b, 0x0e, 0xa4,
	0x26, 0xfd, 0xa0, 0xfa, 0xc7, 0x1a, 0xe4, 0x07, 0x6d, 0xf4, 0x36, 0x94, 0x86, 0x33, 0x7f, 0x8c,
	0xb9, 0x62, 0x53, 0x3b, 0x81, 0x4f, 0x63, 0x7c, 0x12, 0xbe, 0x4a, 0xa8, 0x1c, 0xb5, 0x43, 0xef,
	0x02, 0x78, 0xbe, 0x8f, 0x19, 0x73, 0xc7, 0xf8, 0x5c, 0x4e, 0x9b, 0xe1, 0x18, 0x09, 0x72, 0x80,
	0xcf, 0x85, 0x1b, 0xc3, 0x7e, 0x8c, 0xb9, 0x1c, 0x17, 0xc3, 0x51, 0x3b, 0xe1, 0xc6, 0xf1, 0x64,
	0xea, 0x72, 0x3a, 0xc6, 0x44, 0xea, 0xde, 0x70, 0x0c, 0x81, 0x3c, 0x17, 0x00, 0xaa, 0x82, 0x8e,
	0x49, 0x30, 0xa5, 0x21, 0xe1, 0x52, 0xc8, 0x86, 0x93, 0xed, 0x05, 0x65, 0x8c, 0x47, 0x21, 0x25,
	0x76, 0x39, 0xa1, 0x4c, 0x76, 0xa2, 0x0a, 0xde, 0x8c, 0x9f, 0x4a, 0x89, 0x1a, 0x8e, 0x5c, 0xa3,
	0x47, 0x50, 0x61, 0x38, 0x3e, 0xc3, 0xb1, 0x8b, 0x89, 0xef, 0x4e, 0x68, 0x80, 0xa5, 0xa2, 0x0c,
	0x67, 0x23, 0x81, 0x9f, 0x10, 0xff, 0x19, 0x0d, 0x30, 0x6a, 0x83, 0x02, 0xdc, 0xf1, 0x84, 0x89,
	0x7a, 0x81, 0xac, 0x57, 0x65, 0x31, 0xaf, 0x9b, 0x03, 0x79, 0x70, 0xf0, 0x6c, 0xd0, 0xdf, 0x73,
	0xcc, 0xc4, 0xea, 0x60, 0xc2, 0xfa, 0x01, 0x7a, 0x0f, 0x36, 0xd4, 0xa3, 0xeb, 0xfa, 0x91, 0xc7,
	0x98, 0x6d, 0x4a, 0xea, 0x75, 0x05, 0xf6, 0x04, 0x86, 0x1e, 0x81, 0x2e, 0xfa, 0xe1, 0x7a, 0x31,
	0xb1, 0xd7, 0x25, 0xa9, 0xb9, 0x98, 0xd7, 0xcb, 0xa2, 0x7f, 0x1d, 0xe7, 0xd0, 0x29, 0x8b, 0xc3,
	0x4e, 0x4c, 0x50, 0x17, 0x50, 0x80, 0x23, 0x3c, 0xf2, 0x38, 0x76, 0x53, 0x07, 0x66, 0x6f, 0x34,
	0x0a, 0x3b, 0x46, 0x77, 0x6b, 0x31, 0xaf, 0x5b, 0x7b, 0xea, 0x54, 0x79, 0x32, 0xc7, 0x0a, 0x96,
	0x91, 0x98, 0x30, 0xc4, 0x60, 0xcb, 0x93, 0xea, 0x48, 0x18, 0xb2, 0xd7, 0x7b, 0x53, 0x0e, 0xd1,
	0xe7, 0xab, 0x3f, 0x05, 0xb7, 0x24, 0xa6, 0xc6, 0x07, 0x79, 0xb7, 0xc5, 0x77, 0x0e, 0xdb, 0xd7,
	0x13, 0x4f, 0xc3, 0x32, 0xbb, 0xd2, 0x28, 0xfc, 0x3f, 0x71, 0xef, 0x2f, 0x5f, 0x35, 0x3d, 0x63,
	0xd5, 0x5f, 0xf2, 0x50, 0xd8, 0xef, 0x0d, 0xfe, 0xb3, 0x66, 0x53, 0xa5, 0x14, 0x96, 0x94, 0xf2,
	0x01, 0x54, 0x86, 0x61, 0x14, 0x85, 0x64, 0x24, 0x2e, 0xf0, 0x12, 0xfb, 0xa9, 0x62, 0x37, 0x15,
	0x7c, 0x94, 0xa0, 0xa8, 0x01, 0xa6, 0x1f, 0xe3, 0x00, 0x13, 0x1e, 0x7a, 0x11, 0x53, 0xd2, 0x5d,
	0x86, 0x50, 0x1d, 0xcc, 0xa5, 0x36, 0x28, 0xfd, 0xc2, 0x55, 0xe9, 0xd0, 0x2e, 0xdc, 0x5f, 0xee,
	0x53, 0x7a, 0x39, 0x66, 0xeb, 0xa2, 0xdd, 0xce, 0x5b, 0x57, 0xa6, 0x69, 0xd3, 0x19, 0x7a, 0x00,
	0xeb, 0x43, 0xec, 0xc5, 0x38, 0x56, 0x23, 0x93, 0x68, 0xdf, 0x4c, 0x30, 0x39, 0x34, 0xd5, 0xdf,
	0x34, 0x58, 0x93, 0xcf, 0x37, 0x7a, 0x07, 0x0c, 0x9f, 0x12, 0xee, 0x85, 0x44, 0xfd, 0x76, 0x1b,
	0xce, 0x15, 0x70, 0x67, 0x59, 0x1e, 0xc0, 0xba, 0xe7, 0xfb, 0x74, 0x46, 0xb8, 0x4b, 0xbc, 0x09,
	0x56, 0xe5, 0x31, 0x15, 0x76, 0xe8, 0x4d, 0xb0, 0xbc, 0x9a, 0x32, 0x11, 0xe3, 0x5e, 0x54, 0x57,
	0x4b, 0x20, 0x31, 0xef, 0x0d, 0x30, 0x31, 0x39, 0x0b, 0x63, 0x4a, 0x26, 0x98, 0xf0, 0xb4, 0x3a,
	0x4b, 0x50, 0x15, 0x83, 0x91, 0xfd, 0x06, 0x88, 0x4e, 0xcc, 0x58, 0x96, 0xa3, 0x5c, 0xa3, 0xc7,
	0xb0, 0xf5, 0xdd, 0xcc, 0x8b, 0xc2, 0x93, 0x10, 0x07, 0x2e, 0x17, 0x66, 0x49, 0x3a, 0x49, 0xb2,
	0x28, 0x3b, 0x93, 0x0c, 0x32, 0xab, 0xf4, 0x9d, 0x2e, 0x5c, 0xbd, 0xd3, 0xd5, 0x6f, 0xc0, 0xbe,
	0xeb, 0xb7, 0x40, 0xd8, 0x4b, 0x46, 0x15, 0x95, 0x28, 0x0e, 0x99, 0x49, 0x7e, 0x29, 0x93, 0x7f,
	0xe1, 0xfd, 0xaa, 0xa8, 0x97, 0x2d, 0xfd, 0xa3, 0x9f, 0x35, 0xd8, 0xbe, 0xe3, 0x9b, 0x07, 0x99,
	0x50, 0x7e, 0x41, 0xc6, 0x84, 0x7e, 0x4f, 0xac, 0x1c, 0xda, 0x00, 0x43, 0x3c, 0xee, 0xf2, 0x0b,
	0xc5, 0xd2, 0x90, 0x0e, 0xc5, 0x53, 0xce, 0xa7, 0x56, 0x1e, 0x95, 0x20, 0xcf, 0xda, 0x56, 0x41,
	0xfc, 0x1f, 0x31, 0xab, 0x88, 0x0c, 0x58, 0xf3, 0x44, 0xef, 0xac, 0x35, 0xb4, 0x0e, 0xba, 0x08,
	0x2f, 0x3e, 0x94, 0xac, 0xb2, 0x70, 0x21, 0xb3, 0x28, 0xb2, 0x74, 0x81, 0xa7, 0xef, 0xb5, 0x65,
	0x3c, 0x2c, 0xea, 0x25, 0xab, 0xd4, 0xfd, 0xf0, 0xe2, 0xaf, 0x5a, 0xee, 0x62, 0x51, 0xd3, 0x5e,
	0x2f, 0x6a, 0xda, 0x9b, 0x45, 0x4d, 0xfb, 0x73, 0x51, 0xd3, 0x7e, 0xbd, 0xac, 0xe5, 0x5e, 0x5f,
	0xd6, 0x72, 0x6f, 0x2e, 0x6b, 0xb9, 0xe3, 0xb2, 0x9a, 0xb6, 0x61, 0x49, 0x7e, 0xea, 0xb5, 0xff,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xdc, 0x3e, 0x0c, 0x41, 0x0a, 0x00, 0x00,
}

func (m *ExternalStorage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalStorage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalStorage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ExternalConnectionConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExternalStorage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.FileTableConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExternalStorage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.AzureConfig != nil {
		{
			size, err := m.AzureConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExternalStorage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.S3Config != nil {
		{
			size, err := m.S3Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExternalStorage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.GoogleCloudConfig != nil {
		{
			size, err := m.GoogleCloudConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExternalStorage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.HttpPath.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExternalStorage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.LocalFileConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExternalStorage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Provider != 0 {
		i = encodeVarintExternalStorage(dAtA, i, uint64(m.Provider))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExternalStorage_LocalFileConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalStorage_LocalFileConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalStorage_LocalFileConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		i = encodeVarintExternalStorage(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExternalStorage_Http) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalStorage_Http) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalStorage_Http) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BaseUri) > 0 {
		i -= len(m.BaseUri)
		copy(dAtA[i:], m.BaseUri)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.BaseUri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExternalStorage_AssumeRoleProvider) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalStorage_AssumeRoleProvider) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalStorage_AssumeRoleProvider) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExternalID) > 0 {
		i -= len(m.ExternalID)
		copy(dAtA[i:], m.ExternalID)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.ExternalID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExternalStorage_S3) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalStorage_S3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalStorage_S3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegateRoleProviders) > 0 {
		for iNdEx := len(m.DelegateRoleProviders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegateRoleProviders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExternalStorage(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	{
		size, err := m.AssumeRoleProvider.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintExternalStorage(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if len(m.DelegateRoleARNs) > 0 {
		for iNdEx := len(m.DelegateRoleARNs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DelegateRoleARNs[iNdEx])
			copy(dAtA[i:], m.DelegateRoleARNs[iNdEx])
			i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.DelegateRoleARNs[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.RoleARN) > 0 {
		i -= len(m.RoleARN)
		copy(dAtA[i:], m.RoleARN)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.RoleARN)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.StorageClass) > 0 {
		i -= len(m.StorageClass)
		copy(dAtA[i:], m.StorageClass)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.StorageClass)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ServerKMSID) > 0 {
		i -= len(m.ServerKMSID)
		copy(dAtA[i:], m.ServerKMSID)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.ServerKMSID)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ServerEncMode) > 0 {
		i -= len(m.ServerEncMode)
		copy(dAtA[i:], m.ServerEncMode)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.ServerEncMode)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Auth) > 0 {
		i -= len(m.Auth)
		copy(dAtA[i:], m.Auth)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Auth)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Region) > 0 {
		i -= len(m.Region)
		copy(dAtA[i:], m.Region)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Region)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TempToken) > 0 {
		i -= len(m.TempToken)
		copy(dAtA[i:], m.TempToken)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.TempToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Secret) > 0 {
		i -= len(m.Secret)
		copy(dAtA[i:], m.Secret)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Secret)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AccessKey) > 0 {
		i -= len(m.AccessKey)
		copy(dAtA[i:], m.AccessKey)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.AccessKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bucket) > 0 {
		i -= len(m.Bucket)
		copy(dAtA[i:], m.Bucket)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Bucket)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExternalStorage_GCS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalStorage_GCS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalStorage_GCS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssumeRoleDelegates) > 0 {
		for iNdEx := len(m.AssumeRoleDelegates) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AssumeRoleDelegates[iNdEx])
			copy(dAtA[i:], m.AssumeRoleDelegates[iNdEx])
			i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.AssumeRoleDelegates[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.BearerToken) > 0 {
		i -= len(m.BearerToken)
		copy(dAtA[i:], m.BearerToken)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.BearerToken)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AssumeRole) > 0 {
		i -= len(m.AssumeRole)
		copy(dAtA[i:], m.AssumeRole)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.AssumeRole)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Credentials) > 0 {
		i -= len(m.Credentials)
		copy(dAtA[i:], m.Credentials)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Credentials)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BillingProject) > 0 {
		i -= len(m.BillingProject)
		copy(dAtA[i:], m.BillingProject)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.BillingProject)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Auth) > 0 {
		i -= len(m.Auth)
		copy(dAtA[i:], m.Auth)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Auth)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Bucket) > 0 {
		i -= len(m.Bucket)
		copy(dAtA[i:], m.Bucket)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Bucket)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExternalStorage_Azure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalStorage_Azure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalStorage_Azure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Environment) > 0 {
		i -= len(m.Environment)
		copy(dAtA[i:], m.Environment)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Environment)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AccountKey) > 0 {
		i -= len(m.AccountKey)
		copy(dAtA[i:], m.AccountKey)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.AccountKey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AccountName) > 0 {
		i -= len(m.AccountName)
		copy(dAtA[i:], m.AccountName)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.AccountName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Container) > 0 {
		i -= len(m.Container)
		copy(dAtA[i:], m.Container)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Container)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExternalStorage_FileTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalStorage_FileTable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalStorage_FileTable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QualifiedTableName) > 0 {
		i -= len(m.QualifiedTableName)
		copy(dAtA[i:], m.QualifiedTableName)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.QualifiedTableName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExternalStorage_ExternalConnectionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExternalStorage_ExternalConnectionConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExternalStorage_ExternalConnectionConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintExternalStorage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExternalStorage(dAtA []byte, offset int, v uint64) int {
	offset -= sovExternalStorage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ExternalStorage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Provider != 0 {
		n += 1 + sovExternalStorage(uint64(m.Provider))
	}
	l = m.LocalFileConfig.Size()
	n += 1 + l + sovExternalStorage(uint64(l))
	l = m.HttpPath.Size()
	n += 1 + l + sovExternalStorage(uint64(l))
	if m.GoogleCloudConfig != nil {
		l = m.GoogleCloudConfig.Size()
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	if m.S3Config != nil {
		l = m.S3Config.Size()
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	if m.AzureConfig != nil {
		l = m.AzureConfig.Size()
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = m.FileTableConfig.Size()
	n += 1 + l + sovExternalStorage(uint64(l))
	l = m.ExternalConnectionConfig.Size()
	n += 1 + l + sovExternalStorage(uint64(l))
	return n
}

func (m *ExternalStorage_LocalFileConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	if m.NodeID != 0 {
		n += 1 + sovExternalStorage(uint64(m.NodeID))
	}
	return n
}

func (m *ExternalStorage_Http) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseUri)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	return n
}

func (m *ExternalStorage_AssumeRoleProvider) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.ExternalID)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	return n
}

func (m *ExternalStorage_S3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bucket)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.AccessKey)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.TempToken)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.Region)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.Auth)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.ServerEncMode)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.ServerKMSID)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.StorageClass)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.RoleARN)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	if len(m.DelegateRoleARNs) > 0 {
		for _, s := range m.DelegateRoleARNs {
			l = len(s)
			n += 1 + l + sovExternalStorage(uint64(l))
		}
	}
	l = m.AssumeRoleProvider.Size()
	n += 1 + l + sovExternalStorage(uint64(l))
	if len(m.DelegateRoleProviders) > 0 {
		for _, e := range m.DelegateRoleProviders {
			l = e.Size()
			n += 1 + l + sovExternalStorage(uint64(l))
		}
	}
	return n
}

func (m *ExternalStorage_GCS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bucket)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.Auth)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.BillingProject)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.Credentials)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.AssumeRole)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.BearerToken)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	if len(m.AssumeRoleDelegates) > 0 {
		for _, s := range m.AssumeRoleDelegates {
			l = len(s)
			n += 1 + l + sovExternalStorage(uint64(l))
		}
	}
	return n
}

func (m *ExternalStorage_Azure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Container)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.AccountName)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.AccountKey)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.Environment)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	return n
}

func (m *ExternalStorage_FileTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.QualifiedTableName)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	return n
}

func (m *ExternalStorage_ExternalConnectionConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovExternalStorage(uint64(l))
	}
	return n
}

func sovExternalStorage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExternalStorage(x uint64) (n int) {
	return sovExternalStorage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ExternalStorage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExternalStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalStorage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalStorage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provider", wireType)
			}
			m.Provider = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Provider |= ExternalStorageProvider(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalFileConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LocalFileConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HttpPath", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HttpPath.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoogleCloudConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GoogleCloudConfig == nil {
				m.GoogleCloudConfig = &ExternalStorage_GCS{}
			}
			if err := m.GoogleCloudConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S3Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S3Config == nil {
				m.S3Config = &ExternalStorage_S3{}
			}
			if err := m.S3Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AzureConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AzureConfig == nil {
				m.AzureConfig = &ExternalStorage_Azure{}
			}
			if err := m.AzureConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileTableConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FileTableConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalConnectionConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalConnectionConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExternalStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalStorage_LocalFileConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExternalStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalFileConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalFileConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExternalStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalStorage_Http) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExternalStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Http: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Http: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExternalStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalStorage_AssumeRoleProvider) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExternalStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssumeRoleProvider: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssumeRoleProvider: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExternalStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalStorage_S3) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExternalStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: S3: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: S3: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TempToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Region = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerEncMode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerEncMode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerKMSID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerKMSID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StorageClass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleARN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleARN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateRoleARNs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegateRoleARNs = append(m.DelegateRoleARNs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssumeRoleProvider", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssumeRoleProvider.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegateRoleProviders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegateRoleProviders = append(m.DelegateRoleProviders, ExternalStorage_AssumeRoleProvider{})
			if err := m.DelegateRoleProviders[len(m.DelegateRoleProviders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExternalStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalStorage_GCS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExternalStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GCS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GCS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bucket", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bucket = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auth = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingProject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BillingProject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credentials = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssumeRole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssumeRole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BearerToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BearerToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssumeRoleDelegates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssumeRoleDelegates = append(m.AssumeRoleDelegates, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExternalStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalStorage_Azure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExternalStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Azure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Azure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Container", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Container = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Environment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Environment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExternalStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalStorage_FileTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExternalStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualifiedTableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QualifiedTableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExternalStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExternalStorage_ExternalConnectionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExternalStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExternalConnectionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExternalConnectionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExternalStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExternalStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthExternalStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExternalStorage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExternalStorage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExternalStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExternalStorage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExternalStorage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExternalStorage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExternalStorage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExternalStorage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExternalStorage = fmt.Errorf("proto: unexpected end of group")
)
