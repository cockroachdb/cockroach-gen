// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: obsservice/obspb/obs.proto

package obspb

import (
	context "context"
	fmt "fmt"
	v1 "github.com/cockroachdb/cockroach/pkg/obsservice/obspb/opentelemetry-proto/logs/v1"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SubscribeToEventsRequest struct {
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
}

func (m *SubscribeToEventsRequest) Reset()         { *m = SubscribeToEventsRequest{} }
func (m *SubscribeToEventsRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeToEventsRequest) ProtoMessage()    {}
func (*SubscribeToEventsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8037a0874cc7d1d6, []int{0}
}
func (m *SubscribeToEventsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeToEventsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SubscribeToEventsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeToEventsRequest.Merge(m, src)
}
func (m *SubscribeToEventsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeToEventsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeToEventsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeToEventsRequest proto.InternalMessageInfo

type Events struct {
	ResourceLogs []*v1.ResourceLogs `protobuf:"bytes,1,rep,name=resource_logs,json=resourceLogs,proto3" json:"resource_logs,omitempty"`
}

func (m *Events) Reset()         { *m = Events{} }
func (m *Events) String() string { return proto.CompactTextString(m) }
func (*Events) ProtoMessage()    {}
func (*Events) Descriptor() ([]byte, []int) {
	return fileDescriptor_8037a0874cc7d1d6, []int{1}
}
func (m *Events) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Events) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Events) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Events.Merge(m, src)
}
func (m *Events) XXX_Size() int {
	return m.Size()
}
func (m *Events) XXX_DiscardUnknown() {
	xxx_messageInfo_Events.DiscardUnknown(m)
}

var xxx_messageInfo_Events proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SubscribeToEventsRequest)(nil), "obspb.SubscribeToEventsRequest")
	proto.RegisterType((*Events)(nil), "obspb.Events")
}

func init() { proto.RegisterFile("obsservice/obspb/obs.proto", fileDescriptor_8037a0874cc7d1d6) }

var fileDescriptor_8037a0874cc7d1d6 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xca, 0x4f, 0x2a, 0x2e,
	0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0xcf, 0x4f, 0x2a, 0x2e, 0x48, 0x02, 0x91, 0x7a, 0x05,
	0x45, 0xf9, 0x25, 0xf9, 0x42, 0xac, 0x60, 0x01, 0x29, 0x73, 0x4c, 0x25, 0x05, 0xa9, 0x79, 0x25,
	0xa9, 0x39, 0xa9, 0xb9, 0xa9, 0x25, 0x45, 0x95, 0xba, 0x60, 0xc5, 0xfa, 0x39, 0xf9, 0xe9, 0xc5,
	0xfa, 0x65, 0x86, 0x60, 0x1a, 0xa2, 0x5f, 0xc9, 0x8c, 0x4b, 0x22, 0xb8, 0x34, 0xa9, 0x38, 0xb9,
	0x28, 0x33, 0x29, 0x35, 0x24, 0xdf, 0xb5, 0x2c, 0x35, 0xaf, 0xa4, 0x38, 0x28, 0xb5, 0xb0, 0x34,
	0xb5, 0xb8, 0x44, 0x48, 0x8a, 0x8b, 0x23, 0x33, 0x25, 0x35, 0xaf, 0x24, 0xb3, 0xa4, 0x52, 0x82,
	0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0xce, 0x57, 0x8a, 0xe0, 0x62, 0x83, 0x28, 0x16, 0xf2, 0xe3,
	0xe2, 0x2d, 0x4a, 0x2d, 0xce, 0x2f, 0x2d, 0x4a, 0x4e, 0x8d, 0x07, 0x19, 0x2c, 0xc1, 0xa8, 0xc0,
	0xac, 0xc1, 0x6d, 0xa4, 0xa9, 0x87, 0xe2, 0x02, 0x88, 0x75, 0x7a, 0x60, 0x9b, 0xcb, 0x0c, 0xf5,
	0x82, 0xa0, 0x3a, 0x7c, 0xf2, 0xd3, 0x8b, 0x83, 0x78, 0x8a, 0x90, 0x78, 0x46, 0x7e, 0x5c, 0xcc,
	0xfe, 0x49, 0xc5, 0x42, 0xee, 0x5c, 0x82, 0x18, 0x0e, 0x13, 0x92, 0xd7, 0x03, 0x7b, 0x4e, 0x0f,
	0x97, 0x93, 0xa5, 0x78, 0xa1, 0x0a, 0x20, 0xa2, 0x4a, 0x0c, 0x06, 0x8c, 0x4e, 0x0a, 0x27, 0x1e,
	0xca, 0x31, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x8d, 0x47, 0x72, 0x8c, 0x0f,
	0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c,
	0x49, 0x6c, 0x60, 0xb7, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1f, 0xb3, 0x25, 0xd5, 0x68,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ObsClient is the client API for Obs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ObsClient interface {
	SubscribeToEvents(ctx context.Context, in *SubscribeToEventsRequest, opts ...grpc.CallOption) (Obs_SubscribeToEventsClient, error)
}

type obsClient struct {
	cc *grpc.ClientConn
}

func NewObsClient(cc *grpc.ClientConn) ObsClient {
	return &obsClient{cc}
}

func (c *obsClient) SubscribeToEvents(ctx context.Context, in *SubscribeToEventsRequest, opts ...grpc.CallOption) (Obs_SubscribeToEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Obs_serviceDesc.Streams[0], "/obspb.Obs/SubscribeToEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &obsSubscribeToEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Obs_SubscribeToEventsClient interface {
	Recv() (*Events, error)
	grpc.ClientStream
}

type obsSubscribeToEventsClient struct {
	grpc.ClientStream
}

func (x *obsSubscribeToEventsClient) Recv() (*Events, error) {
	m := new(Events)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ObsServer is the server API for Obs service.
type ObsServer interface {
	SubscribeToEvents(*SubscribeToEventsRequest, Obs_SubscribeToEventsServer) error
}

// UnimplementedObsServer can be embedded to have forward compatible implementations.
type UnimplementedObsServer struct {
}

func (*UnimplementedObsServer) SubscribeToEvents(req *SubscribeToEventsRequest, srv Obs_SubscribeToEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToEvents not implemented")
}

func RegisterObsServer(s *grpc.Server, srv ObsServer) {
	s.RegisterService(&_Obs_serviceDesc, srv)
}

func _Obs_SubscribeToEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeToEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ObsServer).SubscribeToEvents(m, &obsSubscribeToEventsServer{stream})
}

type Obs_SubscribeToEventsServer interface {
	Send(*Events) error
	grpc.ServerStream
}

type obsSubscribeToEventsServer struct {
	grpc.ServerStream
}

func (x *obsSubscribeToEventsServer) Send(m *Events) error {
	return x.ServerStream.SendMsg(m)
}

var _Obs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "obspb.Obs",
	HandlerType: (*ObsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToEvents",
			Handler:       _Obs_SubscribeToEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "obsservice/obspb/obs.proto",
}

func (m *SubscribeToEventsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeToEventsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeToEventsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identity) > 0 {
		i -= len(m.Identity)
		copy(dAtA[i:], m.Identity)
		i = encodeVarintObs(dAtA, i, uint64(len(m.Identity)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Events) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Events) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Events) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ResourceLogs) > 0 {
		for iNdEx := len(m.ResourceLogs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResourceLogs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintObs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintObs(dAtA []byte, offset int, v uint64) int {
	offset -= sovObs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SubscribeToEventsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identity)
	if l > 0 {
		n += 1 + l + sovObs(uint64(l))
	}
	return n
}

func (m *Events) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResourceLogs) > 0 {
		for _, e := range m.ResourceLogs {
			l = e.Size()
			n += 1 + l + sovObs(uint64(l))
		}
	}
	return n
}

func sovObs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozObs(x uint64) (n int) {
	return sovObs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SubscribeToEventsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeToEventsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeToEventsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthObs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Events) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Events: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Events: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResourceLogs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResourceLogs = append(m.ResourceLogs, &v1.ResourceLogs{})
			if err := m.ResourceLogs[len(m.ResourceLogs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthObs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipObs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowObs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthObs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupObs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthObs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthObs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowObs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupObs = fmt.Errorf("proto: unexpected end of group")
)
