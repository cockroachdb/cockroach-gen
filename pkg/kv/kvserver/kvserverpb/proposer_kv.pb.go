// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/kvserverpb/proposer_kv.proto

package kvserverpb

import (
	bytes "bytes"
	fmt "fmt"
	rspb "github.com/cockroachdb/cockroach/pkg/kv/kvserver/readsummary/rspb"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	enginepb "github.com/cockroachdb/cockroach/pkg/storage/enginepb"
	github_com_cockroachdb_cockroach_pkg_util_hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"
	hlc "github.com/cockroachdb/cockroach/pkg/util/hlc"
	github_com_cockroachdb_cockroach_pkg_util_uuid "github.com/cockroachdb/cockroach/pkg/util/uuid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Split is emitted when a Replica commits a split trigger. It signals that the
// Replica has prepared the on-disk state for both the left and right hand
// sides of the split, and that the left hand side Replica should be updated as
// well as the right hand side created.
type Split struct {
	roachpb.SplitTrigger `protobuf:"bytes,1,opt,name=trigger,proto3,embedded=trigger" json:"trigger"`
	// RHSDelta holds the statistics for what was written to what is now the
	// right-hand side of the split during the batch which executed it.
	// The on-disk state of the right-hand side is already correct, but the
	// Store must learn about this delta to update its counters appropriately.
	RHSDelta enginepb.MVCCStats `protobuf:"bytes,2,opt,name=rhs_delta,json=rhsDelta,proto3" json:"rhs_delta"`
}

func (m *Split) Reset()         { *m = Split{} }
func (m *Split) String() string { return proto.CompactTextString(m) }
func (*Split) ProtoMessage()    {}
func (*Split) Descriptor() ([]byte, []int) {
	return fileDescriptor_19df0b186dd19269, []int{0}
}
func (m *Split) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Split) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Split) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Split.Merge(m, src)
}
func (m *Split) XXX_Size() int {
	return m.Size()
}
func (m *Split) XXX_DiscardUnknown() {
	xxx_messageInfo_Split.DiscardUnknown(m)
}

var xxx_messageInfo_Split proto.InternalMessageInfo

// Merge is emitted by a Replica which commits a transaction with
// a MergeTrigger (i.e. absorbs its right neighbor).
type Merge struct {
	roachpb.MergeTrigger `protobuf:"bytes,1,opt,name=trigger,proto3,embedded=trigger" json:"trigger"`
}

func (m *Merge) Reset()         { *m = Merge{} }
func (m *Merge) String() string { return proto.CompactTextString(m) }
func (*Merge) ProtoMessage()    {}
func (*Merge) Descriptor() ([]byte, []int) {
	return fileDescriptor_19df0b186dd19269, []int{1}
}
func (m *Merge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Merge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Merge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Merge.Merge(m, src)
}
func (m *Merge) XXX_Size() int {
	return m.Size()
}
func (m *Merge) XXX_DiscardUnknown() {
	xxx_messageInfo_Merge.DiscardUnknown(m)
}

var xxx_messageInfo_Merge proto.InternalMessageInfo

// ChangeReplicas is emitted by a Replica which commits a transaction with
// a ChangeReplicasTrigger.
type ChangeReplicas struct {
	roachpb.ChangeReplicasTrigger `protobuf:"bytes,1,opt,name=trigger,proto3,embedded=trigger" json:"trigger"`
}

func (m *ChangeReplicas) Reset()      { *m = ChangeReplicas{} }
func (*ChangeReplicas) ProtoMessage() {}
func (*ChangeReplicas) Descriptor() ([]byte, []int) {
	return fileDescriptor_19df0b186dd19269, []int{2}
}
func (m *ChangeReplicas) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeReplicas) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ChangeReplicas) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeReplicas.Merge(m, src)
}
func (m *ChangeReplicas) XXX_Size() int {
	return m.Size()
}
func (m *ChangeReplicas) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeReplicas.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeReplicas proto.InternalMessageInfo

// ComputeChecksum is emitted when a ComputeChecksum request is evaluated. It
// instructs the replica to compute a checksum at the time the command is
// applied.
type ComputeChecksum struct {
	// ChecksumID is a handle by which the checksum can be retrieved in a later
	// CollectChecksum request.
	ChecksumID github_com_cockroachdb_cockroach_pkg_util_uuid.UUID `protobuf:"bytes,1,opt,name=checksum_id,json=checksumId,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"checksum_id"`
	// The version used to pick the checksum method. Only when the version matches
	// that hardcoded in the binary will a computation be carried out.
	Version uint32 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	// SaveSnapshot indicates that the snapshot used to compute the checksum
	// should be saved so that a diff of divergent replicas can later be computed.
	SaveSnapshot bool                 `protobuf:"varint,2,opt,name=save_snapshot,json=saveSnapshot,proto3" json:"save_snapshot,omitempty"`
	Mode         roachpb.ChecksumMode `protobuf:"varint,3,opt,name=mode,proto3,enum=cockroach.roachpb.ChecksumMode" json:"mode,omitempty"`
	// If set, a checkpoint (i.e. cheap backup) of the engine will be taken. This
	// is expected to be set only if we already know that there is an
	// inconsistency and we want to preserve as much state as possible.
	Checkpoint bool `protobuf:"varint,4,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	// Replicas processing this command which find themselves in this slice will
	// terminate. See `CheckConsistencyRequest.Terminate`.
	Terminate []roachpb.ReplicaDescriptor `protobuf:"bytes,6,rep,name=terminate,proto3" json:"terminate"`
}

func (m *ComputeChecksum) Reset()         { *m = ComputeChecksum{} }
func (m *ComputeChecksum) String() string { return proto.CompactTextString(m) }
func (*ComputeChecksum) ProtoMessage()    {}
func (*ComputeChecksum) Descriptor() ([]byte, []int) {
	return fileDescriptor_19df0b186dd19269, []int{3}
}
func (m *ComputeChecksum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComputeChecksum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ComputeChecksum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComputeChecksum.Merge(m, src)
}
func (m *ComputeChecksum) XXX_Size() int {
	return m.Size()
}
func (m *ComputeChecksum) XXX_DiscardUnknown() {
	xxx_messageInfo_ComputeChecksum.DiscardUnknown(m)
}

var xxx_messageInfo_ComputeChecksum proto.InternalMessageInfo

// Compaction holds core details about a suggested compaction.
type Compaction struct {
	// bytes indicates the expected space reclamation from compaction.
	Bytes int64 `protobuf:"varint,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	// suggested_at is nanoseconds since the epoch.
	SuggestedAtNanos int64 `protobuf:"varint,2,opt,name=suggested_at_nanos,json=suggestedAtNanos,proto3" json:"suggested_at_nanos,omitempty"`
}

func (m *Compaction) Reset()         { *m = Compaction{} }
func (m *Compaction) String() string { return proto.CompactTextString(m) }
func (*Compaction) ProtoMessage()    {}
func (*Compaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_19df0b186dd19269, []int{4}
}
func (m *Compaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Compaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Compaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Compaction.Merge(m, src)
}
func (m *Compaction) XXX_Size() int {
	return m.Size()
}
func (m *Compaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Compaction.DiscardUnknown(m)
}

var xxx_messageInfo_Compaction proto.InternalMessageInfo

// SuggestedCompaction holds start and end keys in conjunction with
// the compaction details.
type SuggestedCompaction struct {
	StartKey   github_com_cockroachdb_cockroach_pkg_roachpb.Key `protobuf:"bytes,1,opt,name=start_key,json=startKey,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.Key" json:"start_key,omitempty"`
	EndKey     github_com_cockroachdb_cockroach_pkg_roachpb.Key `protobuf:"bytes,2,opt,name=end_key,json=endKey,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.Key" json:"end_key,omitempty"`
	Compaction `protobuf:"bytes,3,opt,name=compaction,proto3,embedded=compaction" json:"compaction"`
}

func (m *SuggestedCompaction) Reset()         { *m = SuggestedCompaction{} }
func (m *SuggestedCompaction) String() string { return proto.CompactTextString(m) }
func (*SuggestedCompaction) ProtoMessage()    {}
func (*SuggestedCompaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_19df0b186dd19269, []int{5}
}
func (m *SuggestedCompaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuggestedCompaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SuggestedCompaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuggestedCompaction.Merge(m, src)
}
func (m *SuggestedCompaction) XXX_Size() int {
	return m.Size()
}
func (m *SuggestedCompaction) XXX_DiscardUnknown() {
	xxx_messageInfo_SuggestedCompaction.DiscardUnknown(m)
}

var xxx_messageInfo_SuggestedCompaction proto.InternalMessageInfo

// ReplicatedEvalResult is the structured information which together with a
// RocksDB WriteBatch constitutes the proposal payload.
// For the majority of proposals, we expect ReplicatedEvalResult to be
// trivial; only changes to the metadata state (splits, merges, rebalances,
// leases, log truncation, ...) of the Replica or certain special commands must
// sideline information here based on which all Replicas must take action.
type ReplicatedEvalResult struct {
	// Updates to the Replica's ReplicaState. By convention and as outlined on
	// the comment on the ReplicaState message, this field is sparsely populated
	// and any field set overwrites the corresponding field in the state, perhaps
	// with additional side effects (for instance on a descriptor update).
	State           *ReplicaState    `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Split           *Split           `protobuf:"bytes,3,opt,name=split,proto3" json:"split,omitempty"`
	Merge           *Merge           `protobuf:"bytes,4,opt,name=merge,proto3" json:"merge,omitempty"`
	ComputeChecksum *ComputeChecksum `protobuf:"bytes,21,opt,name=compute_checksum,json=computeChecksum,proto3" json:"compute_checksum,omitempty"`
	IsLeaseRequest  bool             `protobuf:"varint,6,opt,name=is_lease_request,json=isLeaseRequest,proto3" json:"is_lease_request,omitempty"`
	IsProbe         bool             `protobuf:"varint,23,opt,name=is_probe,json=isProbe,proto3" json:"is_probe,omitempty"`
	// The timestamp at which this command is writing. Used to verify the validity
	// of the command against the GC threshold and to update the followers'
	// clocks. Only set if the request that produced this command is a write that
	// cares about the timestamp cache.
	WriteTimestamp hlc.Timestamp `protobuf:"bytes,8,opt,name=write_timestamp,json=writeTimestamp,proto3" json:"write_timestamp"`
	// The stats delta corresponding to the data in this WriteBatch. On
	// a split, contains only the contributions to the left-hand side.
	DeprecatedDelta *enginepb.MVCCStats     `protobuf:"bytes,10,opt,name=deprecated_delta,json=deprecatedDelta,proto3" json:"deprecated_delta,omitempty"`
	Delta           enginepb.MVCCStatsDelta `protobuf:"bytes,18,opt,name=delta,proto3" json:"delta"`
	ChangeReplicas  *ChangeReplicas         `protobuf:"bytes,12,opt,name=change_replicas,json=changeReplicas,proto3" json:"change_replicas,omitempty"`
	// RaftLogDelta is the delta in bytes caused by truncation of the raft log.
	// It is only populated when evaluating a TruncateLogRequest. The inclusive
	// index for the truncation is specified in State.TruncatedState. This delta
	// is computed under the assumption that the truncation is happening over
	// the interval [RaftExpectedFirstIndex, index]. If the actual truncation at
	// a replica is over some interval [x, interval] where x !=
	// RaftExpectedFirstIndex it is that replica's job to recalculate this delta
	// in order to be accurate, or to make note of the fact that its raft log
	// size stats may now be inaccurate.
	//
	// NB: this delta does not include the byte size of sideloaded entries.
	// Sideloaded entries are not expected to be common enough that it is worth
	// the optimization to calculate the delta once (at the leaseholder).
	RaftLogDelta int64 `protobuf:"varint,13,opt,name=raft_log_delta,json=raftLogDelta,proto3" json:"raft_log_delta,omitempty"`
	// RaftExpectedFirstIndex is populated starting at cluster version
	// LooselyCoupledRaftLogTruncation. When this is not populated, the replica
	// should not delay enacting the truncation.
	RaftExpectedFirstIndex uint64                                    `protobuf:"varint,25,opt,name=raft_expected_first_index,json=raftExpectedFirstIndex,proto3" json:"raft_expected_first_index,omitempty"`
	MVCCHistoryMutation    *ReplicatedEvalResult_MVCCHistoryMutation `protobuf:"bytes,24,opt,name=mvcc_history_mutation,json=mvccHistoryMutation,proto3" json:"mvcc_history_mutation,omitempty"`
	AddSSTable             *ReplicatedEvalResult_AddSSTable          `protobuf:"bytes,17,opt,name=add_sstable,json=addSstable,proto3" json:"add_sstable,omitempty"`
	// This is the proposal timestamp for the active lease while evaluating a lease request.
	// It will be used to make sure we know if a lease was extended after we sent out the request
	// but before we tried to apply it.
	PrevLeaseProposal *github_com_cockroachdb_cockroach_pkg_util_hlc.ClockTimestamp `protobuf:"bytes,20,opt,name=prev_lease_proposal,json=prevLeaseProposal,proto3,casttype=github.com/cockroachdb/cockroach/pkg/util/hlc.ClockTimestamp" json:"prev_lease_proposal,omitempty"`
	// PriorReadSummary is a summary of the reads that have been served on the
	// range prior to this proposal, which must be a lease change (request or
	// transfer) if the field is set. The read summary is used to update the new
	// leaseholder's timestamp cache to prevent them from serving writes that
	// violate previously served reads.
	//
	// The summary, when available, can be used in place of bumping the new
	// leaseholder's timestamp cache to the new lease's start time. It has two
	// distinct advantages:
	// 1. it can transfer a higher-resolution snapshot of the reads on the range
	//    through a lease transfer, to make the lease transfers less disruptive to
	//    writes because the timestamp cache won't be bumped as high.
	// 2. it can transfer information about reads with synthetic timestamps, which
	//    are not otherwise captured by the new lease's start time.
	//
	// When a ReadSummary is set in a ReplicatedEvalResult, there is always also a
	// write to the RangePriorReadSummaryKey in the RaftCommand.WriteBatch. The
	// persisted summary may be identical to the summary in this field, but it
	// does not have to be. Notably, we intended for the summary included in the
	// ReplicatedEvalResult to eventually be a much higher-resolution version of
	// the ReadSummmary than the version persisted. This scheme of persisting a
	// compressed ReadSummary indefinitely and including a higher-resolution
	// ReadSummary on the RaftCommand allows us to optimize for the common case
	// where the lease transfer is applied on the new leaseholder through Raft log
	// application while ensuring correctness in the case where the lease transfer
	// is applied on the new leaseholder through a Raft snapshot.
	PriorReadSummary *rspb.ReadSummary `protobuf:"bytes,22,opt,name=prior_read_summary,json=priorReadSummary,proto3" json:"prior_read_summary,omitempty"`
}

func (m *ReplicatedEvalResult) Reset()         { *m = ReplicatedEvalResult{} }
func (m *ReplicatedEvalResult) String() string { return proto.CompactTextString(m) }
func (*ReplicatedEvalResult) ProtoMessage()    {}
func (*ReplicatedEvalResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_19df0b186dd19269, []int{6}
}
func (m *ReplicatedEvalResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicatedEvalResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicatedEvalResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicatedEvalResult.Merge(m, src)
}
func (m *ReplicatedEvalResult) XXX_Size() int {
	return m.Size()
}
func (m *ReplicatedEvalResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicatedEvalResult.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicatedEvalResult proto.InternalMessageInfo

// MVCCHistoryMutation describes mutations of MVCC history that may violate
// the closed timestamp, timestamp cache, and guarantees that rely on these
// (e.g. linearizability and serializability). It is currently used to
// disconnect rangefeeds that overlap these spans, as a safeguard -- the
// caller is expected to ensure there are no rangefeeds over such spans in the
// first place.
//
// This is a separate message type to keep the base struct comparable in Go.
type ReplicatedEvalResult_MVCCHistoryMutation struct {
	Spans []roachpb.Span `protobuf:"bytes,1,rep,name=spans,proto3" json:"spans"`
}

func (m *ReplicatedEvalResult_MVCCHistoryMutation) Reset() {
	*m = ReplicatedEvalResult_MVCCHistoryMutation{}
}
func (m *ReplicatedEvalResult_MVCCHistoryMutation) String() string { return proto.CompactTextString(m) }
func (*ReplicatedEvalResult_MVCCHistoryMutation) ProtoMessage()    {}
func (*ReplicatedEvalResult_MVCCHistoryMutation) Descriptor() ([]byte, []int) {
	return fileDescriptor_19df0b186dd19269, []int{6, 0}
}
func (m *ReplicatedEvalResult_MVCCHistoryMutation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicatedEvalResult_MVCCHistoryMutation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicatedEvalResult_MVCCHistoryMutation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicatedEvalResult_MVCCHistoryMutation.Merge(m, src)
}
func (m *ReplicatedEvalResult_MVCCHistoryMutation) XXX_Size() int {
	return m.Size()
}
func (m *ReplicatedEvalResult_MVCCHistoryMutation) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicatedEvalResult_MVCCHistoryMutation.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicatedEvalResult_MVCCHistoryMutation proto.InternalMessageInfo

// AddSSTable is a side effect that must execute before the Raft application
// is committed. It must be idempotent to account for an ill-timed crash after
// applying the side effect, but before committing the batch.
//
// TODO(tschottdorf): additionally, after the crash, the node must not serve
// traffic until the persisted committed log has fully applied. Otherwise, we
// risk exposing data created through such a side effect whose corresponding
// Raft command hasn't committed yet. This isn't so much an issue with AddSSTable
// since these Ranges are not user-visible, but it is a general concern assuming
// other such side effects are added.
type ReplicatedEvalResult_AddSSTable struct {
	Data  []byte       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	CRC32 uint32       `protobuf:"varint,2,opt,name=crc32,proto3" json:"crc32,omitempty"`
	Span  roachpb.Span `protobuf:"bytes,3,opt,name=span,proto3" json:"span"`
	// If true, all SST MVCC timestamps equal the WriteTimestamp. This is given
	// by the SSTTimestampToRequestTimestamp request parameter, which was
	// introduced in 22.1 and only used with the MVCCAddSSTable cluster version.
	//
	// TODO(erikgrinaker): This field currently controls whether to emit an
	// AddSSTable event across the rangefeed. We could equivalently check
	// MVCCHistoryMutation == nil, but that field was introduced in 22.1,
	// and so for log entries written by 21.2 or older it will always be nil.
	// It may be possible to remove this field and check MVCCHistoryMutation
	// instead in 22.2, but _ONLY_ if a below-Raft cluster migration has also
	// taken place since 22.1, to make sure all Raft log entries from 21.2 or
	// older have been applied on all replicas.
	AtWriteTimestamp bool `protobuf:"varint,4,opt,name=at_write_timestamp,json=atWriteTimestamp,proto3" json:"at_write_timestamp,omitempty"`
}

func (m *ReplicatedEvalResult_AddSSTable) Reset()         { *m = ReplicatedEvalResult_AddSSTable{} }
func (m *ReplicatedEvalResult_AddSSTable) String() string { return proto.CompactTextString(m) }
func (*ReplicatedEvalResult_AddSSTable) ProtoMessage()    {}
func (*ReplicatedEvalResult_AddSSTable) Descriptor() ([]byte, []int) {
	return fileDescriptor_19df0b186dd19269, []int{6, 1}
}
func (m *ReplicatedEvalResult_AddSSTable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplicatedEvalResult_AddSSTable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ReplicatedEvalResult_AddSSTable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplicatedEvalResult_AddSSTable.Merge(m, src)
}
func (m *ReplicatedEvalResult_AddSSTable) XXX_Size() int {
	return m.Size()
}
func (m *ReplicatedEvalResult_AddSSTable) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplicatedEvalResult_AddSSTable.DiscardUnknown(m)
}

var xxx_messageInfo_ReplicatedEvalResult_AddSSTable proto.InternalMessageInfo

// WriteBatch is the serialized representation of a RocksDB write
// batch. A wrapper message is used so that the absence of the field
// can be distinguished from a zero-length batch, and so structs
// containing pointers to it can be compared with the == operator.
type WriteBatch struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *WriteBatch) Reset()         { *m = WriteBatch{} }
func (m *WriteBatch) String() string { return proto.CompactTextString(m) }
func (*WriteBatch) ProtoMessage()    {}
func (*WriteBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_19df0b186dd19269, []int{7}
}
func (m *WriteBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriteBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WriteBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteBatch.Merge(m, src)
}
func (m *WriteBatch) XXX_Size() int {
	return m.Size()
}
func (m *WriteBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteBatch.DiscardUnknown(m)
}

var xxx_messageInfo_WriteBatch proto.InternalMessageInfo

// LogicalOpLog is a log of logical MVCC operations. A wrapper message
// is used so that the absence of the field can be distinguished from a
// zero-length batch, and so structs containing pointers to it can be
// compared with the == operator.
type LogicalOpLog struct {
	Ops []enginepb.MVCCLogicalOp `protobuf:"bytes,1,rep,name=ops,proto3" json:"ops"`
}

func (m *LogicalOpLog) Reset()         { *m = LogicalOpLog{} }
func (m *LogicalOpLog) String() string { return proto.CompactTextString(m) }
func (*LogicalOpLog) ProtoMessage()    {}
func (*LogicalOpLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_19df0b186dd19269, []int{8}
}
func (m *LogicalOpLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogicalOpLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *LogicalOpLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogicalOpLog.Merge(m, src)
}
func (m *LogicalOpLog) XXX_Size() int {
	return m.Size()
}
func (m *LogicalOpLog) XXX_DiscardUnknown() {
	xxx_messageInfo_LogicalOpLog.DiscardUnknown(m)
}

var xxx_messageInfo_LogicalOpLog proto.InternalMessageInfo

// RaftCommand is the message written to the raft log. It contains some metadata
// about the proposal itself and a ReplicatedEvalResult + WriteBatch
type RaftCommand struct {
	// proposer_lease_seq is provided to verify at raft command apply-time
	// that the lease under which the command was proposed remains in effect.
	//
	// To see why lease verification downstream of Raft is required, consider the
	// following example:
	// - replica 1 receives a client request for a write
	// - replica 1 checks the lease; the write is permitted
	// - replica 1 proposes the command
	// - time passes, replica 2 commits a new lease
	// - the command applies on replica 1
	// - replica 2 serves anomalous reads which don't see the write
	// - the command applies on replica 2
	ProposerLeaseSequence github_com_cockroachdb_cockroach_pkg_roachpb.LeaseSequence `protobuf:"varint,6,opt,name=proposer_lease_sequence,json=proposerLeaseSequence,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.LeaseSequence" json:"proposer_lease_sequence,omitempty"`
	// deprecated_proposer_lease served the same purpose as proposer_lease_seq.
	// As of VersionLeaseSequence, it is no longer in use.
	//
	// However, unless we add a check that all existing Raft logs on all nodes
	// in the cluster contain only "new" leases, we won't be able to remove the
	// legacy code.
	DeprecatedProposerLease *roachpb.Lease `protobuf:"bytes,5,opt,name=deprecated_proposer_lease,json=deprecatedProposerLease,proto3" json:"deprecated_proposer_lease,omitempty"`
	// When the command is applied, its result is an error if the lease log
	// counter has already reached (or exceeded) max_lease_index.
	//
	// The lease index is a reorder protection mechanism - we don't want Raft
	// commands (proposed by a single node, the one with proposer_lease) executing
	// in a different order than the one in which the corresponding KV requests
	// were evaluated and the commands were proposed. This is important because
	// latching does not fully serialize commands - mostly when it comes to
	// updates to the internal state of the range (this should be re-evaluated
	// once proposer-evaluated KV is completed - see #10413).
	// Similar to the Raft applied index, it is strictly increasing, but may have
	// gaps. A command will only apply successfully if its max_lease_index has not
	// been surpassed by the Range's applied lease index (in which case the
	// command may need to be retried, that is, regenerated with a higher
	// max_lease_index). When the command applies, the new lease index will
	// increase to max_lease_index (so a potential later replay will fail).
	//
	// This mechanism was introduced as a simpler alternative to using the Raft
	// applied index, which is fraught with complexity due to the need to predict
	// exactly the log position at which a command will apply, even when the Raft
	// leader is not colocated with the lease holder (which usually proposes all
	// commands).
	//
	// Pinning the lease-index to the assigned slot (as opposed to allowing gaps
	// as we do now) is an interesting venue to explore from the standpoint of
	// parallelization: One could hope to enforce command ordering in that way
	// (without recourse to a higher-level locking primitive such as the command
	// queue). This is a hard problem: First of all, managing the pending
	// commands gets more involved; a command must not be removed if others have
	// been added after it, and on removal, the assignment counters must be
	// updated accordingly. Managing retry of proposals becomes trickier as
	// well as that uproots whatever ordering was originally envisioned.
	//
	// This field is set through MaxLeaseFooter hackery. Unlike with the
	// ClosedTimestamp, which needs to be nullable in this proto (see comment),
	// there are no nullability concerns with this field. This is because
	// max_lease_index is a primitive type, so it does not get encoded when zero.
	// This alone ensures that the field is not encoded twice in the combined
	// RaftCommand+MaxLeaseFooter proto.
	MaxLeaseIndex uint64 `protobuf:"varint,4,opt,name=max_lease_index,json=maxLeaseIndex,proto3" json:"max_lease_index,omitempty"`
	// The closed timestamp carried by this command. Once a follower is told to
	// apply this command, it knows that there will be no further writes at
	// timestamps <= closed_timestamp. Note that the command itself might
	// represent a write at a lower timestamp, so the closed timestamp can only be
	// used after this command is applied.
	//
	// The field can be zero, which is to be interpreted as no closed timestamp
	// update. If the value is not zero, the value is greater or equal to that of
	// the previous commands (and all before it).
	//
	// This field is set through ClosedTimestampFooter hackery. The field is
	// nullable so that it does not get encoded when empty. This prevents the
	// field from being encoded twice in the combined
	// RaftCommand+ClosedTimestampFooter proto (encoding it twice is not illegal
	// as far as proto goes - the last value wins when decoding - but it is a
	// problem for sideloading, which reduces the size of the proto).
	ClosedTimestamp *hlc.Timestamp `protobuf:"bytes,17,opt,name=closed_timestamp,json=closedTimestamp,proto3" json:"closed_timestamp,omitempty"`
	// replicated_eval_result is a set of structured information that instructs
	// replicated state changes to the part of a Range's replicated state machine
	// that exists outside of RocksDB.
	ReplicatedEvalResult ReplicatedEvalResult `protobuf:"bytes,13,opt,name=replicated_eval_result,json=replicatedEvalResult,proto3" json:"replicated_eval_result"`
	// write_batch is a RocksDB WriteBatch that will be applied to RockDB during
	// the application of the Raft command. The batch can be thought of as a
	// series of replicated instructions that inform a RocksDB engine on how to
	// change.
	WriteBatch *WriteBatch `protobuf:"bytes,14,opt,name=write_batch,json=writeBatch,proto3" json:"write_batch,omitempty"`
	// logical_op_log contains a series of logical MVCC operations that correspond
	// to the physical operations being made in the write_batch.
	LogicalOpLog *LogicalOpLog `protobuf:"bytes,15,opt,name=logical_op_log,json=logicalOpLog,proto3" json:"logical_op_log,omitempty"`
	// trace_data, if not empty, contains details of the proposer's trace as
	// returned by Tracer.InjectMetaInto(sp.Meta(), ...). This is used to create
	// spans for the command application process on all the replicas that "follow
	// from" the proposer.
	TraceData map[string]string `protobuf:"bytes,16,rep,name=trace_data,json=traceData,proto3" json:"trace_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *RaftCommand) Reset()         { *m = RaftCommand{} }
func (m *RaftCommand) String() string { return proto.CompactTextString(m) }
func (*RaftCommand) ProtoMessage()    {}
func (*RaftCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_19df0b186dd19269, []int{9}
}
func (m *RaftCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RaftCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftCommand.Merge(m, src)
}
func (m *RaftCommand) XXX_Size() int {
	return m.Size()
}
func (m *RaftCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftCommand.DiscardUnknown(m)
}

var xxx_messageInfo_RaftCommand proto.InternalMessageInfo

// RaftCommandFooter contains a subset of the fields in RaftCommand. It is used
// to optimize a pattern where most of the fields in RaftCommand are marshaled
// outside of a heavily contended critical section, except for the fields in the
// footer, which are assigned and marshaled inside of the critical section and
// appended to the marshaled byte buffer. This minimizes the memory allocation
// and marshaling work performed under lock.
type RaftCommandFooter struct {
	MaxLeaseIndex uint64 `protobuf:"varint,4,opt,name=max_lease_index,json=maxLeaseIndex,proto3" json:"max_lease_index,omitempty"`
	// NOTE: unlike in RaftCommand, there's no reason to make this field nullable
	// and so we make it non-nullable in order to save allocations. This means
	// that the field on a decoded RaftCommand will also never be nil, but we
	// don't rely on that.
	ClosedTimestamp hlc.Timestamp `protobuf:"bytes,17,opt,name=closed_timestamp,json=closedTimestamp,proto3" json:"closed_timestamp"`
}

func (m *RaftCommandFooter) Reset()         { *m = RaftCommandFooter{} }
func (m *RaftCommandFooter) String() string { return proto.CompactTextString(m) }
func (*RaftCommandFooter) ProtoMessage()    {}
func (*RaftCommandFooter) Descriptor() ([]byte, []int) {
	return fileDescriptor_19df0b186dd19269, []int{10}
}
func (m *RaftCommandFooter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftCommandFooter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RaftCommandFooter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftCommandFooter.Merge(m, src)
}
func (m *RaftCommandFooter) XXX_Size() int {
	return m.Size()
}
func (m *RaftCommandFooter) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftCommandFooter.DiscardUnknown(m)
}

var xxx_messageInfo_RaftCommandFooter proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Split)(nil), "cockroach.kv.kvserver.storagepb.Split")
	proto.RegisterType((*Merge)(nil), "cockroach.kv.kvserver.storagepb.Merge")
	proto.RegisterType((*ChangeReplicas)(nil), "cockroach.kv.kvserver.storagepb.ChangeReplicas")
	proto.RegisterType((*ComputeChecksum)(nil), "cockroach.kv.kvserver.storagepb.ComputeChecksum")
	proto.RegisterType((*Compaction)(nil), "cockroach.kv.kvserver.storagepb.Compaction")
	proto.RegisterType((*SuggestedCompaction)(nil), "cockroach.kv.kvserver.storagepb.SuggestedCompaction")
	proto.RegisterType((*ReplicatedEvalResult)(nil), "cockroach.kv.kvserver.storagepb.ReplicatedEvalResult")
	proto.RegisterType((*ReplicatedEvalResult_MVCCHistoryMutation)(nil), "cockroach.kv.kvserver.storagepb.ReplicatedEvalResult.MVCCHistoryMutation")
	proto.RegisterType((*ReplicatedEvalResult_AddSSTable)(nil), "cockroach.kv.kvserver.storagepb.ReplicatedEvalResult.AddSSTable")
	proto.RegisterType((*WriteBatch)(nil), "cockroach.kv.kvserver.storagepb.WriteBatch")
	proto.RegisterType((*LogicalOpLog)(nil), "cockroach.kv.kvserver.storagepb.LogicalOpLog")
	proto.RegisterType((*RaftCommand)(nil), "cockroach.kv.kvserver.storagepb.RaftCommand")
	proto.RegisterMapType((map[string]string)(nil), "cockroach.kv.kvserver.storagepb.RaftCommand.TraceDataEntry")
	proto.RegisterType((*RaftCommandFooter)(nil), "cockroach.kv.kvserver.storagepb.RaftCommandFooter")
}

func init() {
	proto.RegisterFile("kv/kvserver/kvserverpb/proposer_kv.proto", fileDescriptor_19df0b186dd19269)
}

var fileDescriptor_19df0b186dd19269 = []byte{
	// 1654 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0x4f, 0x73, 0x1b, 0x49,
	0x15, 0xf7, 0xd8, 0x23, 0x7b, 0xfc, 0x64, 0x4b, 0xe3, 0xb6, 0x13, 0x4f, 0x0c, 0x48, 0x2e, 0xb3,
	0x6c, 0x99, 0x65, 0x91, 0x16, 0x1b, 0xaa, 0x20, 0xa4, 0xa8, 0x8d, 0xe4, 0xa4, 0x62, 0xad, 0x6d,
	0xb2, 0x2d, 0x67, 0xa1, 0x16, 0xaa, 0xa6, 0x5a, 0x33, 0x1d, 0x69, 0xd0, 0x68, 0x66, 0xd2, 0xdd,
	0xd2, 0xc6, 0x9f, 0x81, 0x03, 0x50, 0x45, 0x01, 0x27, 0xd8, 0xe2, 0xc4, 0xd7, 0xe0, 0x96, 0x63,
	0x8e, 0x5b, 0x1c, 0x54, 0xac, 0x73, 0xe1, 0x33, 0xe4, 0x44, 0x75, 0x4f, 0x8f, 0x34, 0x76, 0x29,
	0x58, 0x09, 0xb7, 0x9e, 0xd7, 0xef, 0xfd, 0xfa, 0xf5, 0xfb, 0xf3, 0xeb, 0x37, 0xb0, 0xdf, 0x1f,
	0xd5, 0xfb, 0x23, 0x4e, 0xd9, 0x88, 0xb2, 0xc9, 0x22, 0xe9, 0xd4, 0x13, 0x16, 0x27, 0x31, 0xa7,
	0xcc, 0xed, 0x8f, 0x6a, 0x09, 0x8b, 0x45, 0x8c, 0xaa, 0x5e, 0xec, 0xf5, 0x59, 0x4c, 0xbc, 0x5e,
	0xad, 0x3f, 0xaa, 0x65, 0xaa, 0x35, 0x2e, 0x62, 0x46, 0xba, 0x34, 0xe9, 0xec, 0x6c, 0xa8, 0xcd,
	0xa4, 0x53, 0x27, 0x49, 0x90, 0xda, 0xec, 0xa0, 0x4c, 0xe4, 0x13, 0x41, 0xb4, 0xec, 0x76, 0x26,
	0x1b, 0x50, 0x41, 0x72, 0xf2, 0x6f, 0x68, 0xa4, 0x3a, 0x8d, 0xba, 0x41, 0x44, 0xa5, 0xc2, 0xc8,
	0xf3, 0xf4, 0xe6, 0x37, 0x67, 0x6e, 0x1e, 0xea, 0xdd, 0xbd, 0x37, 0x5c, 0x82, 0x0b, 0x22, 0xa8,
	0xd6, 0xf9, 0x20, 0xaf, 0xc3, 0x28, 0xf1, 0xf9, 0x70, 0x30, 0x20, 0xec, 0xa2, 0xce, 0xb8, 0xd4,
	0x4c, 0x3f, 0xb4, 0xae, 0x33, 0x14, 0x41, 0x58, 0xef, 0x85, 0x5e, 0x5d, 0x04, 0x03, 0xca, 0x05,
	0x19, 0x24, 0x7a, 0x67, 0xab, 0x1b, 0x77, 0x63, 0xb5, 0xac, 0xcb, 0x55, 0x2a, 0xdd, 0xfb, 0x87,
	0x01, 0x85, 0x76, 0x12, 0x06, 0x02, 0x35, 0x61, 0x45, 0xb0, 0xa0, 0xdb, 0xa5, 0xcc, 0x31, 0x76,
	0x8d, 0xfd, 0xe2, 0x41, 0xb5, 0x36, 0x0d, 0x9b, 0xbe, 0x78, 0x4d, 0xa9, 0x9e, 0xa7, 0x6a, 0x0d,
	0xeb, 0xc5, 0xb8, 0xba, 0xf0, 0x72, 0x5c, 0x35, 0x70, 0x66, 0x89, 0xce, 0x61, 0x95, 0xf5, 0xb8,
	0xeb, 0xd3, 0x50, 0x10, 0x67, 0x51, 0xc1, 0x7c, 0x27, 0x07, 0xa3, 0x43, 0x51, 0xcb, 0x42, 0x51,
	0x3b, 0xfd, 0xac, 0xd9, 0x6c, 0x0b, 0x22, 0x78, 0xc3, 0x96, 0x60, 0x97, 0xe3, 0xaa, 0x85, 0x1f,
	0xb5, 0x8f, 0xa4, 0x39, 0xb6, 0x58, 0x8f, 0xab, 0xd5, 0x5d, 0xf3, 0x3f, 0x5f, 0x56, 0x8d, 0x3d,
	0x0c, 0x85, 0x53, 0xca, 0xba, 0x74, 0x3e, 0x4f, 0x95, 0xea, 0x9b, 0x3d, 0xd5, 0x98, 0x3e, 0x94,
	0x9a, 0x3d, 0x12, 0x75, 0x29, 0xa6, 0x49, 0x18, 0x78, 0x84, 0xa3, 0x93, 0xeb, 0xe0, 0xfb, 0x33,
	0xc0, 0xaf, 0xda, 0xfc, 0xaf, 0x53, 0xfe, 0xf2, 0x65, 0x75, 0x61, 0xef, 0xeb, 0x45, 0x28, 0x37,
	0xe3, 0x41, 0x32, 0x14, 0xb4, 0xd9, 0xa3, 0x5e, 0x9f, 0x0f, 0x07, 0xe8, 0x37, 0x50, 0xf4, 0xf4,
	0xda, 0x0d, 0x7c, 0x75, 0xd6, 0x5a, 0xe3, 0x58, 0x22, 0xfc, 0x6b, 0x5c, 0x3d, 0xec, 0x06, 0xa2,
	0x37, 0xec, 0xd4, 0xbc, 0x78, 0x50, 0x9f, 0x9c, 0xee, 0x77, 0xa6, 0xeb, 0x7a, 0xd2, 0xef, 0xd6,
	0x55, 0xaa, 0x87, 0xc3, 0xc0, 0xaf, 0x3d, 0x79, 0x72, 0x7c, 0x74, 0x39, 0xae, 0x42, 0x86, 0x7e,
	0x7c, 0x84, 0x21, 0x43, 0x3f, 0xf6, 0x91, 0x03, 0x2b, 0x23, 0xca, 0x78, 0x10, 0x47, 0x4e, 0x61,
	0xd7, 0xd8, 0x5f, 0xc7, 0xd9, 0x27, 0xfa, 0x36, 0xac, 0x73, 0x32, 0xa2, 0x2e, 0x8f, 0x48, 0xc2,
	0x7b, 0xb1, 0x50, 0x39, 0xb3, 0xf0, 0x9a, 0x14, 0xb6, 0xb5, 0x0c, 0x1d, 0x82, 0x39, 0x88, 0x7d,
	0xea, 0x2c, 0xed, 0x1a, 0xfb, 0xa5, 0x99, 0xc1, 0xce, 0xce, 0x3d, 0x8d, 0x7d, 0x8a, 0x95, 0x32,
	0xaa, 0x40, 0xea, 0x41, 0x12, 0x07, 0x91, 0x70, 0x4c, 0x05, 0x9b, 0x93, 0xa0, 0x47, 0xb0, 0x2a,
	0x28, 0x1b, 0x04, 0x11, 0x11, 0xd4, 0x59, 0xde, 0x5d, 0xda, 0x2f, 0x1e, 0xbc, 0x37, 0x03, 0x59,
	0xc7, 0xf8, 0x88, 0x72, 0x8f, 0x05, 0x89, 0x88, 0x59, 0xc3, 0x94, 0x31, 0xc2, 0x53, 0x63, 0x9d,
	0xc9, 0xcf, 0x00, 0x64, 0x88, 0x89, 0x27, 0xe4, 0xbd, 0xb6, 0xa0, 0xd0, 0xb9, 0x10, 0x94, 0xab,
	0xb8, 0x2e, 0xe1, 0xf4, 0x03, 0x7d, 0x08, 0x88, 0x0f, 0xbb, 0x5d, 0xca, 0x05, 0xf5, 0x5d, 0x22,
	0xdc, 0x88, 0x44, 0x31, 0x57, 0x57, 0x5e, 0xc2, 0xf6, 0x64, 0xe7, 0xbe, 0x38, 0x93, 0x72, 0x8d,
	0xfb, 0xc7, 0x45, 0xd8, 0x6c, 0x67, 0x5b, 0xb9, 0x13, 0x3e, 0x85, 0x55, 0x2e, 0x08, 0x13, 0x6e,
	0x9f, 0x5e, 0xe8, 0xec, 0xfd, 0xf0, 0xf5, 0xb8, 0xfa, 0xd1, 0x5c, 0x99, 0xcb, 0x6e, 0xf7, 0x09,
	0xbd, 0xc0, 0x96, 0x82, 0xf9, 0x84, 0x5e, 0xa0, 0x53, 0x58, 0xa1, 0x91, 0xaf, 0x00, 0x17, 0xff,
	0x0f, 0xc0, 0x65, 0x1a, 0xf9, 0x12, 0xee, 0x09, 0x80, 0x37, 0xf1, 0x57, 0x25, 0xaf, 0x78, 0xf0,
	0xbd, 0xda, 0x0d, 0x54, 0x58, 0x9b, 0x5e, 0x31, 0x57, 0xcf, 0x39, 0x20, 0x1d, 0x96, 0x7f, 0xae,
	0xc1, 0x96, 0xce, 0x8d, 0xa0, 0xfe, 0x83, 0x11, 0x09, 0x31, 0xe5, 0xc3, 0x50, 0xd2, 0x48, 0x41,
	0x71, 0x97, 0xee, 0xfe, 0xef, 0xdf, 0x78, 0xa0, 0x46, 0x91, 0x2c, 0x40, 0x71, 0x6a, 0x8b, 0xee,
	0x41, 0x81, 0x4b, 0xa6, 0xd1, 0x5e, 0xbf, 0x7f, 0x23, 0x88, 0xe2, 0x25, 0x9c, 0x1a, 0x49, 0xeb,
	0x81, 0xec, 0x7e, 0x55, 0x75, 0xf3, 0x58, 0x2b, 0xae, 0xc0, 0xa9, 0x11, 0xfa, 0x15, 0xd8, 0x5e,
	0xda, 0xab, 0x6e, 0xd6, 0x42, 0xce, 0x2d, 0x05, 0xf4, 0xd1, 0x5c, 0xc1, 0xcb, 0x35, 0x39, 0x2e,
	0x7b, 0xd7, 0xba, 0x7e, 0x1f, 0xec, 0x80, 0xbb, 0x21, 0x25, 0x9c, 0xba, 0x8c, 0x3e, 0x1b, 0x52,
	0x2e, 0x9c, 0x65, 0xd5, 0x1b, 0xa5, 0x80, 0x9f, 0x48, 0x31, 0x4e, 0xa5, 0xe8, 0x0e, 0x58, 0x01,
	0x77, 0x13, 0x16, 0x77, 0xa8, 0xb3, 0xad, 0x34, 0x56, 0x02, 0xfe, 0x58, 0x7e, 0xa2, 0x13, 0x28,
	0x7f, 0xc1, 0x02, 0x41, 0xdd, 0x09, 0xc5, 0x3b, 0x96, 0x72, 0xf0, 0x5b, 0x39, 0x07, 0x25, 0x39,
	0xd4, 0x7a, 0xa1, 0x57, 0x3b, 0xcf, 0x94, 0x74, 0xe7, 0x94, 0x94, 0xed, 0x44, 0x8a, 0x1e, 0x83,
	0xed, 0xd3, 0x84, 0x51, 0x95, 0x48, 0xcd, 0xdc, 0xf0, 0x16, 0xcc, 0x8d, 0xcb, 0x53, 0x73, 0x45,
	0xd7, 0xe8, 0x21, 0x14, 0x52, 0x18, 0xa4, 0x60, 0x3e, 0x98, 0x0b, 0x46, 0x99, 0x6a, 0x17, 0x53,
	0x73, 0xf4, 0x4b, 0x28, 0x7b, 0x8a, 0x68, 0x5d, 0xa6, 0x99, 0xd6, 0x59, 0x53, 0x88, 0xf5, 0x9b,
	0x13, 0x71, 0x85, 0xa0, 0x71, 0xc9, 0xbb, 0x4a, 0xf2, 0xef, 0x41, 0x89, 0x91, 0xa7, 0xc2, 0x0d,
	0xe3, 0xae, 0xbe, 0xf1, 0xba, 0x22, 0x81, 0x35, 0x29, 0x3d, 0x89, 0xbb, 0xe9, 0x3d, 0x7e, 0x02,
	0x77, 0x94, 0x16, 0x7d, 0x9e, 0x50, 0x4f, 0x06, 0xe7, 0x69, 0xc0, 0xb8, 0x70, 0x83, 0xc8, 0xa7,
	0xcf, 0x9d, 0x3b, 0xbb, 0xc6, 0xbe, 0x89, 0x6f, 0x4b, 0x85, 0x07, 0x7a, 0xff, 0xa1, 0xdc, 0x3e,
	0x96, 0xbb, 0xe8, 0x4f, 0x06, 0xdc, 0x92, 0xcf, 0xbc, 0xdb, 0x0b, 0xa4, 0x53, 0x17, 0xee, 0x60,
	0x28, 0x88, 0xea, 0x43, 0x47, 0xdd, 0xe0, 0x78, 0xde, 0xb6, 0xb8, 0xd2, 0x5c, 0x2a, 0x5a, 0x8f,
	0x52, 0xc4, 0x53, 0x0d, 0xd8, 0xd8, 0xbe, 0x1c, 0x57, 0x37, 0x67, 0x6c, 0xe0, 0x4d, 0xe9, 0xc0,
	0x35, 0x21, 0x7a, 0x06, 0x45, 0xe2, 0xfb, 0x2e, 0xe7, 0x82, 0x74, 0x42, 0xea, 0x6c, 0x28, 0x6f,
	0x3e, 0x7e, 0x37, 0x6f, 0xee, 0xfb, 0x7e, 0xbb, 0x7d, 0x2e, 0x71, 0x1a, 0x25, 0xf9, 0xfa, 0x4c,
	0xbf, 0x31, 0x10, 0xdf, 0x6f, 0xa7, 0x67, 0xa0, 0xdf, 0x19, 0xb0, 0x99, 0x30, 0x3a, 0xd2, 0x65,
	0x9f, 0x8e, 0x67, 0x24, 0x74, 0xb6, 0xe6, 0xa9, 0xd9, 0x8f, 0x5f, 0x8f, 0xab, 0xf7, 0xe6, 0x7f,
	0x0d, 0xa5, 0x71, 0x33, 0x8c, 0xbd, 0xfe, 0x04, 0x01, 0x6f, 0xc8, 0xb3, 0x55, 0x6b, 0x3d, 0xd6,
	0x27, 0xa3, 0x5f, 0x03, 0x4a, 0x58, 0x10, 0x33, 0x57, 0x0e, 0x53, 0xae, 0x1e, 0xa0, 0x9c, 0xdb,
	0xca, 0x9f, 0xda, 0x1b, 0x62, 0x91, 0x9b, 0xbb, 0x6a, 0x98, 0x12, 0xbf, 0x9d, 0xae, 0xb1, 0xad,
	0x90, 0x72, 0x92, 0x9d, 0x16, 0xcc, 0x4a, 0x07, 0x3a, 0x94, 0x9c, 0x46, 0x22, 0xf9, 0x24, 0xc9,
	0xc7, 0x6e, 0x7b, 0xe6, 0x74, 0x45, 0xa2, 0xac, 0x05, 0x94, 0xee, 0xce, 0xdf, 0x0d, 0xc8, 0x85,
	0x15, 0x21, 0x30, 0xe5, 0xd8, 0x99, 0xbe, 0x37, 0x58, 0xad, 0x51, 0x15, 0x0a, 0x1e, 0xf3, 0x0e,
	0x0f, 0x14, 0xe1, 0xae, 0x37, 0x56, 0x2f, 0xc7, 0xd5, 0x42, 0x13, 0x37, 0x0f, 0x0f, 0x70, 0x2a,
	0x47, 0x3f, 0x00, 0x53, 0x82, 0x69, 0x2e, 0xbd, 0xe1, 0x5c, 0xa5, 0x2a, 0x1f, 0x4a, 0x22, 0xdc,
	0xeb, 0x24, 0x93, 0x3e, 0xe2, 0x36, 0x11, 0xbf, 0xb8, 0xc2, 0x20, 0x2d, 0xd3, 0x32, 0xec, 0xc5,
	0x96, 0x69, 0x15, 0xec, 0xe5, 0x96, 0x69, 0xad, 0xd8, 0x56, 0xcb, 0xb4, 0x56, 0x6d, 0x68, 0x99,
	0x56, 0xc9, 0x2e, 0xb7, 0x4c, 0xab, 0x6c, 0xdb, 0x2d, 0xd3, 0xb2, 0xed, 0x8d, 0x96, 0x69, 0x6d,
	0xda, 0x5b, 0xad, 0x65, 0xeb, 0x0f, 0x67, 0xf6, 0x5f, 0xcf, 0xf6, 0x76, 0x01, 0x14, 0x52, 0x83,
	0x08, 0xaf, 0x37, 0xeb, 0x6e, 0x7b, 0x9f, 0xc2, 0xda, 0x49, 0xdc, 0x0d, 0x3c, 0x12, 0xfe, 0x3c,
	0x39, 0x89, 0xbb, 0xe8, 0x3e, 0x2c, 0xc5, 0x49, 0x16, 0xc1, 0xef, 0xde, 0xc4, 0x2b, 0x13, 0x53,
	0x7d, 0x37, 0x69, 0xbb, 0xf7, 0xe7, 0x65, 0x28, 0x62, 0xf2, 0x54, 0x34, 0xe3, 0xc1, 0x80, 0x44,
	0x3e, 0x1a, 0xc1, 0xf6, 0xe4, 0x87, 0x21, 0x2d, 0x50, 0x2e, 0x19, 0x38, 0xf2, 0xa8, 0x22, 0xe6,
	0xa5, 0xc6, 0xcf, 0x5e, 0x8f, 0xab, 0x77, 0xdf, 0xea, 0x11, 0x56, 0xc5, 0xd6, 0xd6, 0x28, 0xf8,
	0x56, 0x06, 0x7f, 0x45, 0x8c, 0xce, 0xe1, 0x4e, 0x8e, 0x76, 0xaf, 0xba, 0xa0, 0xa6, 0xb4, 0xe2,
	0x81, 0x33, 0x23, 0x55, 0xe9, 0x1b, 0xb1, 0x3d, 0x35, 0x7d, 0x9c, 0x47, 0x47, 0xef, 0x43, 0x79,
	0x40, 0x9e, 0xeb, 0x8b, 0xa4, 0x44, 0x65, 0x2a, 0xa2, 0x5a, 0x1f, 0x90, 0xe7, 0x4a, 0x25, 0xe5,
	0xa7, 0x47, 0x60, 0x7b, 0x61, 0xcc, 0xa9, 0x9f, 0x4b, 0xef, 0xc6, 0x1c, 0xfd, 0x88, 0xcb, 0xa9,
	0xd9, 0xf4, 0xf9, 0x78, 0x06, 0xb7, 0xd9, 0x84, 0x1c, 0x5c, 0x3a, 0x22, 0xa1, 0xcb, 0x14, 0x3d,
	0x28, 0x4a, 0x2d, 0x1e, 0xfc, 0xe8, 0x9d, 0xb8, 0x45, 0x67, 0x6c, 0x8b, 0xcd, 0x1a, 0x31, 0x4e,
	0xa0, 0x98, 0x96, 0x66, 0x47, 0x16, 0x8e, 0x53, 0x9a, 0x73, 0xb2, 0x99, 0xd6, 0x1a, 0x86, 0x2f,
	0xa6, 0x75, 0xd7, 0x86, 0x52, 0x98, 0x16, 0x8a, 0x1b, 0x27, 0xf2, 0x45, 0x70, 0xca, 0x73, 0x4e,
	0x2e, 0xf9, 0xd2, 0xc4, 0x6b, 0x61, 0xbe, 0x50, 0x3f, 0x07, 0x10, 0x8c, 0x78, 0xd4, 0x55, 0x25,
	0x6d, 0xab, 0x7a, 0xfd, 0xe9, 0xcd, 0x91, 0x98, 0xd6, 0x65, 0xed, 0x5c, 0x9a, 0x1f, 0x11, 0x41,
	0x1e, 0x44, 0x82, 0x5d, 0xe0, 0x55, 0x91, 0x7d, 0xef, 0xdc, 0x83, 0xd2, 0xd5, 0x4d, 0x64, 0xc3,
	0x52, 0x36, 0x85, 0xae, 0x62, 0xb9, 0x94, 0xf3, 0xef, 0x88, 0x84, 0xc3, 0x74, 0x0a, 0x5b, 0xc5,
	0xe9, 0xc7, 0xdd, 0xc5, 0x1f, 0x1b, 0x2d, 0xd3, 0x5a, 0xb2, 0xcd, 0x49, 0xcb, 0x2e, 0xda, 0x4b,
	0x69, 0x3b, 0xfe, 0xed, 0x6c, 0xef, 0xb7, 0x06, 0x6c, 0xe4, 0x3c, 0x78, 0x18, 0xc7, 0x82, 0xb2,
	0xb9, 0x2b, 0xea, 0xec, 0x1d, 0x2b, 0x4a, 0x67, 0xfa, 0x7a, 0x5d, 0x35, 0x3e, 0x7c, 0xf1, 0x75,
	0x65, 0xe1, 0xc5, 0x65, 0xc5, 0x78, 0x79, 0x59, 0x31, 0xbe, 0xba, 0xac, 0x18, 0xff, 0xbe, 0xac,
	0x18, 0xbf, 0x7f, 0x55, 0x59, 0x78, 0xf9, 0xaa, 0xb2, 0xf0, 0xd5, 0xab, 0xca, 0xc2, 0xe7, 0x30,
	0xfd, 0x5d, 0xee, 0x2c, 0xab, 0xbf, 0xd9, 0xc3, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x82,
	0xdb, 0xbf, 0x14, 0x10, 0x00, 0x00,
}

func (this *Split) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Split)
	if !ok {
		that2, ok := that.(Split)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SplitTrigger.Equal(&that1.SplitTrigger) {
		return false
	}
	if !this.RHSDelta.Equal(&that1.RHSDelta) {
		return false
	}
	return true
}
func (this *Merge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Merge)
	if !ok {
		that2, ok := that.(Merge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.MergeTrigger.Equal(&that1.MergeTrigger) {
		return false
	}
	return true
}
func (this *ComputeChecksum) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ComputeChecksum)
	if !ok {
		that2, ok := that.(ComputeChecksum)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChecksumID.Equal(that1.ChecksumID) {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if this.SaveSnapshot != that1.SaveSnapshot {
		return false
	}
	if this.Mode != that1.Mode {
		return false
	}
	if this.Checkpoint != that1.Checkpoint {
		return false
	}
	if len(this.Terminate) != len(that1.Terminate) {
		return false
	}
	for i := range this.Terminate {
		if !this.Terminate[i].Equal(&that1.Terminate[i]) {
			return false
		}
	}
	return true
}
func (this *Compaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Compaction)
	if !ok {
		that2, ok := that.(Compaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Bytes != that1.Bytes {
		return false
	}
	if this.SuggestedAtNanos != that1.SuggestedAtNanos {
		return false
	}
	return true
}
func (this *SuggestedCompaction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuggestedCompaction)
	if !ok {
		that2, ok := that.(SuggestedCompaction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.StartKey, that1.StartKey) {
		return false
	}
	if !bytes.Equal(this.EndKey, that1.EndKey) {
		return false
	}
	if !this.Compaction.Equal(&that1.Compaction) {
		return false
	}
	return true
}
func (m *Split) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Split) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Split) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RHSDelta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposerKv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.SplitTrigger.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposerKv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Merge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Merge) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Merge) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MergeTrigger.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposerKv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ChangeReplicas) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeReplicas) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeReplicas) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ChangeReplicasTrigger.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposerKv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ComputeChecksum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComputeChecksum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComputeChecksum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Terminate) > 0 {
		for iNdEx := len(m.Terminate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Terminate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposerKv(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Version != 0 {
		i = encodeVarintProposerKv(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x28
	}
	if m.Checkpoint {
		i--
		if m.Checkpoint {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Mode != 0 {
		i = encodeVarintProposerKv(dAtA, i, uint64(m.Mode))
		i--
		dAtA[i] = 0x18
	}
	if m.SaveSnapshot {
		i--
		if m.SaveSnapshot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.ChecksumID.Size()
		i -= size
		if _, err := m.ChecksumID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintProposerKv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Compaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Compaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Compaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SuggestedAtNanos != 0 {
		i = encodeVarintProposerKv(dAtA, i, uint64(m.SuggestedAtNanos))
		i--
		dAtA[i] = 0x10
	}
	if m.Bytes != 0 {
		i = encodeVarintProposerKv(dAtA, i, uint64(m.Bytes))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SuggestedCompaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuggestedCompaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuggestedCompaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Compaction.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposerKv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.EndKey) > 0 {
		i -= len(m.EndKey)
		copy(dAtA[i:], m.EndKey)
		i = encodeVarintProposerKv(dAtA, i, uint64(len(m.EndKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StartKey) > 0 {
		i -= len(m.StartKey)
		copy(dAtA[i:], m.StartKey)
		i = encodeVarintProposerKv(dAtA, i, uint64(len(m.StartKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReplicatedEvalResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicatedEvalResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicatedEvalResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RaftExpectedFirstIndex != 0 {
		i = encodeVarintProposerKv(dAtA, i, uint64(m.RaftExpectedFirstIndex))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.MVCCHistoryMutation != nil {
		{
			size, err := m.MVCCHistoryMutation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposerKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.IsProbe {
		i--
		if m.IsProbe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.PriorReadSummary != nil {
		{
			size, err := m.PriorReadSummary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposerKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.ComputeChecksum != nil {
		{
			size, err := m.ComputeChecksum.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposerKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.PrevLeaseProposal != nil {
		{
			size, err := m.PrevLeaseProposal.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposerKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	{
		size, err := m.Delta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposerKv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	if m.AddSSTable != nil {
		{
			size, err := m.AddSSTable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposerKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.RaftLogDelta != 0 {
		i = encodeVarintProposerKv(dAtA, i, uint64(m.RaftLogDelta))
		i--
		dAtA[i] = 0x68
	}
	if m.ChangeReplicas != nil {
		{
			size, err := m.ChangeReplicas.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposerKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.DeprecatedDelta != nil {
		{
			size, err := m.DeprecatedDelta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposerKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	{
		size, err := m.WriteTimestamp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposerKv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.IsLeaseRequest {
		i--
		if m.IsLeaseRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Merge != nil {
		{
			size, err := m.Merge.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposerKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Split != nil {
		{
			size, err := m.Split.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposerKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.State != nil {
		{
			size, err := m.State.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposerKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *ReplicatedEvalResult_MVCCHistoryMutation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicatedEvalResult_MVCCHistoryMutation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicatedEvalResult_MVCCHistoryMutation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Spans) > 0 {
		for iNdEx := len(m.Spans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Spans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposerKv(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ReplicatedEvalResult_AddSSTable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplicatedEvalResult_AddSSTable) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReplicatedEvalResult_AddSSTable) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AtWriteTimestamp {
		i--
		if m.AtWriteTimestamp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposerKv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.CRC32 != 0 {
		i = encodeVarintProposerKv(dAtA, i, uint64(m.CRC32))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintProposerKv(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WriteBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WriteBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintProposerKv(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogicalOpLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogicalOpLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogicalOpLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for iNdEx := len(m.Ops) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ops[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposerKv(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RaftCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftCommand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftCommand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClosedTimestamp != nil {
		{
			size, err := m.ClosedTimestamp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposerKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.TraceData) > 0 {
		keysForTraceData := make([]string, 0, len(m.TraceData))
		for k := range m.TraceData {
			keysForTraceData = append(keysForTraceData, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTraceData)
		for iNdEx := len(keysForTraceData) - 1; iNdEx >= 0; iNdEx-- {
			v := m.TraceData[string(keysForTraceData[iNdEx])]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintProposerKv(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(keysForTraceData[iNdEx])
			copy(dAtA[i:], keysForTraceData[iNdEx])
			i = encodeVarintProposerKv(dAtA, i, uint64(len(keysForTraceData[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintProposerKv(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if m.LogicalOpLog != nil {
		{
			size, err := m.LogicalOpLog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposerKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.WriteBatch != nil {
		{
			size, err := m.WriteBatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposerKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	{
		size, err := m.ReplicatedEvalResult.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposerKv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if m.ProposerLeaseSequence != 0 {
		i = encodeVarintProposerKv(dAtA, i, uint64(m.ProposerLeaseSequence))
		i--
		dAtA[i] = 0x30
	}
	if m.DeprecatedProposerLease != nil {
		{
			size, err := m.DeprecatedProposerLease.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposerKv(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.MaxLeaseIndex != 0 {
		i = encodeVarintProposerKv(dAtA, i, uint64(m.MaxLeaseIndex))
		i--
		dAtA[i] = 0x20
	}
	return len(dAtA) - i, nil
}

func (m *RaftCommandFooter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftCommandFooter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaftCommandFooter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ClosedTimestamp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposerKv(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x8a
	if m.MaxLeaseIndex != 0 {
		i = encodeVarintProposerKv(dAtA, i, uint64(m.MaxLeaseIndex))
		i--
		dAtA[i] = 0x20
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposerKv(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposerKv(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Split) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SplitTrigger.Size()
	n += 1 + l + sovProposerKv(uint64(l))
	l = m.RHSDelta.Size()
	n += 1 + l + sovProposerKv(uint64(l))
	return n
}

func (m *Merge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MergeTrigger.Size()
	n += 1 + l + sovProposerKv(uint64(l))
	return n
}

func (m *ChangeReplicas) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ChangeReplicasTrigger.Size()
	n += 1 + l + sovProposerKv(uint64(l))
	return n
}

func (m *ComputeChecksum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ChecksumID.Size()
	n += 1 + l + sovProposerKv(uint64(l))
	if m.SaveSnapshot {
		n += 2
	}
	if m.Mode != 0 {
		n += 1 + sovProposerKv(uint64(m.Mode))
	}
	if m.Checkpoint {
		n += 2
	}
	if m.Version != 0 {
		n += 1 + sovProposerKv(uint64(m.Version))
	}
	if len(m.Terminate) > 0 {
		for _, e := range m.Terminate {
			l = e.Size()
			n += 1 + l + sovProposerKv(uint64(l))
		}
	}
	return n
}

func (m *Compaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bytes != 0 {
		n += 1 + sovProposerKv(uint64(m.Bytes))
	}
	if m.SuggestedAtNanos != 0 {
		n += 1 + sovProposerKv(uint64(m.SuggestedAtNanos))
	}
	return n
}

func (m *SuggestedCompaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovProposerKv(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovProposerKv(uint64(l))
	}
	l = m.Compaction.Size()
	n += 1 + l + sovProposerKv(uint64(l))
	return n
}

func (m *ReplicatedEvalResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != nil {
		l = m.State.Size()
		n += 1 + l + sovProposerKv(uint64(l))
	}
	if m.Split != nil {
		l = m.Split.Size()
		n += 1 + l + sovProposerKv(uint64(l))
	}
	if m.Merge != nil {
		l = m.Merge.Size()
		n += 1 + l + sovProposerKv(uint64(l))
	}
	if m.IsLeaseRequest {
		n += 2
	}
	l = m.WriteTimestamp.Size()
	n += 1 + l + sovProposerKv(uint64(l))
	if m.DeprecatedDelta != nil {
		l = m.DeprecatedDelta.Size()
		n += 1 + l + sovProposerKv(uint64(l))
	}
	if m.ChangeReplicas != nil {
		l = m.ChangeReplicas.Size()
		n += 1 + l + sovProposerKv(uint64(l))
	}
	if m.RaftLogDelta != 0 {
		n += 1 + sovProposerKv(uint64(m.RaftLogDelta))
	}
	if m.AddSSTable != nil {
		l = m.AddSSTable.Size()
		n += 2 + l + sovProposerKv(uint64(l))
	}
	l = m.Delta.Size()
	n += 2 + l + sovProposerKv(uint64(l))
	if m.PrevLeaseProposal != nil {
		l = m.PrevLeaseProposal.Size()
		n += 2 + l + sovProposerKv(uint64(l))
	}
	if m.ComputeChecksum != nil {
		l = m.ComputeChecksum.Size()
		n += 2 + l + sovProposerKv(uint64(l))
	}
	if m.PriorReadSummary != nil {
		l = m.PriorReadSummary.Size()
		n += 2 + l + sovProposerKv(uint64(l))
	}
	if m.IsProbe {
		n += 3
	}
	if m.MVCCHistoryMutation != nil {
		l = m.MVCCHistoryMutation.Size()
		n += 2 + l + sovProposerKv(uint64(l))
	}
	if m.RaftExpectedFirstIndex != 0 {
		n += 2 + sovProposerKv(uint64(m.RaftExpectedFirstIndex))
	}
	return n
}

func (m *ReplicatedEvalResult_MVCCHistoryMutation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Spans) > 0 {
		for _, e := range m.Spans {
			l = e.Size()
			n += 1 + l + sovProposerKv(uint64(l))
		}
	}
	return n
}

func (m *ReplicatedEvalResult_AddSSTable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovProposerKv(uint64(l))
	}
	if m.CRC32 != 0 {
		n += 1 + sovProposerKv(uint64(m.CRC32))
	}
	l = m.Span.Size()
	n += 1 + l + sovProposerKv(uint64(l))
	if m.AtWriteTimestamp {
		n += 2
	}
	return n
}

func (m *WriteBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovProposerKv(uint64(l))
	}
	return n
}

func (m *LogicalOpLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ops) > 0 {
		for _, e := range m.Ops {
			l = e.Size()
			n += 1 + l + sovProposerKv(uint64(l))
		}
	}
	return n
}

func (m *RaftCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxLeaseIndex != 0 {
		n += 1 + sovProposerKv(uint64(m.MaxLeaseIndex))
	}
	if m.DeprecatedProposerLease != nil {
		l = m.DeprecatedProposerLease.Size()
		n += 1 + l + sovProposerKv(uint64(l))
	}
	if m.ProposerLeaseSequence != 0 {
		n += 1 + sovProposerKv(uint64(m.ProposerLeaseSequence))
	}
	l = m.ReplicatedEvalResult.Size()
	n += 1 + l + sovProposerKv(uint64(l))
	if m.WriteBatch != nil {
		l = m.WriteBatch.Size()
		n += 1 + l + sovProposerKv(uint64(l))
	}
	if m.LogicalOpLog != nil {
		l = m.LogicalOpLog.Size()
		n += 1 + l + sovProposerKv(uint64(l))
	}
	if len(m.TraceData) > 0 {
		for k, v := range m.TraceData {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovProposerKv(uint64(len(k))) + 1 + len(v) + sovProposerKv(uint64(len(v)))
			n += mapEntrySize + 2 + sovProposerKv(uint64(mapEntrySize))
		}
	}
	if m.ClosedTimestamp != nil {
		l = m.ClosedTimestamp.Size()
		n += 2 + l + sovProposerKv(uint64(l))
	}
	return n
}

func (m *RaftCommandFooter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxLeaseIndex != 0 {
		n += 1 + sovProposerKv(uint64(m.MaxLeaseIndex))
	}
	l = m.ClosedTimestamp.Size()
	n += 2 + l + sovProposerKv(uint64(l))
	return n
}

func sovProposerKv(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposerKv(x uint64) (n int) {
	return sovProposerKv(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Split) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposerKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Split: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Split: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitTrigger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SplitTrigger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RHSDelta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RHSDelta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposerKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposerKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Merge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposerKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Merge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Merge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergeTrigger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MergeTrigger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposerKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposerKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeReplicas) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposerKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeReplicas: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeReplicas: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeReplicasTrigger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChangeReplicasTrigger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposerKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposerKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ComputeChecksum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposerKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComputeChecksum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComputeChecksum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChecksumID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChecksumID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveSnapshot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SaveSnapshot = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mode", wireType)
			}
			m.Mode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mode |= roachpb.ChecksumMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Checkpoint = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Terminate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Terminate = append(m.Terminate, roachpb.ReplicaDescriptor{})
			if err := m.Terminate[len(m.Terminate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposerKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposerKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Compaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposerKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Compaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Compaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			m.Bytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuggestedAtNanos", wireType)
			}
			m.SuggestedAtNanos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuggestedAtNanos |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposerKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposerKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuggestedCompaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposerKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuggestedCompaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuggestedCompaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Compaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposerKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposerKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicatedEvalResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposerKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicatedEvalResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicatedEvalResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.State == nil {
				m.State = &ReplicaState{}
			}
			if err := m.State.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Split", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Split == nil {
				m.Split = &Split{}
			}
			if err := m.Split.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Merge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Merge == nil {
				m.Merge = &Merge{}
			}
			if err := m.Merge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLeaseRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLeaseRequest = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WriteTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedDelta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeprecatedDelta == nil {
				m.DeprecatedDelta = &enginepb.MVCCStats{}
			}
			if err := m.DeprecatedDelta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChangeReplicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChangeReplicas == nil {
				m.ChangeReplicas = &ChangeReplicas{}
			}
			if err := m.ChangeReplicas.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftLogDelta", wireType)
			}
			m.RaftLogDelta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftLogDelta |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddSSTable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AddSSTable == nil {
				m.AddSSTable = &ReplicatedEvalResult_AddSSTable{}
			}
			if err := m.AddSSTable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevLeaseProposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrevLeaseProposal == nil {
				m.PrevLeaseProposal = &github_com_cockroachdb_cockroach_pkg_util_hlc.ClockTimestamp{}
			}
			if err := m.PrevLeaseProposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ComputeChecksum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ComputeChecksum == nil {
				m.ComputeChecksum = &ComputeChecksum{}
			}
			if err := m.ComputeChecksum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriorReadSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PriorReadSummary == nil {
				m.PriorReadSummary = &rspb.ReadSummary{}
			}
			if err := m.PriorReadSummary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsProbe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsProbe = bool(v != 0)
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MVCCHistoryMutation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MVCCHistoryMutation == nil {
				m.MVCCHistoryMutation = &ReplicatedEvalResult_MVCCHistoryMutation{}
			}
			if err := m.MVCCHistoryMutation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftExpectedFirstIndex", wireType)
			}
			m.RaftExpectedFirstIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftExpectedFirstIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposerKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposerKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicatedEvalResult_MVCCHistoryMutation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposerKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MVCCHistoryMutation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MVCCHistoryMutation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spans = append(m.Spans, roachpb.Span{})
			if err := m.Spans[len(m.Spans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposerKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposerKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplicatedEvalResult_AddSSTable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposerKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddSSTable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddSSTable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CRC32", wireType)
			}
			m.CRC32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CRC32 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtWriteTimestamp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AtWriteTimestamp = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProposerKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposerKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposerKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposerKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposerKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogicalOpLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposerKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogicalOpLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogicalOpLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ops = append(m.Ops, enginepb.MVCCLogicalOp{})
			if err := m.Ops[len(m.Ops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposerKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposerKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposerKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLeaseIndex", wireType)
			}
			m.MaxLeaseIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLeaseIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeprecatedProposerLease", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeprecatedProposerLease == nil {
				m.DeprecatedProposerLease = &roachpb.Lease{}
			}
			if err := m.DeprecatedProposerLease.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposerLeaseSequence", wireType)
			}
			m.ProposerLeaseSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposerLeaseSequence |= github_com_cockroachdb_cockroach_pkg_roachpb.LeaseSequence(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicatedEvalResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReplicatedEvalResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteBatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WriteBatch == nil {
				m.WriteBatch = &WriteBatch{}
			}
			if err := m.WriteBatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogicalOpLog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LogicalOpLog == nil {
				m.LogicalOpLog = &LogicalOpLog{}
			}
			if err := m.LogicalOpLog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TraceData == nil {
				m.TraceData = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProposerKv
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProposerKv
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProposerKv
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthProposerKv
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProposerKv
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthProposerKv
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthProposerKv
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProposerKv(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthProposerKv
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TraceData[mapkey] = mapvalue
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ClosedTimestamp == nil {
				m.ClosedTimestamp = &hlc.Timestamp{}
			}
			if err := m.ClosedTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposerKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposerKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftCommandFooter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposerKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftCommandFooter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftCommandFooter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLeaseIndex", wireType)
			}
			m.MaxLeaseIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLeaseIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosedTimestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposerKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposerKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClosedTimestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposerKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposerKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposerKv(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposerKv
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposerKv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposerKv
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposerKv
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposerKv
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposerKv        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposerKv          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposerKv = fmt.Errorf("proto: unexpected end of group")
)
