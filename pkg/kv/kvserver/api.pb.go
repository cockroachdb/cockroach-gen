// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvserver/api.proto

package kvserver

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	enginepb "github.com/cockroachdb/cockroach/pkg/storage/enginepb"
	github_com_cockroachdb_cockroach_pkg_util_uuid "github.com/cockroachdb/cockroach/pkg/util/uuid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StoreRequestHeader locates a Store on a Node.
type StoreRequestHeader struct {
	NodeID  github_com_cockroachdb_cockroach_pkg_roachpb.NodeID  `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.NodeID" json:"node_id,omitempty"`
	StoreID github_com_cockroachdb_cockroach_pkg_roachpb.StoreID `protobuf:"varint,2,opt,name=store_id,json=storeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.StoreID" json:"store_id,omitempty"`
}

func (m *StoreRequestHeader) Reset()         { *m = StoreRequestHeader{} }
func (m *StoreRequestHeader) String() string { return proto.CompactTextString(m) }
func (*StoreRequestHeader) ProtoMessage()    {}
func (*StoreRequestHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_007069c4a08179bd, []int{0}
}
func (m *StoreRequestHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreRequestHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *StoreRequestHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreRequestHeader.Merge(m, src)
}
func (m *StoreRequestHeader) XXX_Size() int {
	return m.Size()
}
func (m *StoreRequestHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreRequestHeader.DiscardUnknown(m)
}

var xxx_messageInfo_StoreRequestHeader proto.InternalMessageInfo

// A CollectChecksumRequest asks the addressed replica for the result of a
// roachpb.ComputeChecksumRequest.
type CollectChecksumRequest struct {
	StoreRequestHeader `protobuf:"bytes,1,opt,name=header,proto3,embedded=header" json:"header"`
	RangeID            github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,2,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty"`
	// checksum_id identifies the corresponding roachpb.ComputeChecksumRequest.
	ChecksumID github_com_cockroachdb_cockroach_pkg_util_uuid.UUID `protobuf:"bytes,3,opt,name=checksum_id,json=checksumId,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"checksum_id"`
	// If true then the response must include the snapshot of the data from which
	// the checksum is computed.
	WithSnapshot bool `protobuf:"varint,5,opt,name=with_snapshot,json=withSnapshot,proto3" json:"with_snapshot,omitempty"`
}

func (m *CollectChecksumRequest) Reset()         { *m = CollectChecksumRequest{} }
func (m *CollectChecksumRequest) String() string { return proto.CompactTextString(m) }
func (*CollectChecksumRequest) ProtoMessage()    {}
func (*CollectChecksumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_007069c4a08179bd, []int{1}
}
func (m *CollectChecksumRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectChecksumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CollectChecksumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectChecksumRequest.Merge(m, src)
}
func (m *CollectChecksumRequest) XXX_Size() int {
	return m.Size()
}
func (m *CollectChecksumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectChecksumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CollectChecksumRequest proto.InternalMessageInfo

type CollectChecksumResponse struct {
	// The checksum is the sha512 hash of the requested computation. It is empty
	// if the computation failed.
	Checksum []byte `protobuf:"bytes,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// snapshot is set if the with_snapshot in CollectChecksumRequest is true. For
	// example, it can be set by the caller when it has detected an inconsistency.
	//
	// TODO(tschottdorf): with larger ranges, this is no longer tenable.
	// See https://github.com/cockroachdb/cockroach/issues/21128.
	Snapshot *roachpb.RaftSnapshotData `protobuf:"bytes,2,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
	// delta carries the stats of the range minus the recomputed stats.
	Delta enginepb.MVCCStatsDelta `protobuf:"bytes,3,opt,name=delta,proto3" json:"delta"`
	// persisted carries the persisted stats of the replica.
	Persisted enginepb.MVCCStats `protobuf:"bytes,4,opt,name=persisted,proto3" json:"persisted"`
}

func (m *CollectChecksumResponse) Reset()         { *m = CollectChecksumResponse{} }
func (m *CollectChecksumResponse) String() string { return proto.CompactTextString(m) }
func (*CollectChecksumResponse) ProtoMessage()    {}
func (*CollectChecksumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_007069c4a08179bd, []int{2}
}
func (m *CollectChecksumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectChecksumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CollectChecksumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectChecksumResponse.Merge(m, src)
}
func (m *CollectChecksumResponse) XXX_Size() int {
	return m.Size()
}
func (m *CollectChecksumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectChecksumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CollectChecksumResponse proto.InternalMessageInfo

// WaitForApplicationRequest blocks until the addressed replica has applied the
// command with the specified lease index.
type WaitForApplicationRequest struct {
	StoreRequestHeader `protobuf:"bytes,1,opt,name=header,proto3,embedded=header" json:"header"`
	RangeID            github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,2,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty"`
	LeaseIndex         uint64                                               `protobuf:"varint,3,opt,name=lease_index,json=leaseIndex,proto3" json:"lease_index,omitempty"`
}

func (m *WaitForApplicationRequest) Reset()         { *m = WaitForApplicationRequest{} }
func (m *WaitForApplicationRequest) String() string { return proto.CompactTextString(m) }
func (*WaitForApplicationRequest) ProtoMessage()    {}
func (*WaitForApplicationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_007069c4a08179bd, []int{3}
}
func (m *WaitForApplicationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaitForApplicationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WaitForApplicationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForApplicationRequest.Merge(m, src)
}
func (m *WaitForApplicationRequest) XXX_Size() int {
	return m.Size()
}
func (m *WaitForApplicationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForApplicationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForApplicationRequest proto.InternalMessageInfo

type WaitForApplicationResponse struct {
}

func (m *WaitForApplicationResponse) Reset()         { *m = WaitForApplicationResponse{} }
func (m *WaitForApplicationResponse) String() string { return proto.CompactTextString(m) }
func (*WaitForApplicationResponse) ProtoMessage()    {}
func (*WaitForApplicationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_007069c4a08179bd, []int{4}
}
func (m *WaitForApplicationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaitForApplicationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WaitForApplicationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForApplicationResponse.Merge(m, src)
}
func (m *WaitForApplicationResponse) XXX_Size() int {
	return m.Size()
}
func (m *WaitForApplicationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForApplicationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForApplicationResponse proto.InternalMessageInfo

type WaitForReplicaInitRequest struct {
	StoreRequestHeader `protobuf:"bytes,1,opt,name=header,proto3,embedded=header" json:"header"`
	RangeID            github_com_cockroachdb_cockroach_pkg_roachpb.RangeID `protobuf:"varint,2,opt,name=range_id,json=rangeId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.RangeID" json:"range_id,omitempty"`
}

func (m *WaitForReplicaInitRequest) Reset()         { *m = WaitForReplicaInitRequest{} }
func (m *WaitForReplicaInitRequest) String() string { return proto.CompactTextString(m) }
func (*WaitForReplicaInitRequest) ProtoMessage()    {}
func (*WaitForReplicaInitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_007069c4a08179bd, []int{5}
}
func (m *WaitForReplicaInitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaitForReplicaInitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WaitForReplicaInitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForReplicaInitRequest.Merge(m, src)
}
func (m *WaitForReplicaInitRequest) XXX_Size() int {
	return m.Size()
}
func (m *WaitForReplicaInitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForReplicaInitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForReplicaInitRequest proto.InternalMessageInfo

type WaitForReplicaInitResponse struct {
}

func (m *WaitForReplicaInitResponse) Reset()         { *m = WaitForReplicaInitResponse{} }
func (m *WaitForReplicaInitResponse) String() string { return proto.CompactTextString(m) }
func (*WaitForReplicaInitResponse) ProtoMessage()    {}
func (*WaitForReplicaInitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_007069c4a08179bd, []int{6}
}
func (m *WaitForReplicaInitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WaitForReplicaInitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *WaitForReplicaInitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitForReplicaInitResponse.Merge(m, src)
}
func (m *WaitForReplicaInitResponse) XXX_Size() int {
	return m.Size()
}
func (m *WaitForReplicaInitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitForReplicaInitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WaitForReplicaInitResponse proto.InternalMessageInfo

// CompactEngineSpanRequest does a synchronous compaction of the provided
// engine span in the given store.
type CompactEngineSpanRequest struct {
	StoreRequestHeader `protobuf:"bytes,1,opt,name=header,proto3,embedded=header" json:"header"`
	Span               roachpb.Span `protobuf:"bytes,2,opt,name=span,proto3" json:"span"`
}

func (m *CompactEngineSpanRequest) Reset()         { *m = CompactEngineSpanRequest{} }
func (m *CompactEngineSpanRequest) String() string { return proto.CompactTextString(m) }
func (*CompactEngineSpanRequest) ProtoMessage()    {}
func (*CompactEngineSpanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_007069c4a08179bd, []int{7}
}
func (m *CompactEngineSpanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactEngineSpanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CompactEngineSpanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactEngineSpanRequest.Merge(m, src)
}
func (m *CompactEngineSpanRequest) XXX_Size() int {
	return m.Size()
}
func (m *CompactEngineSpanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactEngineSpanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompactEngineSpanRequest proto.InternalMessageInfo

type CompactEngineSpanResponse struct {
}

func (m *CompactEngineSpanResponse) Reset()         { *m = CompactEngineSpanResponse{} }
func (m *CompactEngineSpanResponse) String() string { return proto.CompactTextString(m) }
func (*CompactEngineSpanResponse) ProtoMessage()    {}
func (*CompactEngineSpanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_007069c4a08179bd, []int{8}
}
func (m *CompactEngineSpanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactEngineSpanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CompactEngineSpanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactEngineSpanResponse.Merge(m, src)
}
func (m *CompactEngineSpanResponse) XXX_Size() int {
	return m.Size()
}
func (m *CompactEngineSpanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactEngineSpanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CompactEngineSpanResponse proto.InternalMessageInfo

// CompactionConcurrencyRequest increases the compaction concurrency of the store
// until the request is cancelled.
type CompactionConcurrencyRequest struct {
	StoreRequestHeader    `protobuf:"bytes,1,opt,name=header,proto3,embedded=header" json:"header"`
	CompactionConcurrency uint64 `protobuf:"varint,2,opt,name=compaction_concurrency,json=compactionConcurrency,proto3" json:"compaction_concurrency,omitempty"`
}

func (m *CompactionConcurrencyRequest) Reset()         { *m = CompactionConcurrencyRequest{} }
func (m *CompactionConcurrencyRequest) String() string { return proto.CompactTextString(m) }
func (*CompactionConcurrencyRequest) ProtoMessage()    {}
func (*CompactionConcurrencyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_007069c4a08179bd, []int{9}
}
func (m *CompactionConcurrencyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactionConcurrencyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CompactionConcurrencyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactionConcurrencyRequest.Merge(m, src)
}
func (m *CompactionConcurrencyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CompactionConcurrencyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactionConcurrencyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CompactionConcurrencyRequest proto.InternalMessageInfo

type CompactionConcurrencyResponse struct {
}

func (m *CompactionConcurrencyResponse) Reset()         { *m = CompactionConcurrencyResponse{} }
func (m *CompactionConcurrencyResponse) String() string { return proto.CompactTextString(m) }
func (*CompactionConcurrencyResponse) ProtoMessage()    {}
func (*CompactionConcurrencyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_007069c4a08179bd, []int{10}
}
func (m *CompactionConcurrencyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CompactionConcurrencyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CompactionConcurrencyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompactionConcurrencyResponse.Merge(m, src)
}
func (m *CompactionConcurrencyResponse) XXX_Size() int {
	return m.Size()
}
func (m *CompactionConcurrencyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CompactionConcurrencyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CompactionConcurrencyResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*StoreRequestHeader)(nil), "cockroach.kv.kvserver.StoreRequestHeader")
	proto.RegisterType((*CollectChecksumRequest)(nil), "cockroach.kv.kvserver.CollectChecksumRequest")
	proto.RegisterType((*CollectChecksumResponse)(nil), "cockroach.kv.kvserver.CollectChecksumResponse")
	proto.RegisterType((*WaitForApplicationRequest)(nil), "cockroach.kv.kvserver.WaitForApplicationRequest")
	proto.RegisterType((*WaitForApplicationResponse)(nil), "cockroach.kv.kvserver.WaitForApplicationResponse")
	proto.RegisterType((*WaitForReplicaInitRequest)(nil), "cockroach.kv.kvserver.WaitForReplicaInitRequest")
	proto.RegisterType((*WaitForReplicaInitResponse)(nil), "cockroach.kv.kvserver.WaitForReplicaInitResponse")
	proto.RegisterType((*CompactEngineSpanRequest)(nil), "cockroach.kv.kvserver.CompactEngineSpanRequest")
	proto.RegisterType((*CompactEngineSpanResponse)(nil), "cockroach.kv.kvserver.CompactEngineSpanResponse")
	proto.RegisterType((*CompactionConcurrencyRequest)(nil), "cockroach.kv.kvserver.CompactionConcurrencyRequest")
	proto.RegisterType((*CompactionConcurrencyResponse)(nil), "cockroach.kv.kvserver.CompactionConcurrencyResponse")
}

func init() { proto.RegisterFile("kv/kvserver/api.proto", fileDescriptor_007069c4a08179bd) }

var fileDescriptor_007069c4a08179bd = []byte{
	// 713 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x55, 0xcf, 0x6f, 0x12, 0x41,
	0x18, 0x65, 0x29, 0xbf, 0x1c, 0x6a, 0x62, 0x36, 0xb6, 0xa5, 0xb4, 0xee, 0x36, 0xdb, 0x98, 0xd4,
	0x1e, 0x76, 0x63, 0xab, 0x67, 0x53, 0xc0, 0xc6, 0xd5, 0xe8, 0x61, 0x49, 0x35, 0xe9, 0x41, 0x32,
	0xcc, 0x4c, 0x61, 0x04, 0x66, 0xd6, 0xd9, 0x01, 0xf5, 0x4f, 0xf0, 0xe6, 0xd9, 0xa3, 0x7f, 0x0d,
	0x47, 0x8e, 0x8d, 0x31, 0x44, 0xe9, 0xc9, 0x7f, 0xc1, 0x93, 0xd9, 0x61, 0x16, 0x6a, 0x8a, 0x49,
	0x35, 0xe9, 0xa1, 0xb7, 0xe1, 0xfb, 0xe6, 0xbd, 0xef, 0xbd, 0x37, 0xdf, 0x06, 0xb0, 0xd2, 0x19,
	0x78, 0x9d, 0x41, 0x44, 0xc4, 0x80, 0x08, 0x0f, 0x86, 0xd4, 0x0d, 0x05, 0x97, 0xdc, 0x5c, 0x41,
	0x1c, 0x75, 0x04, 0x87, 0xa8, 0xed, 0x76, 0x06, 0x6e, 0x72, 0xa1, 0x6c, 0xaa, 0x52, 0xd8, 0xf4,
	0x30, 0x94, 0x70, 0x7a, 0xb5, 0xbc, 0x91, 0xd4, 0x28, 0x93, 0x44, 0x30, 0xd8, 0x6d, 0x08, 0x78,
	0x22, 0x93, 0x66, 0x24, 0xb9, 0x80, 0x2d, 0xe2, 0x11, 0xd6, 0xa2, 0x8c, 0x84, 0x4d, 0xaf, 0x37,
	0x40, 0x48, 0x37, 0x37, 0x17, 0x36, 0xf7, 0x75, 0xf7, 0x76, 0x8b, 0xb7, 0xb8, 0x3a, 0x7a, 0xf1,
	0x69, 0x5a, 0x75, 0x46, 0x06, 0x30, 0xeb, 0x92, 0x0b, 0x12, 0x90, 0xb7, 0x7d, 0x12, 0xc9, 0x27,
	0x04, 0x62, 0x22, 0xcc, 0x63, 0x90, 0x67, 0x1c, 0x93, 0x06, 0xc5, 0x25, 0x63, 0xcb, 0xd8, 0xc9,
	0x56, 0x0e, 0x26, 0x63, 0x3b, 0xf7, 0x82, 0x63, 0xe2, 0xd7, 0x7e, 0x8d, 0xed, 0xfd, 0x16, 0x95,
	0xed, 0x7e, 0xd3, 0x45, 0xbc, 0xe7, 0xcd, 0x9c, 0xe1, 0xe6, 0xfc, 0xec, 0x85, 0x9d, 0x96, 0xa7,
	0x8d, 0xb8, 0x53, 0x58, 0x90, 0x8b, 0x19, 0x7d, 0x6c, 0xbe, 0x06, 0x85, 0x58, 0xa8, 0x22, 0x4f,
	0x2b, 0xf2, 0xea, 0x64, 0x6c, 0xe7, 0x95, 0x0a, 0xc5, 0xfe, 0xe0, 0x9f, 0xd8, 0x35, 0x2e, 0xc8,
	0x2b, 0x52, 0x1f, 0x3b, 0xdf, 0xd2, 0x60, 0xb5, 0xca, 0xbb, 0x5d, 0x82, 0x64, 0xb5, 0x4d, 0x50,
	0x27, 0xea, 0xf7, 0xb4, 0x39, 0xf3, 0x19, 0xc8, 0xb5, 0x95, 0x41, 0xe5, 0xaa, 0xb8, 0x77, 0xcf,
	0x5d, 0xf8, 0x2e, 0xee, 0xc5, 0x44, 0x2a, 0x85, 0xe1, 0xd8, 0x4e, 0x8d, 0xc6, 0xb6, 0x11, 0x68,
	0x8a, 0xd8, 0x87, 0x80, 0xac, 0x35, 0xf3, 0xb1, 0x34, 0xf5, 0x11, 0xc4, 0xb5, 0xff, 0xf0, 0xa1,
	0x71, 0x41, 0x5e, 0x91, 0xfa, 0xd8, 0x7c, 0x03, 0x8a, 0x48, 0xeb, 0x8f, 0x47, 0x2c, 0x6d, 0x19,
	0x3b, 0xcb, 0x15, 0x3f, 0x96, 0xf1, 0xf5, 0xb2, 0x2f, 0xd0, 0x97, 0xb4, 0xeb, 0xf5, 0xfb, 0x14,
	0xbb, 0x47, 0x47, 0x7e, 0x6d, 0x32, 0xb6, 0x41, 0x92, 0x88, 0x5f, 0x0b, 0x40, 0xc2, 0xee, 0x63,
	0x73, 0x1b, 0xdc, 0x7c, 0x47, 0x65, 0xbb, 0x11, 0x31, 0x18, 0x46, 0x6d, 0x2e, 0x4b, 0xd9, 0x2d,
	0x63, 0xa7, 0x10, 0x2c, 0xc7, 0xc5, 0xba, 0xae, 0x3d, 0xcd, 0x14, 0x32, 0xb7, 0xb2, 0xce, 0xc7,
	0x34, 0x58, 0xbb, 0x10, 0x6f, 0x14, 0x72, 0x16, 0x11, 0xb3, 0x0c, 0x0a, 0x09, 0xa9, 0x4a, 0x78,
	0x39, 0x98, 0xfd, 0x36, 0x1f, 0x81, 0xc2, 0x8c, 0x3d, 0xad, 0xd2, 0xdf, 0x3e, 0x97, 0xfe, 0x3c,
	0x85, 0x13, 0x99, 0x0c, 0xac, 0x41, 0x09, 0x83, 0x19, 0xc8, 0x3c, 0x04, 0x59, 0x4c, 0xba, 0x12,
	0xaa, 0x24, 0x8a, 0x7b, 0xbb, 0xe7, 0xd0, 0x7a, 0xf1, 0xdd, 0x64, 0xf1, 0xdd, 0xe7, 0x2f, 0xab,
	0xd5, 0xba, 0x84, 0x32, 0xaa, 0xc5, 0x88, 0x4a, 0x26, 0x4e, 0x2d, 0x98, 0xc2, 0x4d, 0x1f, 0xdc,
	0x08, 0x89, 0x88, 0x68, 0x24, 0x09, 0x2e, 0x65, 0x14, 0xd7, 0xdd, 0x4b, 0x71, 0x69, 0x9a, 0x39,
	0xda, 0xf9, 0x69, 0x80, 0xf5, 0x57, 0x90, 0xca, 0x43, 0x2e, 0x0e, 0xc2, 0xb0, 0x4b, 0x11, 0x94,
	0x94, 0xb3, 0x6b, 0xb9, 0x6d, 0x36, 0x28, 0x76, 0x09, 0x8c, 0x48, 0x83, 0x32, 0x4c, 0xde, 0xab,
	0x8c, 0x33, 0x01, 0x50, 0x25, 0x3f, 0xae, 0x38, 0x9b, 0xa0, 0xbc, 0xc8, 0xea, 0xf4, 0xe5, 0x9d,
	0xe1, 0x3c, 0x89, 0x80, 0xa8, 0xb6, 0xcf, 0xa8, 0xbc, 0x8e, 0x49, 0x9c, 0x33, 0xfa, 0x87, 0x13,
	0x6d, 0xf4, 0xb3, 0x01, 0x4a, 0x55, 0xde, 0x0b, 0x21, 0x92, 0x8f, 0xd5, 0x86, 0xd4, 0x43, 0x78,
	0x35, 0x2f, 0x7e, 0x1f, 0x64, 0xa2, 0x10, 0x32, 0xfd, 0xb1, 0xac, 0x2d, 0xf8, 0x58, 0xe2, 0xd1,
	0x7a, 0x29, 0xd5, 0x55, 0x67, 0x03, 0xac, 0x2f, 0xd0, 0xa6, 0x95, 0x7f, 0x31, 0xc0, 0xa6, 0xee,
	0x52, 0xce, 0xaa, 0x9c, 0xa1, 0xbe, 0x10, 0x84, 0xa1, 0x0f, 0x57, 0xa2, 0xfe, 0x21, 0x58, 0x45,
	0xb3, 0x61, 0x0d, 0x34, 0x9f, 0xa6, 0xfc, 0x64, 0x82, 0x15, 0xb4, 0x48, 0x8a, 0x63, 0x83, 0x3b,
	0x7f, 0xd1, 0x38, 0x75, 0x51, 0xd9, 0x1d, 0xfe, 0xb0, 0x52, 0xc3, 0x89, 0x65, 0x8c, 0x26, 0x96,
	0x71, 0x3a, 0xb1, 0x8c, 0xef, 0x13, 0xcb, 0xf8, 0x74, 0x66, 0xa5, 0x46, 0x67, 0x56, 0xea, 0xf4,
	0xcc, 0x4a, 0x1d, 0x17, 0x12, 0xa1, 0xcd, 0x9c, 0xfa, 0x8f, 0xdb, 0xff, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0x26, 0xfa, 0x51, 0xbf, 0x95, 0x07, 0x00, 0x00,
}

func (m *StoreRequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreRequestHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StoreRequestHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StoreID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.StoreID))
		i--
		dAtA[i] = 0x10
	}
	if m.NodeID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CollectChecksumRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectChecksumRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectChecksumRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithSnapshot {
		i--
		if m.WithSnapshot {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.ChecksumID.Size()
		i -= size
		if _, err := m.ChecksumID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.RangeID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RangeID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.StoreRequestHeader.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CollectChecksumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectChecksumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectChecksumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Persisted.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Delta.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Snapshot != nil {
		{
			size, err := m.Snapshot.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WaitForApplicationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitForApplicationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WaitForApplicationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LeaseIndex != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.LeaseIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.RangeID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RangeID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.StoreRequestHeader.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WaitForApplicationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitForApplicationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WaitForApplicationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *WaitForReplicaInitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitForReplicaInitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WaitForReplicaInitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RangeID != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.RangeID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.StoreRequestHeader.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WaitForReplicaInitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WaitForReplicaInitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WaitForReplicaInitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CompactEngineSpanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactEngineSpanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactEngineSpanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.StoreRequestHeader.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CompactEngineSpanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactEngineSpanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactEngineSpanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CompactionConcurrencyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactionConcurrencyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactionConcurrencyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CompactionConcurrency != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.CompactionConcurrency))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.StoreRequestHeader.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintApi(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CompactionConcurrencyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CompactionConcurrencyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CompactionConcurrencyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StoreRequestHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovApi(uint64(m.NodeID))
	}
	if m.StoreID != 0 {
		n += 1 + sovApi(uint64(m.StoreID))
	}
	return n
}

func (m *CollectChecksumRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoreRequestHeader.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.RangeID != 0 {
		n += 1 + sovApi(uint64(m.RangeID))
	}
	l = m.ChecksumID.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.WithSnapshot {
		n += 2
	}
	return n
}

func (m *CollectChecksumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Snapshot != nil {
		l = m.Snapshot.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	l = m.Delta.Size()
	n += 1 + l + sovApi(uint64(l))
	l = m.Persisted.Size()
	n += 1 + l + sovApi(uint64(l))
	return n
}

func (m *WaitForApplicationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoreRequestHeader.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.RangeID != 0 {
		n += 1 + sovApi(uint64(m.RangeID))
	}
	if m.LeaseIndex != 0 {
		n += 1 + sovApi(uint64(m.LeaseIndex))
	}
	return n
}

func (m *WaitForApplicationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *WaitForReplicaInitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoreRequestHeader.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.RangeID != 0 {
		n += 1 + sovApi(uint64(m.RangeID))
	}
	return n
}

func (m *WaitForReplicaInitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CompactEngineSpanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoreRequestHeader.Size()
	n += 1 + l + sovApi(uint64(l))
	l = m.Span.Size()
	n += 1 + l + sovApi(uint64(l))
	return n
}

func (m *CompactEngineSpanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CompactionConcurrencyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StoreRequestHeader.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.CompactionConcurrency != 0 {
		n += 1 + sovApi(uint64(m.CompactionConcurrency))
	}
	return n
}

func (m *CompactionConcurrencyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoreRequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreRequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreRequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= github_com_cockroachdb_cockroach_pkg_roachpb.NodeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreID", wireType)
			}
			m.StoreID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreID |= github_com_cockroachdb_cockroach_pkg_roachpb.StoreID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectChecksumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectChecksumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectChecksumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreRequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoreRequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChecksumID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChecksumID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithSnapshot", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithSnapshot = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectChecksumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectChecksumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectChecksumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = append(m.Checksum[:0], dAtA[iNdEx:postIndex]...)
			if m.Checksum == nil {
				m.Checksum = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Snapshot == nil {
				m.Snapshot = &roachpb.RaftSnapshotData{}
			}
			if err := m.Snapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Persisted", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Persisted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaitForApplicationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitForApplicationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitForApplicationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreRequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoreRequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseIndex", wireType)
			}
			m.LeaseIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaseIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaitForApplicationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitForApplicationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitForApplicationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaitForReplicaInitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitForReplicaInitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitForReplicaInitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreRequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoreRequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RangeID", wireType)
			}
			m.RangeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RangeID |= github_com_cockroachdb_cockroach_pkg_roachpb.RangeID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WaitForReplicaInitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WaitForReplicaInitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WaitForReplicaInitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactEngineSpanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactEngineSpanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactEngineSpanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreRequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoreRequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactEngineSpanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactEngineSpanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactEngineSpanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactionConcurrencyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactionConcurrencyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactionConcurrencyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreRequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StoreRequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompactionConcurrency", wireType)
			}
			m.CompactionConcurrency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompactionConcurrency |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CompactionConcurrencyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CompactionConcurrencyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CompactionConcurrencyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
