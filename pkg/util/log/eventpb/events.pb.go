// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/log/eventpb/events.proto

package eventpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// CommonEventDetails contains the fields common to all events.
type CommonEventDetails struct {
	// The timestamp of the event. Expressed as nanoseconds since
	// the Unix epoch.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:",omitempty"`
	// The type of the event.
	EventType string `protobuf:"bytes,2,opt,name=event_type,json=eventType,proto3" json:",omitempty" redact:"nonsensitive"`
}

func (m *CommonEventDetails) Reset()         { *m = CommonEventDetails{} }
func (m *CommonEventDetails) String() string { return proto.CompactTextString(m) }
func (*CommonEventDetails) ProtoMessage()    {}
func (*CommonEventDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_0362ff6fa5ec298f, []int{0}
}
func (m *CommonEventDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonEventDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *CommonEventDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonEventDetails.Merge(dst, src)
}
func (m *CommonEventDetails) XXX_Size() int {
	return m.Size()
}
func (m *CommonEventDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonEventDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CommonEventDetails proto.InternalMessageInfo

// CommonSQLEventDetails contains the fields common to all
// SQL events.
type CommonSQLEventDetails struct {
	// A normalized copy of the SQL statement that triggered the event.
	Statement string `protobuf:"bytes,1,opt,name=statement,proto3" json:",omitempty"`
	// The statement tag. This is separate from the statement string,
	// since the statement string can contain sensitive information. The
	// tag is guaranteed not to.
	Tag string `protobuf:"bytes,6,opt,name=tag,proto3" json:",omitempty" redact:"nonsensitive"`
	// The user account that triggered the event.
	// The special usernames `root` and `node` are not considered sensitive.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:",omitempty" redact:"safeif:root|node"`
	// The primary object descriptor affected by the operation. Set to zero for operations
	// that don't affect descriptors.
	DescriptorID uint32 `protobuf:"varint,3,opt,name=descriptor_id,json=descriptorId,proto3" json:",omitempty"`
	// The application name for the session where the event was emitted.
	// This is included in the event to ease filtering of logging output
	// by application.
	// Application names starting with a dollar sign (`$`) are not considered sensitive.
	ApplicationName string `protobuf:"bytes,4,opt,name=application_name,json=applicationName,proto3" json:",omitempty" redact:"safeif:\$.*"`
	// The mapping of SQL placeholders to their values, for prepared statements.
	PlaceholderValues []string `protobuf:"bytes,5,rep,name=placeholder_values,json=placeholderValues,proto3" json:",omitempty"`
}

func (m *CommonSQLEventDetails) Reset()         { *m = CommonSQLEventDetails{} }
func (m *CommonSQLEventDetails) String() string { return proto.CompactTextString(m) }
func (*CommonSQLEventDetails) ProtoMessage()    {}
func (*CommonSQLEventDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_0362ff6fa5ec298f, []int{1}
}
func (m *CommonSQLEventDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonSQLEventDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *CommonSQLEventDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonSQLEventDetails.Merge(dst, src)
}
func (m *CommonSQLEventDetails) XXX_Size() int {
	return m.Size()
}
func (m *CommonSQLEventDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonSQLEventDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CommonSQLEventDetails proto.InternalMessageInfo

// CommonJobEventDetails contains the fields common to all job events.
type CommonJobEventDetails struct {
	// The ID of the job that triggered the event.
	JobID int64 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:",omitempty"`
	// The type of the job that triggered the event.
	JobType string `protobuf:"bytes,2,opt,name=job_type,json=jobType,proto3" json:",omitempty" redact:"nonsensitive"`
	// A description of the job that triggered the event. Some jobs populate the
	// description with an approximate representation of the SQL statement run to
	// create the job.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:",omitempty"`
	// The user account that triggered the event.
	User string `protobuf:"bytes,4,opt,name=user,proto3" json:",omitempty"`
	// The object descriptors affected by the job. Set to zero for operations
	// that don't affect descriptors.
	DescriptorIDs []uint32 `protobuf:"varint,5,rep,packed,name=descriptor_ids,json=descriptorIds,proto3" json:",omitempty"`
	// The status of the job that triggered the event. This allows the job to
	// indicate which phase execution it is in when the event is triggered.
	Status string `protobuf:"bytes,6,opt,name=status,proto3" json:",omitempty" redact:"nonsensitive"`
}

func (m *CommonJobEventDetails) Reset()         { *m = CommonJobEventDetails{} }
func (m *CommonJobEventDetails) String() string { return proto.CompactTextString(m) }
func (*CommonJobEventDetails) ProtoMessage()    {}
func (*CommonJobEventDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_events_0362ff6fa5ec298f, []int{2}
}
func (m *CommonJobEventDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonJobEventDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalTo(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (dst *CommonJobEventDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonJobEventDetails.Merge(dst, src)
}
func (m *CommonJobEventDetails) XXX_Size() int {
	return m.Size()
}
func (m *CommonJobEventDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonJobEventDetails.DiscardUnknown(m)
}

var xxx_messageInfo_CommonJobEventDetails proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CommonEventDetails)(nil), "cockroach.util.log.eventpb.CommonEventDetails")
	proto.RegisterType((*CommonSQLEventDetails)(nil), "cockroach.util.log.eventpb.CommonSQLEventDetails")
	proto.RegisterType((*CommonJobEventDetails)(nil), "cockroach.util.log.eventpb.CommonJobEventDetails")
}
func (m *CommonEventDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonEventDetails) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Timestamp))
	}
	if len(m.EventType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.EventType)))
		i += copy(dAtA[i:], m.EventType)
	}
	return i, nil
}

func (m *CommonSQLEventDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonSQLEventDetails) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Statement) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Statement)))
		i += copy(dAtA[i:], m.Statement)
	}
	if len(m.User) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if m.DescriptorID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.DescriptorID))
	}
	if len(m.ApplicationName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ApplicationName)))
		i += copy(dAtA[i:], m.ApplicationName)
	}
	if len(m.PlaceholderValues) > 0 {
		for _, s := range m.PlaceholderValues {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Tag) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Tag)))
		i += copy(dAtA[i:], m.Tag)
	}
	return i, nil
}

func (m *CommonJobEventDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonJobEventDetails) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.JobID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.JobID))
	}
	if len(m.JobType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.JobType)))
		i += copy(dAtA[i:], m.JobType)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.User) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.User)))
		i += copy(dAtA[i:], m.User)
	}
	if len(m.DescriptorIDs) > 0 {
		dAtA2 := make([]byte, len(m.DescriptorIDs)*10)
		var j1 int
		for _, num := range m.DescriptorIDs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	return i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CommonEventDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovEvents(uint64(m.Timestamp))
	}
	l = len(m.EventType)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *CommonSQLEventDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Statement)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.DescriptorID != 0 {
		n += 1 + sovEvents(uint64(m.DescriptorID))
	}
	l = len(m.ApplicationName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.PlaceholderValues) > 0 {
		for _, s := range m.PlaceholderValues {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *CommonJobEventDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.JobID != 0 {
		n += 1 + sovEvents(uint64(m.JobID))
	}
	l = len(m.JobType)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.DescriptorIDs) > 0 {
		l = 0
		for _, e := range m.DescriptorIDs {
			l += sovEvents(uint64(e))
		}
		n += 1 + sovEvents(uint64(l)) + l
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonEventDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonEventDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonEventDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonSQLEventDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonSQLEventDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonSQLEventDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorID", wireType)
			}
			m.DescriptorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DescriptorID |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlaceholderValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlaceholderValues = append(m.PlaceholderValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommonJobEventDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonJobEventDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonJobEventDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobID", wireType)
			}
			m.JobID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DescriptorIDs = append(m.DescriptorIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvents
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DescriptorIDs) == 0 {
					m.DescriptorIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvents
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DescriptorIDs = append(m.DescriptorIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptorIDs", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvents(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("util/log/eventpb/events.proto", fileDescriptor_events_0362ff6fa5ec298f)
}

var fileDescriptor_events_0362ff6fa5ec298f = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x5f, 0x6b, 0xd3, 0x50,
	0x18, 0xc6, 0x9b, 0x75, 0xed, 0xec, 0x71, 0x9d, 0x7a, 0xd8, 0x30, 0x16, 0x4c, 0x4a, 0x10, 0xad,
	0x3a, 0x52, 0xc1, 0x2b, 0x07, 0x32, 0xc8, 0xea, 0xa0, 0x43, 0x84, 0x55, 0xf1, 0x42, 0x84, 0x72,
	0x92, 0xbc, 0xcd, 0x4e, 0x4d, 0xf2, 0x86, 0x9c, 0xd3, 0x42, 0xc1, 0x4f, 0xe0, 0x95, 0x97, 0x7e,
	0xa4, 0x5d, 0xee, 0x72, 0x57, 0x45, 0xd3, 0xbb, 0x5d, 0xfa, 0x09, 0x24, 0x49, 0xdb, 0xf5, 0xcf,
	0x6e, 0xe6, 0x55, 0x5b, 0xfa, 0x7b, 0xc2, 0x8f, 0xe7, 0x79, 0x43, 0x1e, 0x0f, 0x24, 0xf7, 0x9b,
	0x3e, 0x7a, 0x4d, 0x18, 0x42, 0x28, 0x23, 0x3b, 0xff, 0x14, 0x66, 0x14, 0xa3, 0x44, 0x5a, 0x73,
	0xd0, 0xf9, 0x16, 0x23, 0x73, 0xce, 0xcc, 0x14, 0x34, 0x7d, 0xf4, 0xcc, 0x29, 0x58, 0xdb, 0xf5,
	0xd0, 0xc3, 0x0c, 0x6b, 0xa6, 0xdf, 0xf2, 0x44, 0x4d, 0xf7, 0x10, 0x3d, 0x1f, 0x9a, 0xd9, 0x2f,
	0x7b, 0xd0, 0x6b, 0x4a, 0x1e, 0x80, 0x90, 0x2c, 0x88, 0x72, 0xc0, 0xf8, 0xa1, 0x10, 0x7a, 0x84,
	0x41, 0x80, 0xe1, 0xbb, 0xf4, 0x41, 0x2d, 0x90, 0x8c, 0xfb, 0x82, 0xee, 0x93, 0xca, 0x9c, 0x54,
	0x95, 0xba, 0xd2, 0x28, 0x5a, 0x3b, 0x57, 0x63, 0x9d, 0xec, 0x63, 0xc0, 0x25, 0x04, 0x91, 0x1c,
	0x75, 0xae, 0x01, 0x7a, 0x4c, 0x48, 0xa6, 0xd1, 0x95, 0xa3, 0x08, 0xd4, 0x8d, 0xba, 0xd2, 0xa8,
	0x58, 0xcf, 0x96, 0xf1, 0xbf, 0x63, 0x7d, 0x2f, 0x06, 0x97, 0x39, 0xf2, 0xc0, 0x08, 0x31, 0x14,
	0x10, 0x0a, 0x2e, 0xf9, 0x10, 0x8c, 0x4e, 0x25, 0x8b, 0x7e, 0x1a, 0x45, 0x60, 0xfc, 0x2a, 0x92,
	0xbd, 0x5c, 0xe6, 0xe3, 0xe9, 0xfb, 0x55, 0x1f, 0x21, 0x99, 0x84, 0x00, 0x42, 0x99, 0xf9, 0x54,
	0xd6, 0x7d, 0xe6, 0x00, 0x3d, 0x24, 0x9b, 0x03, 0x01, 0xf1, 0xd4, 0xe4, 0xe5, 0x9a, 0xc9, 0xa3,
	0x99, 0x89, 0x60, 0x3d, 0xe0, 0xbd, 0x83, 0x18, 0x51, 0x7e, 0x0f, 0xd1, 0x05, 0xa3, 0x93, 0x05,
	0xe9, 0x11, 0xa9, 0xba, 0x20, 0x9c, 0x98, 0x47, 0x12, 0xe3, 0x2e, 0x77, 0xd5, 0x62, 0x5d, 0x69,
	0x54, 0x2d, 0x2d, 0x19, 0xeb, 0xdb, 0xad, 0xf9, 0x1f, 0xed, 0xd6, 0x8a, 0xc2, 0xf6, 0x75, 0xa8,
	0xed, 0xd2, 0x53, 0x72, 0x9f, 0x45, 0x91, 0xcf, 0x1d, 0x26, 0x39, 0x86, 0xdd, 0x90, 0x05, 0xa0,
	0x6e, 0x66, 0x46, 0x4f, 0xd7, 0x8c, 0x76, 0x57, 0x8c, 0xbe, 0x3e, 0x31, 0x5f, 0x18, 0x9d, 0x7b,
	0x0b, 0xf9, 0x0f, 0x2c, 0x00, 0xfa, 0x96, 0xd0, 0xc8, 0x67, 0x0e, 0x9c, 0xa1, 0xef, 0x42, 0xdc,
	0x1d, 0x32, 0x7f, 0x00, 0x42, 0x2d, 0xd5, 0x8b, 0x37, 0xf4, 0xf1, 0x60, 0x81, 0xfc, 0x9c, 0x81,
	0xf4, 0x0d, 0x29, 0x4a, 0xe6, 0xa9, 0xe5, 0xdb, 0x0d, 0x94, 0x66, 0x8c, 0xab, 0x8d, 0xd9, 0x34,
	0x27, 0x68, 0x2f, 0x4d, 0x63, 0x92, 0x72, 0x1f, 0xed, 0xb4, 0xa4, 0xfc, 0x4e, 0x1e, 0x26, 0x63,
	0xbd, 0x74, 0x82, 0xf6, 0x5a, 0x3b, 0xa5, 0x3e, 0xda, 0x6d, 0x97, 0x5a, 0xe4, 0x4e, 0xca, 0xff,
	0xcf, 0xa9, 0x6c, 0xf5, 0xd1, 0x4e, 0x0f, 0x85, 0xbe, 0x22, 0x77, 0x67, 0x55, 0x73, 0x0c, 0xb3,
	0x75, 0xd6, 0x0b, 0x58, 0x44, 0xa8, 0x31, 0x3d, 0x89, 0xcd, 0x1b, 0xd1, 0x7c, 0xf5, 0x63, 0xb2,
	0xb3, 0xb4, 0x7a, 0xde, 0x6c, 0xd5, 0xd2, 0x93, 0xb1, 0x5e, 0x5d, 0x9c, 0x5d, 0xac, 0xc4, 0xab,
	0x8b, 0xbb, 0x0b, 0x7a, 0x48, 0xca, 0xe9, 0x2d, 0x0e, 0xc4, 0x6d, 0x9b, 0x9e, 0xc6, 0xac, 0xe7,
	0xe7, 0x7f, 0xb4, 0xc2, 0x79, 0xa2, 0x29, 0x17, 0x89, 0xa6, 0x5c, 0x26, 0x9a, 0xf2, 0x3b, 0xd1,
	0x94, 0x9f, 0x13, 0xad, 0x70, 0x31, 0xd1, 0x0a, 0x97, 0x13, 0xad, 0xf0, 0x65, 0x6b, 0xfa, 0xda,
	0xdb, 0xe5, 0xec, 0x35, 0x7e, 0xfd, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x4e, 0x67, 0xd1, 0x3a,
	0x04, 0x00, 0x00,
}
