// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/log/eventpb/role_events.proto

package eventpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// CreateRole is recorded when a role is created.
type CreateRole struct {
	CommonEventDetails    `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonSQLEventDetails `protobuf:"bytes,2,opt,name=sql,proto3,embedded=sql" json:""`
	// The name of the new user/role.
	RoleName string `protobuf:"bytes,3,opt,name=role_name,json=roleName,proto3" json:",omitempty"`
}

func (m *CreateRole) Reset()         { *m = CreateRole{} }
func (m *CreateRole) String() string { return proto.CompactTextString(m) }
func (*CreateRole) ProtoMessage()    {}
func (*CreateRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_c59c881513e36619, []int{0}
}
func (m *CreateRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *CreateRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRole.Merge(m, src)
}
func (m *CreateRole) XXX_Size() int {
	return m.Size()
}
func (m *CreateRole) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRole.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRole proto.InternalMessageInfo

// DropRole is recorded when a role is dropped.
type DropRole struct {
	CommonEventDetails    `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonSQLEventDetails `protobuf:"bytes,2,opt,name=sql,proto3,embedded=sql" json:""`
	// The name of the affected user/role.
	RoleName string `protobuf:"bytes,3,opt,name=role_name,json=roleName,proto3" json:",omitempty"`
}

func (m *DropRole) Reset()         { *m = DropRole{} }
func (m *DropRole) String() string { return proto.CompactTextString(m) }
func (*DropRole) ProtoMessage()    {}
func (*DropRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_c59c881513e36619, []int{1}
}
func (m *DropRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DropRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DropRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropRole.Merge(m, src)
}
func (m *DropRole) XXX_Size() int {
	return m.Size()
}
func (m *DropRole) XXX_DiscardUnknown() {
	xxx_messageInfo_DropRole.DiscardUnknown(m)
}

var xxx_messageInfo_DropRole proto.InternalMessageInfo

// AlterRole is recorded when a role is altered.
type AlterRole struct {
	CommonEventDetails    `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	CommonSQLEventDetails `protobuf:"bytes,2,opt,name=sql,proto3,embedded=sql" json:""`
	// The name of the affected user/role.
	RoleName string `protobuf:"bytes,3,opt,name=role_name,json=roleName,proto3" json:",omitempty"`
	// The options set on the user/role.
	Options []string `protobuf:"bytes,4,rep,name=options,proto3" json:",omitempty" redact:"nonsensitive"`
}

func (m *AlterRole) Reset()         { *m = AlterRole{} }
func (m *AlterRole) String() string { return proto.CompactTextString(m) }
func (*AlterRole) ProtoMessage()    {}
func (*AlterRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_c59c881513e36619, []int{2}
}
func (m *AlterRole) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlterRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AlterRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlterRole.Merge(m, src)
}
func (m *AlterRole) XXX_Size() int {
	return m.Size()
}
func (m *AlterRole) XXX_DiscardUnknown() {
	xxx_messageInfo_AlterRole.DiscardUnknown(m)
}

var xxx_messageInfo_AlterRole proto.InternalMessageInfo

// PasswordHashConverted is recorded when the password credentials
// are automatically converted server-side.
type PasswordHashConverted struct {
	CommonEventDetails `protobuf:"bytes,1,opt,name=common,proto3,embedded=common" json:""`
	// The name of the user/role whose credentials have been converted.
	RoleName string `protobuf:"bytes,3,opt,name=role_name,json=roleName,proto3" json:",omitempty"`
	// The previous hash method.
	OldMethod string `protobuf:"bytes,4,opt,name=old_method,json=oldMethod,proto3" json:",omitempty" redact:"nonsensitive"`
	// The new hash method.
	NewMethod string `protobuf:"bytes,5,opt,name=new_method,json=newMethod,proto3" json:",omitempty" redact:"nonsensitive"`
}

func (m *PasswordHashConverted) Reset()         { *m = PasswordHashConverted{} }
func (m *PasswordHashConverted) String() string { return proto.CompactTextString(m) }
func (*PasswordHashConverted) ProtoMessage()    {}
func (*PasswordHashConverted) Descriptor() ([]byte, []int) {
	return fileDescriptor_c59c881513e36619, []int{3}
}
func (m *PasswordHashConverted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PasswordHashConverted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *PasswordHashConverted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PasswordHashConverted.Merge(m, src)
}
func (m *PasswordHashConverted) XXX_Size() int {
	return m.Size()
}
func (m *PasswordHashConverted) XXX_DiscardUnknown() {
	xxx_messageInfo_PasswordHashConverted.DiscardUnknown(m)
}

var xxx_messageInfo_PasswordHashConverted proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CreateRole)(nil), "cockroach.util.log.eventpb.CreateRole")
	proto.RegisterType((*DropRole)(nil), "cockroach.util.log.eventpb.DropRole")
	proto.RegisterType((*AlterRole)(nil), "cockroach.util.log.eventpb.AlterRole")
	proto.RegisterType((*PasswordHashConverted)(nil), "cockroach.util.log.eventpb.PasswordHashConverted")
}

func init() {
	proto.RegisterFile("util/log/eventpb/role_events.proto", fileDescriptor_c59c881513e36619)
}

var fileDescriptor_c59c881513e36619 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x94, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x7d, 0x49, 0x69, 0xeb, 0x03, 0x31, 0x58, 0x54, 0xb2, 0x22, 0x71, 0x8e, 0xbc, 0x10,
	0x04, 0xb2, 0x05, 0x6c, 0x6c, 0x75, 0x0a, 0x62, 0x00, 0x44, 0x0d, 0x13, 0x4b, 0x75, 0xb5, 0x5f,
	0x39, 0x16, 0xe7, 0x7b, 0xcd, 0xdd, 0x91, 0x88, 0x6f, 0xc1, 0x87, 0x60, 0xe2, 0x93, 0x64, 0xcc,
	0xd8, 0xc9, 0x2a, 0xce, 0xd6, 0x91, 0x4f, 0x80, 0x7c, 0x49, 0x24, 0x10, 0xe2, 0x4f, 0x06, 0x96,
	0x6c, 0x7e, 0xa5, 0xdf, 0xf3, 0xb3, 0x9e, 0x67, 0x38, 0x1a, 0x7e, 0x30, 0xa5, 0x88, 0x05, 0x16,
	0x31, 0x4c, 0x41, 0x9a, 0xfa, 0x3c, 0x56, 0x28, 0xe0, 0xcc, 0x1e, 0x3a, 0xaa, 0x15, 0x1a, 0xf4,
	0x06, 0x19, 0x66, 0xef, 0x14, 0xf2, 0x6c, 0x12, 0x75, 0x74, 0x24, 0xb0, 0x88, 0xd6, 0xf4, 0xe0,
	0x56, 0x81, 0x05, 0x5a, 0x2c, 0xee, 0xbe, 0x56, 0x89, 0xc1, 0xed, 0x5f, 0xac, 0x3f, 0x0a, 0xc3,
	0x96, 0x50, 0x3a, 0x56, 0xc0, 0x0d, 0xa4, 0x28, 0xc0, 0x7b, 0x43, 0xf7, 0x33, 0xac, 0x2a, 0x94,
	0x3e, 0x19, 0x92, 0xd1, 0xf5, 0x87, 0x51, 0xf4, 0xfb, 0x1f, 0x46, 0x63, 0x4b, 0x3e, 0xe9, 0xae,
	0x13, 0x30, 0xbc, 0x14, 0x3a, 0xb9, 0x31, 0x6f, 0x02, 0x67, 0xd1, 0x04, 0xe4, 0xaa, 0x09, 0x9c,
	0x74, 0xed, 0xf2, 0x4e, 0x69, 0x5f, 0xbf, 0x17, 0x7e, 0xcf, 0x2a, 0x1f, 0xfc, 0x5d, 0xf9, 0xfa,
	0xf4, 0xf9, 0x1f, 0xac, 0x9d, 0xcb, 0xbb, 0x47, 0x5d, 0xbb, 0x8e, 0xe4, 0x15, 0xf8, 0xfd, 0x21,
	0x19, 0xb9, 0xc9, 0xcd, 0xab, 0x26, 0xa0, 0xf7, 0xb1, 0x2a, 0x0d, 0x54, 0xb5, 0xf9, 0x98, 0x1e,
	0x76, 0xc0, 0x4b, 0x5e, 0x41, 0x78, 0x49, 0xe8, 0xe1, 0x89, 0xc2, 0x7a, 0x87, 0x2b, 0x7e, 0xee,
	0x51, 0xf7, 0x58, 0x18, 0x50, 0xbb, 0xdb, 0xd1, 0x3b, 0xa6, 0x07, 0x58, 0x9b, 0x12, 0xa5, 0xf6,
	0xf7, 0x86, 0xfd, 0x91, 0x9b, 0xdc, 0xf9, 0x19, 0xfd, 0xd6, 0x04, 0x47, 0x0a, 0x72, 0x9e, 0x99,
	0xc7, 0xa1, 0x44, 0xa9, 0x41, 0xea, 0xd2, 0x94, 0x53, 0x08, 0xd3, 0x4d, 0x2e, 0xfc, 0xd2, 0xa3,
	0x47, 0xaf, 0xb8, 0xd6, 0x33, 0x54, 0xf9, 0x33, 0xae, 0x27, 0x63, 0x94, 0x53, 0x50, 0x06, 0xf2,
	0xff, 0x34, 0xd9, 0x56, 0xfd, 0x9e, 0x52, 0x8a, 0x22, 0x3f, 0xab, 0xc0, 0x4c, 0x30, 0xf7, 0xf7,
	0x2c, 0xfd, 0xcf, 0x15, 0x5d, 0x14, 0xf9, 0x0b, 0x9b, 0xec, 0x3c, 0x12, 0x66, 0x1b, 0xcf, 0xb5,
	0x2d, 0x3d, 0x12, 0x66, 0x2b, 0x4f, 0x72, 0x77, 0xfe, 0x95, 0x39, 0xf3, 0x96, 0x91, 0x45, 0xcb,
	0xc8, 0x45, 0xcb, 0xc8, 0x65, 0xcb, 0xc8, 0xa7, 0x25, 0x73, 0x16, 0x4b, 0xe6, 0x5c, 0x2c, 0x99,
	0xf3, 0xf6, 0x60, 0x3d, 0xc8, 0xf9, 0xbe, 0x7d, 0x4d, 0x1e, 0x7d, 0x0f, 0x00, 0x00, 0xff, 0xff,
	0xeb, 0xc3, 0xba, 0xd9, 0xc4, 0x04, 0x00, 0x00,
}

func (m *CreateRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleName) > 0 {
		i -= len(m.RoleName)
		copy(dAtA[i:], m.RoleName)
		i = encodeVarintRoleEvents(dAtA, i, uint64(len(m.RoleName)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.CommonSQLEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRoleEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRoleEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DropRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DropRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleName) > 0 {
		i -= len(m.RoleName)
		copy(dAtA[i:], m.RoleName)
		i = encodeVarintRoleEvents(dAtA, i, uint64(len(m.RoleName)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.CommonSQLEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRoleEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRoleEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AlterRole) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlterRole) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlterRole) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Options[iNdEx])
			copy(dAtA[i:], m.Options[iNdEx])
			i = encodeVarintRoleEvents(dAtA, i, uint64(len(m.Options[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RoleName) > 0 {
		i -= len(m.RoleName)
		copy(dAtA[i:], m.RoleName)
		i = encodeVarintRoleEvents(dAtA, i, uint64(len(m.RoleName)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.CommonSQLEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRoleEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRoleEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PasswordHashConverted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PasswordHashConverted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PasswordHashConverted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewMethod) > 0 {
		i -= len(m.NewMethod)
		copy(dAtA[i:], m.NewMethod)
		i = encodeVarintRoleEvents(dAtA, i, uint64(len(m.NewMethod)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OldMethod) > 0 {
		i -= len(m.OldMethod)
		copy(dAtA[i:], m.OldMethod)
		i = encodeVarintRoleEvents(dAtA, i, uint64(len(m.OldMethod)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RoleName) > 0 {
		i -= len(m.RoleName)
		copy(dAtA[i:], m.RoleName)
		i = encodeVarintRoleEvents(dAtA, i, uint64(len(m.RoleName)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.CommonEventDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRoleEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintRoleEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovRoleEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovRoleEvents(uint64(l))
	l = m.CommonSQLEventDetails.Size()
	n += 1 + l + sovRoleEvents(uint64(l))
	l = len(m.RoleName)
	if l > 0 {
		n += 1 + l + sovRoleEvents(uint64(l))
	}
	return n
}

func (m *DropRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovRoleEvents(uint64(l))
	l = m.CommonSQLEventDetails.Size()
	n += 1 + l + sovRoleEvents(uint64(l))
	l = len(m.RoleName)
	if l > 0 {
		n += 1 + l + sovRoleEvents(uint64(l))
	}
	return n
}

func (m *AlterRole) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovRoleEvents(uint64(l))
	l = m.CommonSQLEventDetails.Size()
	n += 1 + l + sovRoleEvents(uint64(l))
	l = len(m.RoleName)
	if l > 0 {
		n += 1 + l + sovRoleEvents(uint64(l))
	}
	if len(m.Options) > 0 {
		for _, s := range m.Options {
			l = len(s)
			n += 1 + l + sovRoleEvents(uint64(l))
		}
	}
	return n
}

func (m *PasswordHashConverted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommonEventDetails.Size()
	n += 1 + l + sovRoleEvents(uint64(l))
	l = len(m.RoleName)
	if l > 0 {
		n += 1 + l + sovRoleEvents(uint64(l))
	}
	l = len(m.OldMethod)
	if l > 0 {
		n += 1 + l + sovRoleEvents(uint64(l))
	}
	l = len(m.NewMethod)
	if l > 0 {
		n += 1 + l + sovRoleEvents(uint64(l))
	}
	return n
}

func sovRoleEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRoleEvents(x uint64) (n int) {
	return sovRoleEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoleEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoleEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSQLEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoleEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSQLEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoleEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoleEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoleEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoleEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSQLEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoleEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSQLEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoleEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoleEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlterRole) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoleEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlterRole: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlterRole: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoleEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonSQLEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoleEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonSQLEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoleEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoleEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoleEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PasswordHashConverted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoleEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PasswordHashConverted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PasswordHashConverted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommonEventDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoleEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommonEventDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoleEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoleEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoleEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoleEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoleEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRoleEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoleEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoleEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoleEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoleEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRoleEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRoleEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRoleEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRoleEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoleEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRoleEvents = fmt.Errorf("proto: unexpected end of group")
)
