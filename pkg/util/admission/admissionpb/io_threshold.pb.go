// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: util/admission/admissionpb/io_threshold.proto

package admissionpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// IOThreshold wraps the raw signals that IO admission control utilizes to determine
// when to introduce queueing.
type IOThreshold struct {
	L0NumSubLevels          int64 `protobuf:"varint,1,opt,name=l0_num_sub_levels,json=l0NumSubLevels,proto3" json:"l0_num_sub_levels,omitempty"`
	L0NumSubLevelsThreshold int64 `protobuf:"varint,2,opt,name=l0_num_sub_levels_threshold,json=l0NumSubLevelsThreshold,proto3" json:"l0_num_sub_levels_threshold,omitempty"`
	L0NumFiles              int64 `protobuf:"varint,3,opt,name=l0_num_files,json=l0NumFiles,proto3" json:"l0_num_files,omitempty"`
	L0NumFilesThreshold     int64 `protobuf:"varint,4,opt,name=l0_num_files_threshold,json=l0NumFilesThreshold,proto3" json:"l0_num_files_threshold,omitempty"`
}

func (m *IOThreshold) Reset()      { *m = IOThreshold{} }
func (*IOThreshold) ProtoMessage() {}
func (*IOThreshold) Descriptor() ([]byte, []int) {
	return fileDescriptor_7687b2e0083e310d, []int{0}
}
func (m *IOThreshold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IOThreshold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IOThreshold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IOThreshold.Merge(m, src)
}
func (m *IOThreshold) XXX_Size() int {
	return m.Size()
}
func (m *IOThreshold) XXX_DiscardUnknown() {
	xxx_messageInfo_IOThreshold.DiscardUnknown(m)
}

var xxx_messageInfo_IOThreshold proto.InternalMessageInfo

func init() {
	proto.RegisterType((*IOThreshold)(nil), "cockroach.util.admission.admissionpb.IOThreshold")
}

func init() {
	proto.RegisterFile("util/admission/admissionpb/io_threshold.proto", fileDescriptor_7687b2e0083e310d)
}

var fileDescriptor_7687b2e0083e310d = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2d, 0x2d, 0xc9, 0xcc,
	0xd1, 0x4f, 0x4c, 0xc9, 0xcd, 0x2c, 0x2e, 0xce, 0xcc, 0xcf, 0x43, 0xb0, 0x0a, 0x92, 0xf4, 0x33,
	0xf3, 0xe3, 0x4b, 0x32, 0x8a, 0x52, 0x8b, 0x33, 0xf2, 0x73, 0x52, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b,
	0xf2, 0x85, 0x54, 0x92, 0xf3, 0x93, 0xb3, 0x8b, 0xf2, 0x13, 0x93, 0x33, 0xf4, 0x40, 0x1a, 0xf5,
	0xe0, 0xca, 0xf5, 0x90, 0x34, 0x4a, 0x89, 0xa4, 0xe7, 0xa7, 0xe7, 0x83, 0x35, 0xe8, 0x83, 0x58,
	0x10, 0xbd, 0x4a, 0x97, 0x19, 0xb9, 0xb8, 0x3d, 0xfd, 0x43, 0x60, 0x26, 0x0a, 0x69, 0x72, 0x09,
	0xe6, 0x18, 0xc4, 0xe7, 0x95, 0xe6, 0xc6, 0x17, 0x97, 0x26, 0xc5, 0xe7, 0xa4, 0x96, 0xa5, 0xe6,
	0x14, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0xf1, 0xe5, 0x18, 0xf8, 0x95, 0xe6, 0x06, 0x97,
	0x26, 0xf9, 0x80, 0x45, 0x85, 0x6c, 0xb8, 0xa4, 0x31, 0x94, 0x22, 0xdc, 0x26, 0xc1, 0x04, 0xd6,
	0x24, 0x8e, 0xaa, 0x09, 0x61, 0x91, 0x02, 0x17, 0x0f, 0x54, 0x77, 0x5a, 0x66, 0x4e, 0x6a, 0xb1,
	0x04, 0x33, 0x58, 0x39, 0x17, 0x58, 0xb9, 0x1b, 0x48, 0x44, 0xc8, 0x98, 0x4b, 0x0c, 0x59, 0x05,
	0x92, 0xd1, 0x2c, 0x60, 0xb5, 0xc2, 0x08, 0xb5, 0x70, 0x63, 0xad, 0x58, 0x66, 0x2c, 0x90, 0x67,
	0x70, 0xd2, 0x3d, 0xf1, 0x50, 0x8e, 0xe1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x6f,
	0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18,
	0x6e, 0x3c, 0x96, 0x63, 0x88, 0xe2, 0x46, 0x0a, 0x9a, 0x24, 0x36, 0x70, 0x58, 0x18, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x4c, 0x36, 0x19, 0x26, 0x78, 0x01, 0x00, 0x00,
}

func (m *IOThreshold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IOThreshold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IOThreshold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.L0NumFilesThreshold != 0 {
		i = encodeVarintIoThreshold(dAtA, i, uint64(m.L0NumFilesThreshold))
		i--
		dAtA[i] = 0x20
	}
	if m.L0NumFiles != 0 {
		i = encodeVarintIoThreshold(dAtA, i, uint64(m.L0NumFiles))
		i--
		dAtA[i] = 0x18
	}
	if m.L0NumSubLevelsThreshold != 0 {
		i = encodeVarintIoThreshold(dAtA, i, uint64(m.L0NumSubLevelsThreshold))
		i--
		dAtA[i] = 0x10
	}
	if m.L0NumSubLevels != 0 {
		i = encodeVarintIoThreshold(dAtA, i, uint64(m.L0NumSubLevels))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIoThreshold(dAtA []byte, offset int, v uint64) int {
	offset -= sovIoThreshold(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IOThreshold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.L0NumSubLevels != 0 {
		n += 1 + sovIoThreshold(uint64(m.L0NumSubLevels))
	}
	if m.L0NumSubLevelsThreshold != 0 {
		n += 1 + sovIoThreshold(uint64(m.L0NumSubLevelsThreshold))
	}
	if m.L0NumFiles != 0 {
		n += 1 + sovIoThreshold(uint64(m.L0NumFiles))
	}
	if m.L0NumFilesThreshold != 0 {
		n += 1 + sovIoThreshold(uint64(m.L0NumFilesThreshold))
	}
	return n
}

func sovIoThreshold(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIoThreshold(x uint64) (n int) {
	return sovIoThreshold(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IOThreshold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIoThreshold
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IOThreshold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IOThreshold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L0NumSubLevels", wireType)
			}
			m.L0NumSubLevels = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoThreshold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L0NumSubLevels |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L0NumSubLevelsThreshold", wireType)
			}
			m.L0NumSubLevelsThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoThreshold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L0NumSubLevelsThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L0NumFiles", wireType)
			}
			m.L0NumFiles = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoThreshold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L0NumFiles |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field L0NumFilesThreshold", wireType)
			}
			m.L0NumFilesThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIoThreshold
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.L0NumFilesThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIoThreshold(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIoThreshold
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIoThreshold(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIoThreshold
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIoThreshold
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIoThreshold
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIoThreshold
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIoThreshold
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIoThreshold
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIoThreshold        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIoThreshold          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIoThreshold = fmt.Errorf("proto: unexpected end of group")
)
