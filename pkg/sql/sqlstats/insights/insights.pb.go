// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/sqlstats/insights/insights.proto

package insights

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	github_com_cockroachdb_cockroach_pkg_sql_clusterunique "github.com/cockroachdb/cockroach/pkg/sql/clusterunique"
	github_com_cockroachdb_cockroach_pkg_util_uuid "github.com/cockroachdb/cockroach/pkg/util/uuid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Problem int32

const (
	// This statement execution was not itself problematic, but it happened in
	// the same transaction as another problematic statement.
	Problem_None Problem = 0
	// This statement execution was slow, either above a fixed latency threshold
	// or detected as an anomaly.
	Problem_SlowExecution Problem = 1
	// This statement execution failed completely, due to contention, resource
	// saturation, or syntax errors.
	Problem_FailedExecution Problem = 2
)

var Problem_name = map[int32]string{
	0: "None",
	1: "SlowExecution",
	2: "FailedExecution",
}

var Problem_value = map[string]int32{
	"None":            0,
	"SlowExecution":   1,
	"FailedExecution": 2,
}

func (x Problem) String() string {
	return proto.EnumName(Problem_name, int32(x))
}

func (Problem) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1905fa99396732c4, []int{0}
}

type Cause int32

const (
	// We have not identified specific reasons why this statement was slow.
	// We will not explicitly use this zero value; it is here defensively.
	Cause_Unset Cause = 0
	// This statement was slow because we picked the wrong plan, possibly due to
	// outdated statistics, the statement using different literals or search
	// conditions, or a change in the database schema.
	Cause_PlanRegression Cause = 1
	// This statement was slow because a good plan was not available, whether
	// due to outdated statistics or missing indexes.
	Cause_SuboptimalPlan Cause = 2
	// This statement was slow because of contention.
	Cause_HighContention Cause = 3
	// This statement was slow because of being retried multiple times, again due
	// to contention. The "high" threshold may be configured by the
	// `sql.insights.high_retry_count.threshold` cluster setting.
	Cause_HighRetryCount Cause = 4
)

var Cause_name = map[int32]string{
	0: "Unset",
	1: "PlanRegression",
	2: "SuboptimalPlan",
	3: "HighContention",
	4: "HighRetryCount",
}

var Cause_value = map[string]int32{
	"Unset":          0,
	"PlanRegression": 1,
	"SuboptimalPlan": 2,
	"HighContention": 3,
	"HighRetryCount": 4,
}

func (x Cause) String() string {
	return proto.EnumName(Cause_name, int32(x))
}

func (Cause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1905fa99396732c4, []int{1}
}

type Statement_Status int32

const (
	Statement_Completed Statement_Status = 0
	Statement_Failed    Statement_Status = 1
)

var Statement_Status_name = map[int32]string{
	0: "Completed",
	1: "Failed",
}

var Statement_Status_value = map[string]int32{
	"Completed": 0,
	"Failed":    1,
}

func (x Statement_Status) String() string {
	return proto.EnumName(Statement_Status_name, int32(x))
}

func (Statement_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1905fa99396732c4, []int{2, 0}
}

type Session struct {
	ID github_com_cockroachdb_cockroach_pkg_sql_clusterunique.ID `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/cockroachdb/cockroach/pkg/sql/clusterunique.ID" json:"id"`
}

func (m *Session) Reset()         { *m = Session{} }
func (m *Session) String() string { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()    {}
func (*Session) Descriptor() ([]byte, []int) {
	return fileDescriptor_1905fa99396732c4, []int{0}
}
func (m *Session) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Session) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Session) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Session.Merge(m, src)
}
func (m *Session) XXX_Size() int {
	return m.Size()
}
func (m *Session) XXX_DiscardUnknown() {
	xxx_messageInfo_Session.DiscardUnknown(m)
}

var xxx_messageInfo_Session proto.InternalMessageInfo

type Transaction struct {
	ID            github_com_cockroachdb_cockroach_pkg_util_uuid.UUID                   `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"id"`
	FingerprintID github_com_cockroachdb_cockroach_pkg_roachpb.TransactionFingerprintID `protobuf:"varint,2,opt,name=fingerprint_id,json=fingerprintId,proto3,customtype=github.com/cockroachdb/cockroach/pkg/roachpb.TransactionFingerprintID" json:"fingerprint_id"`
	UserPriority  string                                                                `protobuf:"bytes,3,opt,name=user_priority,json=userPriority,proto3" json:"user_priority,omitempty"`
	ImplicitTxn   bool                                                                  `protobuf:"varint,4,opt,name=implicit_txn,json=implicitTxn,proto3" json:"implicit_txn,omitempty"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_1905fa99396732c4, []int{1}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

type Statement struct {
	ID               github_com_cockroachdb_cockroach_pkg_sql_clusterunique.ID      `protobuf:"bytes,1,opt,name=id,proto3,customtype=github.com/cockroachdb/cockroach/pkg/sql/clusterunique.ID" json:"id"`
	FingerprintID    github_com_cockroachdb_cockroach_pkg_roachpb.StmtFingerprintID `protobuf:"varint,2,opt,name=fingerprint_id,json=fingerprintId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.StmtFingerprintID" json:"fingerprint_id,omitempty"`
	LatencyInSeconds float64                                                        `protobuf:"fixed64,3,opt,name=latency_in_seconds,json=latencyInSeconds,proto3" json:"latency_in_seconds,omitempty"`
	Query            string                                                         `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Status           Statement_Status                                               `protobuf:"varint,5,opt,name=status,proto3,enum=cockroach.sql.insights.Statement_Status" json:"status,omitempty"`
	StartTime        time.Time                                                      `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	EndTime          time.Time                                                      `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	FullScan         bool                                                           `protobuf:"varint,8,opt,name=full_scan,json=fullScan,proto3" json:"full_scan,omitempty"`
	User             string                                                         `protobuf:"bytes,9,opt,name=user,proto3" json:"user,omitempty"`
	ApplicationName  string                                                         `protobuf:"bytes,10,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	Database         string                                                         `protobuf:"bytes,11,opt,name=database,proto3" json:"database,omitempty"`
	PlanGist         string                                                         `protobuf:"bytes,12,opt,name=plan_gist,json=planGist,proto3" json:"plan_gist,omitempty"`
	RowsRead         int64                                                          `protobuf:"varint,13,opt,name=rows_read,json=rowsRead,proto3" json:"rows_read,omitempty"`
	RowsWritten      int64                                                          `protobuf:"varint,14,opt,name=rows_written,json=rowsWritten,proto3" json:"rows_written,omitempty"`
	Retries          int64                                                          `protobuf:"varint,15,opt,name=retries,proto3" json:"retries,omitempty"`
	AutoRetryReason  string                                                         `protobuf:"bytes,16,opt,name=auto_retry_reason,json=autoRetryReason,proto3" json:"auto_retry_reason,omitempty"`
	// Nodes is the ordered list of nodes ids on which the statement was executed.
	Nodes                []int64        `protobuf:"varint,17,rep,packed,name=nodes,proto3" json:"nodes,omitempty"`
	Contention           *time.Duration `protobuf:"bytes,18,opt,name=contention,proto3,stdduration" json:"contention,omitempty"`
	IndexRecommendations []string       `protobuf:"bytes,19,rep,name=index_recommendations,json=indexRecommendations,proto3" json:"index_recommendations,omitempty"`
}

func (m *Statement) Reset()         { *m = Statement{} }
func (m *Statement) String() string { return proto.CompactTextString(m) }
func (*Statement) ProtoMessage()    {}
func (*Statement) Descriptor() ([]byte, []int) {
	return fileDescriptor_1905fa99396732c4, []int{2}
}
func (m *Statement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Statement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Statement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Statement.Merge(m, src)
}
func (m *Statement) XXX_Size() int {
	return m.Size()
}
func (m *Statement) XXX_DiscardUnknown() {
	xxx_messageInfo_Statement.DiscardUnknown(m)
}

var xxx_messageInfo_Statement proto.InternalMessageInfo

type Insight struct {
	Session     *Session     `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Transaction *Transaction `protobuf:"bytes,2,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Statement   *Statement   `protobuf:"bytes,3,opt,name=statement,proto3" json:"statement,omitempty"`
	Problem     Problem      `protobuf:"varint,4,opt,name=problem,proto3,enum=cockroach.sql.insights.Problem" json:"problem,omitempty"`
	Causes      []Cause      `protobuf:"varint,5,rep,packed,name=causes,proto3,enum=cockroach.sql.insights.Cause" json:"causes,omitempty"`
}

func (m *Insight) Reset()         { *m = Insight{} }
func (m *Insight) String() string { return proto.CompactTextString(m) }
func (*Insight) ProtoMessage()    {}
func (*Insight) Descriptor() ([]byte, []int) {
	return fileDescriptor_1905fa99396732c4, []int{3}
}
func (m *Insight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Insight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Insight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Insight.Merge(m, src)
}
func (m *Insight) XXX_Size() int {
	return m.Size()
}
func (m *Insight) XXX_DiscardUnknown() {
	xxx_messageInfo_Insight.DiscardUnknown(m)
}

var xxx_messageInfo_Insight proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.sql.insights.Problem", Problem_name, Problem_value)
	proto.RegisterEnum("cockroach.sql.insights.Cause", Cause_name, Cause_value)
	proto.RegisterEnum("cockroach.sql.insights.Statement_Status", Statement_Status_name, Statement_Status_value)
	proto.RegisterType((*Session)(nil), "cockroach.sql.insights.Session")
	proto.RegisterType((*Transaction)(nil), "cockroach.sql.insights.Transaction")
	proto.RegisterType((*Statement)(nil), "cockroach.sql.insights.Statement")
	proto.RegisterType((*Insight)(nil), "cockroach.sql.insights.Insight")
}

func init() {
	proto.RegisterFile("sql/sqlstats/insights/insights.proto", fileDescriptor_1905fa99396732c4)
}

var fileDescriptor_1905fa99396732c4 = []byte{
	// 999 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4d, 0x6f, 0xe3, 0x44,
	0x18, 0x8e, 0x93, 0x34, 0x1f, 0x6f, 0x9a, 0xd4, 0x9d, 0x2d, 0xc8, 0x14, 0x91, 0x64, 0x5b, 0x0e,
	0xa6, 0x42, 0x8e, 0x94, 0x8a, 0xc3, 0x0a, 0x89, 0x42, 0x3f, 0x76, 0xe9, 0x65, 0x55, 0x26, 0xad,
	0x56, 0xe2, 0x80, 0x35, 0xb1, 0xa7, 0xee, 0x68, 0xed, 0x19, 0xd7, 0x33, 0x56, 0x5b, 0xee, 0xdc,
	0xf7, 0xc8, 0xcf, 0xe0, 0xc8, 0x89, 0x73, 0x8f, 0x7b, 0x5c, 0x71, 0x28, 0xd0, 0xfe, 0x0b, 0x4e,
	0x68, 0xc6, 0x4e, 0x9b, 0x65, 0x29, 0xec, 0x1e, 0xb8, 0xcd, 0x3c, 0xcf, 0xfb, 0xe1, 0xf7, 0xf5,
	0xf3, 0x0c, 0x7c, 0x2c, 0x4f, 0xe3, 0x91, 0x3c, 0x8d, 0xa5, 0x22, 0x4a, 0x8e, 0x18, 0x97, 0x2c,
	0x3a, 0x99, 0x3b, 0x78, 0x69, 0x26, 0x94, 0x40, 0xef, 0x07, 0x22, 0x78, 0x9e, 0x09, 0x12, 0x9c,
	0x78, 0xf2, 0x34, 0xf6, 0x66, 0xec, 0xea, 0x4a, 0x24, 0x22, 0x61, 0x42, 0x46, 0xfa, 0x54, 0x44,
	0xaf, 0x0e, 0x22, 0x21, 0xa2, 0x98, 0x8e, 0xcc, 0x6d, 0x9a, 0x1f, 0x8f, 0x14, 0x4b, 0xa8, 0x54,
	0x24, 0x49, 0xcb, 0x80, 0xfe, 0xdf, 0x03, 0xc2, 0x3c, 0x23, 0x8a, 0x09, 0x5e, 0xf0, 0x6b, 0x53,
	0x68, 0x4e, 0xa8, 0x94, 0x4c, 0x70, 0xf4, 0x0c, 0xaa, 0x2c, 0x74, 0xac, 0xa1, 0xe5, 0x2e, 0x6e,
	0x3f, 0xb9, 0xbc, 0x1a, 0x54, 0x7e, 0xbd, 0x1a, 0x3c, 0x8a, 0x98, 0x3a, 0xc9, 0xa7, 0x5e, 0x20,
	0x92, 0xd1, 0xed, 0x87, 0x85, 0xd3, 0xbb, 0xf3, 0x28, 0x7d, 0x1e, 0xe9, 0xa1, 0x46, 0x41, 0x9c,
	0x4b, 0x45, 0xb3, 0x9c, 0xb3, 0xd3, 0x9c, 0x7a, 0xfb, 0xbb, 0xd7, 0x57, 0x83, 0xea, 0xfe, 0x2e,
	0xae, 0xb2, 0x70, 0xed, 0xa7, 0x2a, 0x74, 0x0e, 0x33, 0xc2, 0x25, 0x09, 0x74, 0x67, 0xf4, 0xcd,
	0x5c, 0xa3, 0xaf, 0xca, 0x46, 0x9b, 0x6f, 0xd5, 0x28, 0x57, 0x2c, 0x1e, 0xe5, 0x39, 0x0b, 0xbd,
	0xa3, 0xa3, 0xf9, 0x16, 0xe8, 0x07, 0x0b, 0x7a, 0xc7, 0x8c, 0x47, 0x34, 0x4b, 0x33, 0xc6, 0x95,
	0xcf, 0x42, 0xa7, 0x3a, 0xb4, 0xdc, 0xfa, 0xf6, 0x77, 0x65, 0xfd, 0xbd, 0xb7, 0xaa, 0x6f, 0x4e,
	0xe9, 0xd4, 0x9b, 0xfb, 0xda, 0xc7, 0x77, 0x55, 0x4d, 0xc7, 0xee, 0x6b, 0x00, 0xee, 0xce, 0x75,
	0xdd, 0x0f, 0xd1, 0x3a, 0x74, 0x73, 0x49, 0x33, 0x3f, 0xcd, 0x98, 0xc8, 0x98, 0xba, 0x70, 0x6a,
	0x43, 0xcb, 0x6d, 0xe3, 0x45, 0x0d, 0x1e, 0x94, 0x18, 0x7a, 0x08, 0x8b, 0x2c, 0x49, 0x63, 0x16,
	0x30, 0xe5, 0xab, 0x73, 0xee, 0xd4, 0x87, 0x96, 0xdb, 0xc2, 0x9d, 0x19, 0x76, 0x78, 0xce, 0xd7,
	0x7e, 0x6e, 0x42, 0x7b, 0xa2, 0x88, 0xa2, 0x09, 0xe5, 0xea, 0x7f, 0xfb, 0x33, 0xe8, 0xfb, 0x7b,
	0xb6, 0x36, 0x79, 0x63, 0xd0, 0x3f, 0xaf, 0x06, 0x5f, 0xbc, 0xd3, 0x0a, 0x27, 0x2a, 0x51, 0xff,
	0xba, 0xaa, 0x4f, 0x01, 0xc5, 0x44, 0x51, 0x1e, 0x5c, 0xf8, 0x8c, 0xfb, 0x92, 0x06, 0x82, 0x87,
	0xd2, 0xec, 0xcb, 0xc2, 0x76, 0xc9, 0xec, 0xf3, 0x49, 0x81, 0xa3, 0x15, 0x58, 0x38, 0xcd, 0x69,
	0x76, 0x61, 0x96, 0xd5, 0xc6, 0xc5, 0x05, 0x7d, 0x09, 0x0d, 0xed, 0xa6, 0x5c, 0x3a, 0x0b, 0x43,
	0xcb, 0xed, 0x8d, 0x5d, 0xef, 0x9f, 0xdd, 0xe3, 0xdd, 0xee, 0xd2, 0x9c, 0x72, 0x89, 0xcb, 0x3c,
	0xb4, 0x03, 0x20, 0x15, 0xc9, 0x94, 0xaf, 0x8d, 0xe3, 0x34, 0x86, 0x96, 0xdb, 0x19, 0xaf, 0x7a,
	0x85, 0x69, 0xbc, 0x99, 0x69, 0xbc, 0xc3, 0x99, 0xab, 0xb6, 0x5b, 0x7a, 0xfd, 0x2f, 0x7e, 0x1b,
	0x58, 0xb8, 0x6d, 0xf2, 0x34, 0x83, 0xb6, 0xa0, 0x45, 0x79, 0x58, 0x94, 0x68, 0xbe, 0x43, 0x89,
	0x26, 0xe5, 0xa1, 0x29, 0xf0, 0x21, 0xb4, 0x8f, 0xf3, 0x38, 0xf6, 0x65, 0x40, 0xb8, 0xd3, 0x32,
	0x72, 0x68, 0x69, 0x60, 0x12, 0x10, 0x8e, 0x10, 0xd4, 0xb5, 0x7c, 0x9c, 0xb6, 0x99, 0xdc, 0x9c,
	0xd1, 0x27, 0x60, 0x93, 0x54, 0xcb, 0xc5, 0x78, 0xd9, 0xe7, 0x24, 0xa1, 0x0e, 0x18, 0x7e, 0x69,
	0x0e, 0x7f, 0x4a, 0x12, 0x8a, 0x56, 0xa1, 0x15, 0x12, 0x45, 0xa6, 0x44, 0x52, 0xa7, 0x63, 0x42,
	0x6e, 0xef, 0xba, 0x6f, 0x1a, 0x13, 0xee, 0x47, 0x4c, 0x2a, 0x67, 0xb1, 0x20, 0x35, 0xf0, 0x84,
	0x49, 0xa5, 0xc9, 0x4c, 0x9c, 0x49, 0x3f, 0xa3, 0x24, 0x74, 0xba, 0x43, 0xcb, 0xad, 0xe1, 0x96,
	0x06, 0x30, 0x25, 0xa1, 0xd6, 0xb0, 0x21, 0xcf, 0x32, 0xa6, 0x14, 0xe5, 0x4e, 0xcf, 0xf0, 0x1d,
	0x8d, 0x3d, 0x2b, 0x20, 0xe4, 0x40, 0x33, 0xa3, 0x2a, 0x63, 0x54, 0x3a, 0x4b, 0x86, 0x9d, 0x5d,
	0xd1, 0x06, 0x2c, 0x93, 0x5c, 0x09, 0x5f, 0xdf, 0x2f, 0x74, 0x7d, 0x29, 0xb8, 0x63, 0x97, 0x9f,
	0x9f, 0x2b, 0x81, 0x35, 0x8e, 0x0d, 0xac, 0x7f, 0x3c, 0x17, 0x21, 0x95, 0xce, 0xf2, 0xb0, 0xe6,
	0xd6, 0x70, 0x71, 0x41, 0x5b, 0x00, 0x81, 0xe0, 0x8a, 0x72, 0x3d, 0xa6, 0x83, 0xcc, 0xce, 0x3f,
	0x78, 0x63, 0xe7, 0xbb, 0xe5, 0x5b, 0xb7, 0x5d, 0xff, 0x51, 0xaf, 0x7b, 0x2e, 0x05, 0x6d, 0xc2,
	0x7b, 0x8c, 0x87, 0xf4, 0xdc, 0xcf, 0x68, 0x20, 0x92, 0x84, 0xf2, 0xd0, 0x44, 0x4a, 0xe7, 0xc1,
	0xb0, 0xe6, 0xb6, 0xf1, 0x8a, 0x21, 0xf1, 0xeb, 0xdc, 0xda, 0x3a, 0x34, 0x0a, 0xf9, 0xa0, 0x2e,
	0xb4, 0x77, 0x44, 0x92, 0xc6, 0x54, 0xd1, 0xd0, 0xae, 0x20, 0x80, 0xc6, 0x63, 0xc2, 0x62, 0x1a,
	0xda, 0xd6, 0xda, 0x2f, 0x55, 0x68, 0xee, 0x17, 0xba, 0x43, 0x8f, 0xa0, 0x29, 0x8b, 0xd7, 0xd5,
	0xb8, 0xb7, 0x33, 0x1e, 0xdc, 0x2b, 0xd0, 0x22, 0x0c, 0xcf, 0xe2, 0xd1, 0x1e, 0x74, 0xd4, 0xdd,
	0x2b, 0x64, 0x7c, 0xd9, 0x19, 0xaf, 0xdf, 0x97, 0x3e, 0xf7, 0x60, 0xe1, 0xf9, 0x3c, 0xb4, 0x05,
	0x5a, 0xa7, 0x85, 0xf6, 0x8d, 0xb9, 0x3a, 0xe3, 0x87, 0xff, 0x69, 0x12, 0x7c, 0x97, 0xa3, 0x47,
	0x48, 0x33, 0x31, 0x8d, 0x69, 0x62, 0xac, 0xd7, 0xbb, 0x7f, 0x84, 0x83, 0x22, 0x0c, 0xcf, 0xe2,
	0xd1, 0x67, 0xd0, 0x08, 0x48, 0x2e, 0xa9, 0x76, 0x67, 0xcd, 0xed, 0x8d, 0x3f, 0xba, 0x2f, 0x73,
	0x47, 0x47, 0xe1, 0x32, 0x78, 0xe3, 0x73, 0x68, 0x96, 0xa5, 0x50, 0x0b, 0xea, 0x4f, 0x05, 0xa7,
	0x76, 0x05, 0x2d, 0x43, 0x77, 0x12, 0x8b, 0xb3, 0xbd, 0x73, 0x1a, 0xe4, 0x7a, 0x30, 0xdb, 0x42,
	0x0f, 0x60, 0xa9, 0x58, 0xfa, 0x1d, 0x58, 0xdd, 0x98, 0xc2, 0x82, 0xa9, 0x86, 0xda, 0xb0, 0x70,
	0xc4, 0x25, 0x55, 0x76, 0x05, 0x21, 0xe8, 0x1d, 0xc4, 0x84, 0x63, 0x1a, 0x65, 0xc5, 0x72, 0x6d,
	0x4b, 0x63, 0x93, 0x7c, 0x2a, 0x52, 0xc5, 0x12, 0x12, 0x6b, 0xd6, 0xae, 0x6a, 0xec, 0x6b, 0x16,
	0x9d, 0xec, 0xdc, 0xaa, 0xc4, 0xae, 0xcd, 0x30, 0xa3, 0xc8, 0x1d, 0x91, 0x73, 0x65, 0xd7, 0xb7,
	0x37, 0x2e, 0xff, 0xe8, 0x57, 0x2e, 0xaf, 0xfb, 0xd6, 0xcb, 0xeb, 0xbe, 0xf5, 0xea, 0xba, 0x6f,
	0xfd, 0x7e, 0xdd, 0xb7, 0x5e, 0xdc, 0xf4, 0x2b, 0x2f, 0x6f, 0xfa, 0x95, 0x57, 0x37, 0xfd, 0xca,
	0xb7, 0xad, 0xd9, 0x68, 0xd3, 0x86, 0x11, 0xe3, 0xe6, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb8,
	0x67, 0x71, 0x20, 0xfd, 0x07, 0x00, 0x00,
}

func (m *Session) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Session) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Session) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInsights(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ImplicitTxn {
		i--
		if m.ImplicitTxn {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.UserPriority) > 0 {
		i -= len(m.UserPriority)
		copy(dAtA[i:], m.UserPriority)
		i = encodeVarintInsights(dAtA, i, uint64(len(m.UserPriority)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FingerprintID != 0 {
		i = encodeVarintInsights(dAtA, i, uint64(m.FingerprintID))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInsights(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Statement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Statement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Statement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IndexRecommendations) > 0 {
		for iNdEx := len(m.IndexRecommendations) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IndexRecommendations[iNdEx])
			copy(dAtA[i:], m.IndexRecommendations[iNdEx])
			i = encodeVarintInsights(dAtA, i, uint64(len(m.IndexRecommendations[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if m.Contention != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.Contention, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.Contention):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintInsights(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Nodes) > 0 {
		dAtA3 := make([]byte, len(m.Nodes)*10)
		var j2 int
		for _, num1 := range m.Nodes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintInsights(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.AutoRetryReason) > 0 {
		i -= len(m.AutoRetryReason)
		copy(dAtA[i:], m.AutoRetryReason)
		i = encodeVarintInsights(dAtA, i, uint64(len(m.AutoRetryReason)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Retries != 0 {
		i = encodeVarintInsights(dAtA, i, uint64(m.Retries))
		i--
		dAtA[i] = 0x78
	}
	if m.RowsWritten != 0 {
		i = encodeVarintInsights(dAtA, i, uint64(m.RowsWritten))
		i--
		dAtA[i] = 0x70
	}
	if m.RowsRead != 0 {
		i = encodeVarintInsights(dAtA, i, uint64(m.RowsRead))
		i--
		dAtA[i] = 0x68
	}
	if len(m.PlanGist) > 0 {
		i -= len(m.PlanGist)
		copy(dAtA[i:], m.PlanGist)
		i = encodeVarintInsights(dAtA, i, uint64(len(m.PlanGist)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Database) > 0 {
		i -= len(m.Database)
		copy(dAtA[i:], m.Database)
		i = encodeVarintInsights(dAtA, i, uint64(len(m.Database)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ApplicationName) > 0 {
		i -= len(m.ApplicationName)
		copy(dAtA[i:], m.ApplicationName)
		i = encodeVarintInsights(dAtA, i, uint64(len(m.ApplicationName)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintInsights(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x4a
	}
	if m.FullScan {
		i--
		if m.FullScan {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintInsights(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x3a
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintInsights(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x32
	if m.Status != 0 {
		i = encodeVarintInsights(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintInsights(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x22
	}
	if m.LatencyInSeconds != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LatencyInSeconds))))
		i--
		dAtA[i] = 0x19
	}
	if m.FingerprintID != 0 {
		i = encodeVarintInsights(dAtA, i, uint64(m.FingerprintID))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.ID.Size()
		i -= size
		if _, err := m.ID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInsights(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Insight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Insight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Insight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Causes) > 0 {
		dAtA7 := make([]byte, len(m.Causes)*10)
		var j6 int
		for _, num := range m.Causes {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintInsights(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x2a
	}
	if m.Problem != 0 {
		i = encodeVarintInsights(dAtA, i, uint64(m.Problem))
		i--
		dAtA[i] = 0x20
	}
	if m.Statement != nil {
		{
			size, err := m.Statement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInsights(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInsights(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Session != nil {
		{
			size, err := m.Session.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInsights(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInsights(dAtA []byte, offset int, v uint64) int {
	offset -= sovInsights(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Session) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovInsights(uint64(l))
	return n
}

func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovInsights(uint64(l))
	if m.FingerprintID != 0 {
		n += 1 + sovInsights(uint64(m.FingerprintID))
	}
	l = len(m.UserPriority)
	if l > 0 {
		n += 1 + l + sovInsights(uint64(l))
	}
	if m.ImplicitTxn {
		n += 2
	}
	return n
}

func (m *Statement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovInsights(uint64(l))
	if m.FingerprintID != 0 {
		n += 1 + sovInsights(uint64(m.FingerprintID))
	}
	if m.LatencyInSeconds != 0 {
		n += 9
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovInsights(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovInsights(uint64(m.Status))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovInsights(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovInsights(uint64(l))
	if m.FullScan {
		n += 2
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovInsights(uint64(l))
	}
	l = len(m.ApplicationName)
	if l > 0 {
		n += 1 + l + sovInsights(uint64(l))
	}
	l = len(m.Database)
	if l > 0 {
		n += 1 + l + sovInsights(uint64(l))
	}
	l = len(m.PlanGist)
	if l > 0 {
		n += 1 + l + sovInsights(uint64(l))
	}
	if m.RowsRead != 0 {
		n += 1 + sovInsights(uint64(m.RowsRead))
	}
	if m.RowsWritten != 0 {
		n += 1 + sovInsights(uint64(m.RowsWritten))
	}
	if m.Retries != 0 {
		n += 1 + sovInsights(uint64(m.Retries))
	}
	l = len(m.AutoRetryReason)
	if l > 0 {
		n += 2 + l + sovInsights(uint64(l))
	}
	if len(m.Nodes) > 0 {
		l = 0
		for _, e := range m.Nodes {
			l += sovInsights(uint64(e))
		}
		n += 2 + sovInsights(uint64(l)) + l
	}
	if m.Contention != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.Contention)
		n += 2 + l + sovInsights(uint64(l))
	}
	if len(m.IndexRecommendations) > 0 {
		for _, s := range m.IndexRecommendations {
			l = len(s)
			n += 2 + l + sovInsights(uint64(l))
		}
	}
	return n
}

func (m *Insight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Session != nil {
		l = m.Session.Size()
		n += 1 + l + sovInsights(uint64(l))
	}
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovInsights(uint64(l))
	}
	if m.Statement != nil {
		l = m.Statement.Size()
		n += 1 + l + sovInsights(uint64(l))
	}
	if m.Problem != 0 {
		n += 1 + sovInsights(uint64(m.Problem))
	}
	if len(m.Causes) > 0 {
		l = 0
		for _, e := range m.Causes {
			l += sovInsights(uint64(e))
		}
		n += 1 + sovInsights(uint64(l)) + l
	}
	return n
}

func sovInsights(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInsights(x uint64) (n int) {
	return sovInsights(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Session) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInsights
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Session: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Session: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInsights
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInsights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInsights(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInsights
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInsights
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInsights
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInsights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FingerprintID", wireType)
			}
			m.FingerprintID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FingerprintID |= github_com_cockroachdb_cockroach_pkg_roachpb.TransactionFingerprintID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPriority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInsights
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInsights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserPriority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImplicitTxn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImplicitTxn = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipInsights(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInsights
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Statement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInsights
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Statement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Statement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInsights
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInsights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FingerprintID", wireType)
			}
			m.FingerprintID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FingerprintID |= github_com_cockroachdb_cockroach_pkg_roachpb.StmtFingerprintID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatencyInSeconds", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LatencyInSeconds = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInsights
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInsights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Statement_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInsights
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInsights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInsights
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInsights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullScan", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FullScan = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInsights
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInsights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInsights
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInsights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInsights
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInsights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanGist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInsights
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInsights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanGist = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsRead", wireType)
			}
			m.RowsRead = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsRead |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsWritten", wireType)
			}
			m.RowsWritten = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsWritten |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retries", wireType)
			}
			m.Retries = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retries |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoRetryReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInsights
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInsights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AutoRetryReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInsights
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Nodes = append(m.Nodes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInsights
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInsights
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthInsights
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Nodes) == 0 {
					m.Nodes = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInsights
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Nodes = append(m.Nodes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contention", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInsights
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInsights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contention == nil {
				m.Contention = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.Contention, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexRecommendations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInsights
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInsights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexRecommendations = append(m.IndexRecommendations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInsights(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInsights
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Insight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInsights
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Insight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Insight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Session", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInsights
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInsights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Session == nil {
				m.Session = &Session{}
			}
			if err := m.Session.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInsights
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInsights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInsights
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInsights
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statement == nil {
				m.Statement = &Statement{}
			}
			if err := m.Statement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Problem", wireType)
			}
			m.Problem = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Problem |= Problem(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v Cause
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInsights
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= Cause(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Causes = append(m.Causes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInsights
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInsights
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthInsights
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Causes) == 0 {
					m.Causes = make([]Cause, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v Cause
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInsights
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= Cause(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Causes = append(m.Causes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Causes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInsights(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInsights
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInsights(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInsights
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInsights
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInsights
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInsights
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInsights
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInsights        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInsights          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInsights = fmt.Errorf("proto: unexpected end of group")
)
