// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p plpgsql -o plpgsql.go.tmp plpgsql-gen.y. DO NOT EDIT.

//line plpgsql-gen.y:2
package parser

import (
	"fmt"
	__yyfmt__ "fmt"

	"github.com/cockroachdb/cockroach/pkg/sql/plpgsql/parser/lexbase"
	"github.com/cockroachdb/cockroach/pkg/sql/scanner"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/plpgsqltree"
	"github.com/cockroachdb/errors"
	"github.com/cockroachdb/redact"
) //line plpgsql-gen.y:2

//line plpgsql-gen.y:16
func setErr(plpgsqllex plpgsqlLexer, err error) int {
	plpgsqllex.(*lexer).setErr(err)
	return 1
}

var _ scanner.ScanSymType = &plpgsqlSymType{}

func (s *plpgsqlSymType) ID() int32 {
	return s.id
}

func (s *plpgsqlSymType) SetID(id int32) {
	s.id = id
}

func (s *plpgsqlSymType) Pos() int32 {
	return s.pos
}

func (s *plpgsqlSymType) SetPos(pos int32) {
	s.pos = pos
}

func (s *plpgsqlSymType) Str() string {
	return s.str
}

func (s *plpgsqlSymType) SetStr(str string) {
	s.str = str
}

func (s *plpgsqlSymType) UnionVal() interface{} {
	return s.union.val
}

func (s *plpgsqlSymType) SetUnionVal(val interface{}) {
	s.union.val = val
}

func (s *plpgsqlSymType) plpgsqlScanSymType() {}

type plpgsqlSymUnion struct {
	val interface{}
}

func (u *plpgsqlSymUnion) plpgsqlStmtBlock() *plpgsqltree.PLpgSQLStmtBlock {
	return u.val.(*plpgsqltree.PLpgSQLStmtBlock)
}

func (u *plpgsqlSymUnion) plpgsqlStmtCaseWhenArm() *plpgsqltree.PLpgSQLStmtCaseWhenArm {
	return u.val.(*plpgsqltree.PLpgSQLStmtCaseWhenArm)
}

func (u *plpgsqlSymUnion) plpgsqlStmtCaseWhenArms() []*plpgsqltree.PLpgSQLStmtCaseWhenArm {
	return u.val.([]*plpgsqltree.PLpgSQLStmtCaseWhenArm)
}

func (u *plpgsqlSymUnion) plpgsqlStatement() plpgsqltree.PLpgSQLStatement {
	return u.val.(plpgsqltree.PLpgSQLStatement)
}

func (u *plpgsqlSymUnion) plpgsqlDeclareheader() *declareHeader {
	return u.val.(*declareHeader)
}

func (u *plpgsqlSymUnion) plpgsqlStatements() []plpgsqltree.PLpgSQLStatement {
	return u.val.([]plpgsqltree.PLpgSQLStatement)
}

func (u *plpgsqlSymUnion) int32() int32 {
	return u.val.(int32)
}

func (u *plpgsqlSymUnion) uint32() uint32 {
	return u.val.(uint32)
}

func (u *plpgsqlSymUnion) bool() bool {
	return u.val.(bool)
}

func (u *plpgsqlSymUnion) pLpgSQLGetDiagKind() plpgsqltree.PLpgSQLGetDiagKind {
	return u.val.(plpgsqltree.PLpgSQLGetDiagKind)
}

func (u *plpgsqlSymUnion) pLpgSQLStmtGetDiagItem() *plpgsqltree.PLpgSQLStmtGetDiagItem {
	return u.val.(*plpgsqltree.PLpgSQLStmtGetDiagItem)
}

func (u *plpgsqlSymUnion) pLpgSQLStmtGetDiagItemList() plpgsqltree.PLpgSQLStmtGetDiagItemList {
	return u.val.(plpgsqltree.PLpgSQLStmtGetDiagItemList)
}

func (u *plpgsqlSymUnion) pLpgSQLStmtIfElseIfArmList() []*plpgsqltree.PLpgSQLStmtIfElseIfArm {
	return u.val.([]*plpgsqltree.PLpgSQLStmtIfElseIfArm)
}

func (u *plpgsqlSymUnion) pLpgSQLStmtOpen() *plpgsqltree.PLpgSQLStmtOpen {
	return u.val.(*plpgsqltree.PLpgSQLStmtOpen)
}

//line plpgsql-gen.y:254
type plpgsqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union plpgsqlSymUnion
}

const IDENT = lexbase.IDENT
const UIDENT = lexbase.UIDENT
const FCONST = lexbase.FCONST
const SCONST = lexbase.SCONST
const USCONST = lexbase.USCONST
const BCONST = lexbase.BCONST
const XCONST = lexbase.XCONST
const Op = 57353
const ICONST = lexbase.ICONST
const PARAM = lexbase.PARAM
const TYPECAST = lexbase.TYPECAST
const DOT_DOT = lexbase.DOT_DOT
const COLON_EQUALS = lexbase.COLON_EQUALS
const EQUALS_GREATER = lexbase.EQUALS_GREATER
const LESS_EQUALS = lexbase.LESS_EQUALS
const GREATER_EQUALS = lexbase.GREATER_EQUALS
const NOT_EQUALS = lexbase.NOT_EQUALS
const LESS_LESS = lexbase.LESS_LESS
const GREATER_GREATER = lexbase.GREATER_GREATER
const ABSOLUTE = lexbase.ABSOLUTE
const ALIAS = lexbase.ALIAS
const ALL = lexbase.ALL
const AND = lexbase.AND
const ARRAY = lexbase.ARRAY
const ASSERT = lexbase.ASSERT
const BACKWARD = lexbase.BACKWARD
const BEGIN = lexbase.BEGIN
const BY = lexbase.BY
const CALL = lexbase.CALL
const CASE = lexbase.CASE
const CHAIN = lexbase.CHAIN
const CLOSE = lexbase.CLOSE
const COLLATE = lexbase.COLLATE
const COLUMN = lexbase.COLUMN
const COLUMN_NAME = lexbase.COLUMN_NAME
const COMMIT = lexbase.COMMIT
const CONSTANT = lexbase.CONSTANT
const CONSTRAINT = lexbase.CONSTRAINT
const CONSTRAINT_NAME = lexbase.CONSTRAINT_NAME
const CONTINUE = lexbase.CONTINUE
const CURRENT = lexbase.CURRENT
const CURSOR = lexbase.CURSOR
const DATATYPE = lexbase.DATATYPE
const DEBUG = lexbase.DEBUG
const DECLARE = lexbase.DECLARE
const DEFAULT = lexbase.DEFAULT
const DETAIL = lexbase.DETAIL
const DIAGNOSTICS = lexbase.DIAGNOSTICS
const DO = lexbase.DO
const DUMP = lexbase.DUMP
const ELSE = lexbase.ELSE
const ELSIF = lexbase.ELSIF
const END = lexbase.END
const END_CASE = lexbase.END_CASE
const END_IF = lexbase.END_IF
const ERRCODE = lexbase.ERRCODE
const ERROR = lexbase.ERROR
const EXCEPTION = lexbase.EXCEPTION
const EXECUTE = lexbase.EXECUTE
const EXIT = lexbase.EXIT
const FETCH = lexbase.FETCH
const FIRST = lexbase.FIRST
const FOR = lexbase.FOR
const FOREACH = lexbase.FOREACH
const FORWARD = lexbase.FORWARD
const FROM = lexbase.FROM
const GET = lexbase.GET
const HINT = lexbase.HINT
const IF = lexbase.IF
const IMPORT = lexbase.IMPORT
const IN = lexbase.IN
const INFO = lexbase.INFO
const INSERT = lexbase.INSERT
const INTO = lexbase.INTO
const IS = lexbase.IS
const LAST = lexbase.LAST
const LOG = lexbase.LOG
const LOOP = lexbase.LOOP
const MERGE = lexbase.MERGE
const MESSAGE = lexbase.MESSAGE
const MESSAGE_TEXT = lexbase.MESSAGE_TEXT
const MOVE = lexbase.MOVE
const NEXT = lexbase.NEXT
const NO = lexbase.NO
const NO_SCROLL = lexbase.NO_SCROLL
const NOT = lexbase.NOT
const NOTICE = lexbase.NOTICE
const NULL = lexbase.NULL
const OPEN = lexbase.OPEN
const OPTION = lexbase.OPTION
const OR = lexbase.OR
const PERFORM = lexbase.PERFORM
const PG_CONTEXT = lexbase.PG_CONTEXT
const PG_DATATYPE_NAME = lexbase.PG_DATATYPE_NAME
const PG_EXCEPTION_CONTEXT = lexbase.PG_EXCEPTION_CONTEXT
const PG_EXCEPTION_DETAIL = lexbase.PG_EXCEPTION_DETAIL
const PG_EXCEPTION_HINT = lexbase.PG_EXCEPTION_HINT
const PRINT_STRICT_PARAMS = lexbase.PRINT_STRICT_PARAMS
const PRIOR = lexbase.PRIOR
const QUERY = lexbase.QUERY
const RAISE = lexbase.RAISE
const RELATIVE = lexbase.RELATIVE
const RETURN = lexbase.RETURN
const RETURN_NEXT = lexbase.RETURN_NEXT
const RETURN_QUERY = lexbase.RETURN_QUERY
const RETURNED_SQLSTATE = lexbase.RETURNED_SQLSTATE
const REVERSE = lexbase.REVERSE
const ROLLBACK = lexbase.ROLLBACK
const ROW_COUNT = lexbase.ROW_COUNT
const ROWTYPE = lexbase.ROWTYPE
const SCHEMA = lexbase.SCHEMA
const SCHEMA_NAME = lexbase.SCHEMA_NAME
const SCROLL = lexbase.SCROLL
const SLICE = lexbase.SLICE
const SQLSTATE = lexbase.SQLSTATE
const STACKED = lexbase.STACKED
const STRICT = lexbase.STRICT
const TABLE = lexbase.TABLE
const TABLE_NAME = lexbase.TABLE_NAME
const THEN = lexbase.THEN
const TO = lexbase.TO
const TYPE = lexbase.TYPE
const USE_COLUMN = lexbase.USE_COLUMN
const USE_VARIABLE = lexbase.USE_VARIABLE
const USING = lexbase.USING
const VARIABLE_CONFLICT = lexbase.VARIABLE_CONFLICT
const WARNING = lexbase.WARNING
const WHEN = lexbase.WHEN
const WHILE = lexbase.WHILE

var plpgsqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"LESS_LESS",
	"GREATER_GREATER",
	"ABSOLUTE",
	"ALIAS",
	"ALL",
	"AND",
	"ARRAY",
	"ASSERT",
	"BACKWARD",
	"BEGIN",
	"BY",
	"CALL",
	"CASE",
	"CHAIN",
	"CLOSE",
	"COLLATE",
	"COLUMN",
	"COLUMN_NAME",
	"COMMIT",
	"CONSTANT",
	"CONSTRAINT",
	"CONSTRAINT_NAME",
	"CONTINUE",
	"CURRENT",
	"CURSOR",
	"DATATYPE",
	"DEBUG",
	"DECLARE",
	"DEFAULT",
	"DETAIL",
	"DIAGNOSTICS",
	"DO",
	"DUMP",
	"ELSE",
	"ELSIF",
	"END",
	"END_CASE",
	"END_IF",
	"ERRCODE",
	"ERROR",
	"EXCEPTION",
	"EXECUTE",
	"EXIT",
	"FETCH",
	"FIRST",
	"FOR",
	"FOREACH",
	"FORWARD",
	"FROM",
	"GET",
	"HINT",
	"IF",
	"IMPORT",
	"IN",
	"INFO",
	"INSERT",
	"INTO",
	"IS",
	"LAST",
	"LOG",
	"LOOP",
	"MERGE",
	"MESSAGE",
	"MESSAGE_TEXT",
	"MOVE",
	"NEXT",
	"NO",
	"NO_SCROLL",
	"NOT",
	"NOTICE",
	"NULL",
	"OPEN",
	"OPTION",
	"OR",
	"PERFORM",
	"PG_CONTEXT",
	"PG_DATATYPE_NAME",
	"PG_EXCEPTION_CONTEXT",
	"PG_EXCEPTION_DETAIL",
	"PG_EXCEPTION_HINT",
	"PRINT_STRICT_PARAMS",
	"PRIOR",
	"QUERY",
	"RAISE",
	"RELATIVE",
	"RETURN",
	"RETURN_NEXT",
	"RETURN_QUERY",
	"RETURNED_SQLSTATE",
	"REVERSE",
	"ROLLBACK",
	"ROW_COUNT",
	"ROWTYPE",
	"SCHEMA",
	"SCHEMA_NAME",
	"SCROLL",
	"SLICE",
	"SQLSTATE",
	"STACKED",
	"STRICT",
	"TABLE",
	"TABLE_NAME",
	"THEN",
	"TO",
	"TYPE",
	"USE_COLUMN",
	"USE_VARIABLE",
	"USING",
	"VARIABLE_CONFLICT",
	"WARNING",
	"WHEN",
	"WHILE",
	"';'",
	"'('",
	"')'",
	"','",
	"'='",
}

var plpgsqlStatenames = [...]string{}

const plpgsqlEofCode = 1
const plpgsqlErrCode = 2
const plpgsqlInitialStackSize = 16

//line plpgsql-gen.y:1209

//line yacctab:1
var plpgsqlExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 98,
	30, 145,
	48, 145,
	56, 132,
	-2, 147,
	-1, 103,
	45, 16,
	-2, 31,
	-1, 216,
	30, 145,
	48, 145,
	-2, 147,
	-1, 237,
	30, 146,
	48, 146,
	-2, 148,
	-1, 250,
	30, 145,
	48, 145,
	54, 86,
	55, 86,
	58, 86,
	-2, 147,
	-1, 284,
	30, 145,
	48, 145,
	57, 96,
	-2, 147,
	-1, 303,
	30, 145,
	48, 145,
	56, 137,
	131, 137,
	-2, 147,
	-1, 309,
	30, 145,
	48, 145,
	54, 94,
	57, 94,
	131, 94,
	-2, 147,
	-1, 320,
	30, 145,
	48, 145,
	58, 89,
	-2, 147,
	-1, 328,
	30, 145,
	48, 145,
	54, 87,
	55, 87,
	58, 87,
	-2, 147,
}

const plpgsqlPrivate = 57344

const plpgsqlLast = 1143

var plpgsqlAct = [...]int16{
	216, 215, 217, 13, 103, 278, 175, 263, 182, 98,
	181, 247, 201, 105, 11, 172, 210, 213, 104, 208,
	194, 192, 219, 197, 186, 174, 300, 301, 290, 179,
	180, 291, 244, 327, 224, 174, 223, 14, 15, 322,
	16, 17, 18, 19, 177, 321, 20, 316, 21, 22,
	23, 24, 25, 26, 27, 28, 29, 30, 31, 32,
	33, 34, 102, 35, 36, 37, 38, 39, 297, 40,
	315, 289, 273, 41, 42, 43, 267, 44, 45, 46,
	265, 249, 47, 236, 48, 49, 233, 50, 232, 51,
	52, 227, 53, 54, 55, 178, 56, 57, 58, 59,
	60, 61, 62, 105, 63, 226, 64, 65, 225, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	77, 78, 79, 80, 81, 82, 83, 84, 85, 86,
	87, 88, 89, 90, 196, 91, 92, 171, 7, 93,
	94, 95, 209, 96, 97, 253, 173, 214, 281, 325,
	285, 211, 294, 189, 260, 205, 173, 298, 184, 100,
	270, 183, 234, 286, 195, 164, 276, 266, 200, 287,
	258, 324, 203, 318, 283, 187, 193, 280, 275, 169,
	206, 166, 199, 307, 306, 228, 10, 204, 220, 220,
	239, 268, 308, 8, 311, 198, 237, 106, 5, 288,
	264, 195, 195, 221, 202, 191, 207, 242, 110, 2,
	170, 185, 250, 230, 231, 235, 295, 277, 248, 256,
	257, 254, 214, 274, 240, 101, 99, 245, 190, 167,
	252, 9, 6, 1, 165, 313, 262, 188, 251, 212,
	246, 261, 107, 272, 117, 113, 133, 132, 105, 279,
	131, 130, 129, 128, 284, 127, 126, 168, 125, 162,
	124, 116, 123, 122, 121, 120, 119, 118, 115, 114,
	112, 111, 108, 305, 282, 137, 4, 218, 259, 222,
	292, 303, 176, 229, 243, 296, 309, 238, 299, 293,
	248, 138, 302, 304, 269, 163, 314, 310, 3, 312,
	0, 0, 0, 0, 0, 105, 279, 317, 320, 104,
	0, 0, 0, 319, 323, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 326, 328, 0, 14, 15,
	0, 16, 17, 18, 19, 0, 0, 20, 0, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 0, 35, 36, 37, 38, 39, 0,
	40, 0, 0, 0, 41, 42, 43, 0, 44, 45,
	46, 0, 0, 47, 0, 48, 49, 0, 50, 0,
	51, 52, 0, 53, 54, 55, 0, 56, 57, 58,
	59, 60, 61, 62, 0, 63, 0, 64, 65, 0,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 88, 89, 90, 12, 91, 92, 0, 0,
	93, 94, 95, 0, 96, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 14, 15, 0, 16, 17, 18,
	19, 0, 0, 20, 0, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 0,
	35, 36, 37, 38, 39, 0, 40, 0, 0, 0,
	41, 42, 43, 0, 44, 45, 46, 0, 0, 47,
	0, 48, 49, 0, 50, 0, 51, 52, 0, 53,
	54, 55, 0, 56, 57, 58, 59, 60, 61, 62,
	0, 63, 0, 64, 65, 0, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 271, 91, 92, 0, 0, 93, 94, 95, 0,
	96, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	14, 15, 0, 16, 17, 18, 19, 0, 0, 20,
	0, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 0, 35, 36, 37, 38,
	39, 0, 40, 0, 0, 0, 41, 42, 43, 0,
	44, 45, 46, 0, 0, 47, 0, 48, 49, 0,
	50, 0, 51, 52, 0, 53, 54, 55, 0, 56,
	57, 58, 59, 60, 61, 62, 0, 63, 0, 64,
	65, 0, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 88, 89, 90, 241, 91, 92,
	0, 0, 93, 94, 95, 0, 96, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 14, 15, 0, 16,
	17, 18, 19, 0, 0, 20, 0, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 0, 35, 36, 37, 38, 39, 0, 40, 0,
	0, 0, 41, 42, 43, 0, 44, 45, 46, 0,
	0, 47, 0, 48, 49, 0, 50, 0, 51, 52,
	0, 53, 54, 55, 0, 56, 57, 58, 59, 60,
	61, 62, 0, 63, 0, 64, 65, 0, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 0, 91, 92, 0, 0, 93, 94,
	95, 0, 96, 97, 14, 15, 0, 16, 17, 18,
	19, 0, 0, 20, 0, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 0,
	35, 36, 37, 38, 39, 0, 40, 0, 0, 0,
	41, 42, 43, 0, 44, 45, 46, 0, 0, 47,
	0, 48, 49, 0, 50, 0, 51, 52, 0, 53,
	54, 55, 0, 56, 57, 58, 59, 60, 61, 62,
	0, 63, 0, 64, 65, 0, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 134, 91, 92, 0, 0, 93, 94, 95, 0,
	96, 97, 0, 0, 0, 0, 0, 0, 159, 0,
	0, 0, 0, 0, 0, 143, 0, 0, 0, 149,
	136, 0, 155, 0, 0, 0, 157, 0, 0, 0,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 255, 0, 0, 0, 0, 0, 147,
	160, 153, 0, 0, 0, 0, 0, 151, 0, 135,
	144, 0, 0, 145, 0, 0, 0, 0, 134, 146,
	0, 0, 154, 0, 0, 0, 0, 0, 156, 152,
	0, 0, 148, 0, 0, 159, 0, 0, 0, 0,
	0, 142, 143, 139, 140, 141, 149, 136, 158, 155,
	0, 0, 0, 157, 0, 0, 0, 161, 0, 0,
	0, 0, 0, 0, 0, 0, 150, 0, 0, 0,
	0, 0, 0, 0, 0, 109, 147, 160, 153, 0,
	0, 0, 0, 0, 151, 0, 135, 144, 0, 0,
	145, 0, 0, 0, 0, 134, 146, 0, 0, 154,
	0, 0, 0, 0, 0, 156, 152, 0, 0, 148,
	0, 0, 159, 0, 0, 0, 0, 0, 142, 143,
	139, 140, 141, 149, 136, 158, 155, 0, 0, 0,
	157, 0, 0, 0, 161, 0, 0, 0, 0, 0,
	0, 0, 0, 150, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 147, 160, 153, 0, 0, 0, 0,
	0, 151, 0, 135, 144, 0, 0, 145, 0, 0,
	0, 0, 0, 146, 0, 0, 154, 0, 0, 0,
	0, 0, 156, 152, 0, 0, 148, 0, 0, 0,
	0, 0, 0, 0, 0, 142, 0, 139, 140, 141,
	0, 0, 158,
}

var plpgsqlPact = [...]int16{
	177, -1000, 5, 163, 138, 421, -1000, -1000, -1000, 14,
	-1000, 175, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 954, 14,
	-1000, -1000, -1000, 141, -1000, -1000, -1000, 123, -1000, -1000,
	4, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 9, -1000, -1000, -37, 421, -1000,
	75, 55, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 109, 201, -1000, -1000, 421, 1, 169, 169, 421,
	-1000, -1000, -1000, 200, 106, 142, -1000, 39, -1000, 421,
	11, -1000, -1000, -1000, -1000, 28, 16, -1000, -1000, 421,
	421, -97, -1000, -1000, -1000, -25, -28, -42, 134, -1000,
	-1000, -1000, 421, 421, -45, -1000, -1000, -47, 128, -50,
	174, 154, -1000, 653, -102, -1000, -1000, 11, -1000, 421,
	-52, -1000, 91, -1000, -1000, -1000, 877, -1000, -1000, 96,
	-1000, 37, -1000, -1000, -1000, -1000, -1000, -1000, 196, -53,
	90, -57, -1000, -1000, -1000, 157, -1000, -1000, 71, 537,
	-61, -1000, -1000, 100, 305, -1000, 54, -1000, -1000, -1000,
	1031, 117, -1000, -1000, 27, 82, -1000, -1000, -1000, 95,
	187, -62, -105, -1000, 9, -1000, -1000, -1000, -1000, 19,
	66, -1000, -1000, -1000, -1000, -1000, -1000, -109, -1000, 200,
	-1000, 421, 129, 159, 1031, -1000, 421, 167, -1000, -1000,
	-1000, 196, 761, -1000, -1000, -63, -1000, -1000, -1000, -86,
	-1000, 305, -1000, 1031, -1000, 115, -1000, -1000, -88, 1031,
	-94, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 99, 26,
	1031, -1000, -1000, -1000, -100, -1000, -1000, -1000, 1031,
}

var plpgsqlPgo = [...]int16{
	0, 298, 4, 295, 294, 291, 289, 288, 12, 287,
	284, 283, 16, 6, 2, 282, 279, 20, 5, 22,
	278, 277, 8, 276, 275, 10, 0, 274, 273, 1,
	208, 272, 271, 270, 269, 268, 267, 266, 265, 264,
	263, 262, 261, 260, 258, 256, 255, 253, 252, 251,
	250, 247, 246, 245, 244, 242, 19, 240, 11, 17,
	239, 238, 237, 236, 7, 235, 234, 21, 23, 3,
	233, 232, 231, 226, 159, 225, 224, 223, 217, 216,
	15, 24, 216, 211, 210, 206, 206,
}

var plpgsqlR1 = [...]int8{
	0, 70, 71, 71, 30, 1, 1, 1, 72, 73,
	73, 74, 74, 75, 75, 75, 66, 66, 66, 7,
	10, 10, 78, 78, 18, 77, 77, 76, 76, 2,
	2, 3, 3, 8, 9, 9, 9, 4, 4, 6,
	6, 79, 79, 80, 80, 26, 26, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
	31, 43, 44, 44, 81, 32, 45, 62, 62, 62,
	63, 63, 64, 65, 82, 33, 27, 27, 28, 28,
	53, 15, 60, 60, 59, 61, 61, 34, 35, 42,
	21, 19, 54, 20, 20, 36, 5, 5, 37, 37,
	37, 38, 39, 83, 29, 40, 40, 40, 40, 41,
	46, 47, 48, 67, 49, 50, 51, 52, 68, 68,
	68, 17, 55, 84, 55, 85, 85, 56, 57, 57,
	58, 11, 12, 13, 14, 23, 23, 24, 24, 25,
	25, 16, 16, 22, 22, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
	69, 69, 69, 69, 69, 69, 69, 69, 69, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 86,
	86, 86, 86, 86, 86,
}

var plpgsqlR2 = [...]int8{
	0, 2, 0, 1, 6, 1, 2, 3, 1, 2,
	1, 1, 1, 6, 5, 7, 0, 2, 1, 0,
	0, 3, 1, 3, 2, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 2, 0, 2, 1,
	2, 1, 1, 1, 1, 0, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 3, 3, 0, 4, 5, 0, 1, 1,
	3, 1, 3, 1, 1, 9, 0, 5, 0, 2,
	7, 0, 2, 1, 4, 0, 2, 3, 4, 4,
	2, 1, 8, 0, 2, 3, 1, 1, 1, 2,
	2, 1, 3, 0, 5, 1, 1, 1, 1, 1,
	4, 4, 4, 0, 3, 2, 3, 3, 2, 3,
	0, 1, 0, 0, 3, 2, 1, 4, 3, 1,
	1, 0, 0, 0, 0, 0, 3, 0, 3, 0,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}

var plpgsqlChk = [...]int16{
	-1000, -70, -30, -1, -23, 21, -71, 133, 30, -72,
	48, -22, 4, -69, 23, 24, 26, 27, 28, 29,
	32, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 49, 50, 51, 52, 53,
	55, 59, 60, 61, 63, 64, 65, 68, 70, 71,
	73, 75, 76, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 88, 90, 92, 93, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 121, 122, 125, 126, 127, 129, 130, -26, -73,
	-74, -75, 48, -2, 4, -69, 22, -55, -31, 61,
	-30, -32, -33, -53, -34, -35, -42, -54, -36, -37,
	-38, -39, -40, -41, -43, -44, -45, -46, -47, -48,
	-49, -50, -51, -52, 4, 72, 33, -24, -5, 106,
	107, 108, 104, 28, 73, 76, 82, 62, 95, 32,
	52, 70, 92, 64, 85, 35, 91, 39, 111, 21,
	63, 43, -74, -3, 24, -66, 40, 88, 116, 56,
	-84, 133, -80, 137, 16, -13, -15, 81, 132, 66,
	67, -25, -22, 86, 103, -83, -81, -81, -62, 44,
	119, 4, -67, -67, -17, -22, 133, -68, 26, -68,
	-22, -8, 4, 66, 45, 116, -25, -85, -56, 131,
	-12, 123, -60, -59, 131, -29, -26, -14, -21, -19,
	-22, -19, -16, 133, 131, 133, 133, 133, 51, -11,
	-17, -17, 133, 133, 34, 87, 133, 22, -9, 36,
	-76, 4, -69, -10, 134, -56, -57, -58, -22, 133,
	-26, -61, -59, 54, -13, 56, -29, -29, 74, -20,
	117, -12, -63, -64, 4, 133, 77, 133, 34, -4,
	89, 4, -69, 133, -77, 78, 66, -78, -18, -2,
	123, 94, -27, 57, -26, 123, 81, 74, 12, 133,
	133, 136, -80, -6, 133, -79, -80, 49, 91, -7,
	135, 136, -8, -26, -58, -28, 55, 54, 33, -26,
	-25, 27, -64, -65, -69, 133, 133, -18, 58, -13,
	-26, 133, 133, -14, 72, 123, -29, 133, -26,
}

var plpgsqlDef = [...]int16{
	145, -2, 2, 0, 5, 0, 1, 3, 45, 6,
	8, 0, 153, 154, 155, 156, 157, 158, 159, 160,
	161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
	171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
	201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
	211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
	221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
	231, 232, 233, 234, 235, 236, 237, 238, -2, 7,
	10, 11, 12, -2, 29, 30, 146, 0, 46, 133,
	0, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 118, 143, 91, 0, 149, 108,
	0, 0, 111, 113, 115, 116, 117, 119, 71, 74,
	74, 77, 0, 123, 123, 0, 0, 130, 130, 0,
	106, 107, 9, 0, 0, 0, 32, 0, 18, 149,
	0, 47, 142, 43, 44, 0, 0, 45, 144, 0,
	0, 0, 150, 109, 110, 0, 0, 0, 0, 78,
	79, 141, 0, 0, 0, 131, 125, 0, 0, 0,
	0, 34, 33, 0, 20, 17, 4, 134, 136, 0,
	0, 45, 95, 93, 143, 97, -2, 45, 45, 0,
	101, 103, 105, 151, 142, 112, 72, 73, 0, 0,
	0, 0, 124, 126, 128, 0, 127, -2, 37, 0,
	0, 27, 28, 0, 0, 135, 0, 139, 140, 75,
	-2, 0, 92, 45, 0, 0, 98, 99, 100, 0,
	0, 0, 0, 81, 0, 120, 121, 122, 129, 0,
	0, 35, 36, 14, 19, 25, 26, 0, 22, 0,
	45, 0, 88, 0, -2, 45, 149, 0, 104, 152,
	76, 0, 0, 13, 39, 0, 41, 42, 38, 0,
	21, 0, 24, -2, 138, 0, 143, 45, 0, -2,
	0, 144, 80, 82, 83, 40, 15, 23, 0, 0,
	-2, 90, 114, 45, 0, 45, 102, 85, -2,
}

var plpgsqlTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	134, 135, 3, 3, 136, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 133,
	3, 137,
}

var plpgsqlTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132,
}

var plpgsqlTok3 = [...]int8{
	0,
}

var plpgsqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	plpgsqlDebug        = 0
	plpgsqlErrorVerbose = false
)

type plpgsqlLexer interface {
	Lex(lval *plpgsqlSymType) int
	Error(s string)
}

type plpgsqlParser interface {
	Parse(plpgsqlLexer) int
	Lookahead() int
}

type plpgsqlParserImpl struct {
	lval  plpgsqlSymType
	stack [plpgsqlInitialStackSize]plpgsqlSymType
	char  int
}

func (p *plpgsqlParserImpl) Lookahead() int {
	return p.char
}

func plpgsqlNewParser() plpgsqlParser {
	return &plpgsqlParserImpl{}
}

const plpgsqlFlag = -1000

func plpgsqlTokname(c int) string {
	if c >= 1 && c-1 < len(plpgsqlToknames) {
		if plpgsqlToknames[c-1] != "" {
			return plpgsqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func plpgsqlStatname(s int) string {
	if s >= 0 && s < len(plpgsqlStatenames) {
		if plpgsqlStatenames[s] != "" {
			return plpgsqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func plpgsqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !plpgsqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range plpgsqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + plpgsqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(plpgsqlPact[state])
	for tok := TOKSTART; tok-1 < len(plpgsqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < plpgsqlLast && int(plpgsqlChk[int(plpgsqlAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if plpgsqlDef[state] == -2 {
		i := 0
		for plpgsqlExca[i] != -1 || int(plpgsqlExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; plpgsqlExca[i] >= 0; i += 2 {
			tok := int(plpgsqlExca[i])
			if tok < TOKSTART || plpgsqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if plpgsqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += plpgsqlTokname(tok)
	}
	return res
}

func plpgsqllex1(lex plpgsqlLexer, lval *plpgsqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(plpgsqlTok1[0])
		goto out
	}
	if char < len(plpgsqlTok1) {
		token = int(plpgsqlTok1[char])
		goto out
	}
	if char >= plpgsqlPrivate {
		if char < plpgsqlPrivate+len(plpgsqlTok2) {
			token = int(plpgsqlTok2[char-plpgsqlPrivate])
			goto out
		}
	}
	for i := 0; i < len(plpgsqlTok3); i += 2 {
		token = int(plpgsqlTok3[i+0])
		if token == char {
			token = int(plpgsqlTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(plpgsqlTok2[1]) /* unknown char */
	}
	if plpgsqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", plpgsqlTokname(token), uint(char))
	}
	return char, token
}

func plpgsqlParse(plpgsqllex plpgsqlLexer) int {
	return plpgsqlNewParser().Parse(plpgsqllex)
}

func (plpgsqlrcvr *plpgsqlParserImpl) Parse(plpgsqllex plpgsqlLexer) int {
	var plpgsqln int
	var plpgsqlVAL plpgsqlSymType
	var plpgsqlDollar []plpgsqlSymType
	_ = plpgsqlDollar // silence set and not used
	plpgsqlS := plpgsqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	plpgsqlstate := 0
	plpgsqlrcvr.char = -1
	plpgsqltoken := -1 // plpgsqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		plpgsqlstate = -1
		plpgsqlrcvr.char = -1
		plpgsqltoken = -1
	}()
	plpgsqlp := -1
	goto plpgsqlstack

ret0:
	return 0

ret1:
	return 1

plpgsqlstack:
	/* put a state and value onto the stack */
	if plpgsqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", plpgsqlTokname(plpgsqltoken), plpgsqlStatname(plpgsqlstate))
	}

	plpgsqlp++
	if plpgsqlp >= len(plpgsqlS) {
		nyys := make([]plpgsqlSymType, len(plpgsqlS)*2)
		copy(nyys, plpgsqlS)
		plpgsqlS = nyys
	}
	plpgsqlS[plpgsqlp] = plpgsqlVAL
	plpgsqlS[plpgsqlp].yys = plpgsqlstate

plpgsqlnewstate:
	plpgsqln = int(plpgsqlPact[plpgsqlstate])
	if plpgsqln <= plpgsqlFlag {
		goto plpgsqldefault /* simple state */
	}
	if plpgsqlrcvr.char < 0 {
		plpgsqlrcvr.char, plpgsqltoken = plpgsqllex1(plpgsqllex, &plpgsqlrcvr.lval)
	}
	plpgsqln += plpgsqltoken
	if plpgsqln < 0 || plpgsqln >= plpgsqlLast {
		goto plpgsqldefault
	}
	plpgsqln = int(plpgsqlAct[plpgsqln])
	if int(plpgsqlChk[plpgsqln]) == plpgsqltoken { /* valid shift */
		plpgsqlrcvr.char = -1
		plpgsqltoken = -1
		plpgsqlVAL = plpgsqlrcvr.lval
		plpgsqlstate = plpgsqln
		if Errflag > 0 {
			Errflag--
		}
		goto plpgsqlstack
	}

plpgsqldefault:
	/* default state action */
	plpgsqln = int(plpgsqlDef[plpgsqlstate])
	if plpgsqln == -2 {
		if plpgsqlrcvr.char < 0 {
			plpgsqlrcvr.char, plpgsqltoken = plpgsqllex1(plpgsqllex, &plpgsqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if plpgsqlExca[xi+0] == -1 && int(plpgsqlExca[xi+1]) == plpgsqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			plpgsqln = int(plpgsqlExca[xi+0])
			if plpgsqln < 0 || plpgsqln == plpgsqltoken {
				break
			}
		}
		plpgsqln = int(plpgsqlExca[xi+1])
		if plpgsqln < 0 {
			goto ret0
		}
	}
	if plpgsqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			plpgsqllex.Error(plpgsqlErrorMessage(plpgsqlstate, plpgsqltoken))
			Nerrs++
			if plpgsqlDebug >= 1 {
				__yyfmt__.Printf("%s", plpgsqlStatname(plpgsqlstate))
				__yyfmt__.Printf(" saw %s\n", plpgsqlTokname(plpgsqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for plpgsqlp >= 0 {
				plpgsqln = int(plpgsqlPact[plpgsqlS[plpgsqlp].yys]) + plpgsqlErrCode
				if plpgsqln >= 0 && plpgsqln < plpgsqlLast {
					plpgsqlstate = int(plpgsqlAct[plpgsqln]) /* simulate a shift of "error" */
					if int(plpgsqlChk[plpgsqlstate]) == plpgsqlErrCode {
						goto plpgsqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if plpgsqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", plpgsqlS[plpgsqlp].yys)
				}
				plpgsqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if plpgsqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", plpgsqlTokname(plpgsqltoken))
			}
			if plpgsqltoken == plpgsqlEofCode {
				goto ret1
			}
			plpgsqlrcvr.char = -1
			plpgsqltoken = -1
			goto plpgsqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production plpgsqln */
	if plpgsqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", plpgsqln, plpgsqlStatname(plpgsqlstate))
	}

	plpgsqlnt := plpgsqln
	plpgsqlpt := plpgsqlp
	_ = plpgsqlpt // guard against "declared and not used"

	plpgsqlp -= int(plpgsqlR2[plpgsqln])
	// plpgsqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if plpgsqlp+1 >= len(plpgsqlS) {
		nyys := make([]plpgsqlSymType, len(plpgsqlS)*2)
		copy(nyys, plpgsqlS)
		plpgsqlS = nyys
	}
	plpgsqlVAL = plpgsqlS[plpgsqlp+1]

	/* consult goto table to find next state */
	plpgsqln = int(plpgsqlR1[plpgsqln])
	plpgsqlg := int(plpgsqlPgo[plpgsqln])
	plpgsqlj := plpgsqlg + plpgsqlS[plpgsqlp].yys + 1

	if plpgsqlj >= plpgsqlLast {
		plpgsqlstate = int(plpgsqlAct[plpgsqlg])
	} else {
		plpgsqlstate = int(plpgsqlAct[plpgsqlj])
		if int(plpgsqlChk[plpgsqlstate]) != -plpgsqln {
			plpgsqlstate = int(plpgsqlAct[plpgsqlg])
		}
	}
	// dummy call; replaced with literal code
	switch plpgsqlnt {

	case 1:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:319
		{
			plpgsqllex.(*lexer).SetStmt(plpgsqlDollar[1].union.plpgsqlStatement())
		}
	case 4:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-6 : plpgsqlpt+1]
//line plpgsql-gen.y:328
		{

			header := plpgsqlDollar[1].union.plpgsqlDeclareheader()
			stmtBlock := &plpgsqltree.PLpgSQLStmtBlock{
				Label: header.label,
				Body:  plpgsqlDollar[3].union.plpgsqlStatements(),
			}
			if header.initVars != nil {
				stmtBlock.InitVars = header.initVars
			}
			plpgsqlVAL.union.val = stmtBlock
		}
	case 5:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:343
		{
			plpgsqlVAL.union.val = &declareHeader{label: plpgsqlDollar[1].str}
		}
	case 6:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:347
		{
			plpgsqlVAL.union.val = &declareHeader{
				label:    plpgsqlDollar[1].str,
				initVars: make([]plpgsqltree.PLpgSQLVariable, 0),
			}
		}
	case 7:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:354
		{
			h := &declareHeader{
				label: plpgsqlDollar[1].str,

				initVars: make([]plpgsqltree.PLpgSQLVariable, 1),
			}
			h.initVars = append(h.initVars, nil)
			plpgsqlVAL.union.val = h
		}
	case 8:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:369
		{
		}
	case 12:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:379
		{

		}
	case 13:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-6 : plpgsqlpt+1]
//line plpgsql-gen.y:391
		{
		}
	case 14:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-5 : plpgsqlpt+1]
//line plpgsql-gen.y:394
		{
		}
	case 15:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-7 : plpgsqlpt+1]
//line plpgsql-gen.y:397
		{
		}
	case 16:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:402
		{
			fmt.Println("plpgsqllex.(*lexer).pos in opt_scrollable empty", plpgsqllex.(*lexer).lastPos)
		}
	case 17:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:406
		{
			fmt.Println("plpgsqllex.(*lexer).pos in opt_scrollable no_scroll", plpgsqllex.(*lexer).lastPos)
		}
	case 18:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:410
		{
			fmt.Println("plpgsqllex.(*lexer).pos in opt_scrollable scroll", plpgsqllex.(*lexer).lastPos)
		}
	case 19:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:416
		{
			plpgsqllex.(*lexer).ReadSqlExpressionStr(';')
		}
	case 20:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:422
		{
		}
	case 21:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:425
		{
		}
	case 22:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:430
		{
		}
	case 23:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:433
		{
		}
	case 24:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:438
		{
		}
	case 27:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:447
		{
		}
	case 28:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:450
		{
		}
	case 29:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:455
		{
		}
	case 30:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:458
		{
		}
	case 31:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:463
		{
		}
	case 32:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:465
		{
		}
	case 33:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:470
		{
		}
	case 34:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:475
		{
		}
	case 35:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:477
		{
		}
	case 36:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:480
		{
		}
	case 37:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:485
		{
		}
	case 38:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:487
		{
		}
	case 39:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:491
		{
		}
	case 40:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:493
		{
		}
	case 41:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:497
		{
			plpgsqllex.(*lexer).ReadSqlExpressionStr(';')
		}
	case 42:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:501
		{
			plpgsqllex.(*lexer).ReadSqlExpressionStr(';')
		}
	case 45:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:516
		{
			plpgsqlVAL.union.val = []plpgsqltree.PLpgSQLStatement{}
		}
	case 46:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:520
		{
			stmts := plpgsqlDollar[1].union.plpgsqlStatements()
			stmts = append(stmts, plpgsqlDollar[2].union.plpgsqlStatement())
			plpgsqlVAL.union.val = stmts
		}
	case 47:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:528
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.plpgsqlStmtBlock()
		}
	case 48:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:532
		{
		}
	case 49:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:534
		{
		}
	case 50:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:536
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.plpgsqlStatement()
		}
	case 51:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:540
		{
		}
	case 52:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:542
		{
		}
	case 53:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:544
		{
		}
	case 54:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:546
		{
		}
	case 55:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:548
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.plpgsqlStatement()
		}
	case 56:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:552
		{
		}
	case 57:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:554
		{
		}
	case 58:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:556
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.plpgsqlStatement()
		}
	case 59:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:560
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.plpgsqlStatement()
		}
	case 60:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:564
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.plpgsqlStatement()
		}
	case 61:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:568
		{
		}
	case 62:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:570
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.plpgsqlStatement()
		}
	case 63:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:574
		{
		}
	case 64:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:576
		{
		}
	case 65:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:578
		{
		}
	case 66:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:580
		{
		}
	case 67:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:582
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.plpgsqlStatement()
		}
	case 68:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:586
		{
		}
	case 69:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:588
		{
		}
	case 70:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:590
		{
		}
	case 71:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:594
		{
		}
	case 72:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:599
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtCall{IsCall: true}
		}
	case 73:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:603
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtCall{IsCall: false}
		}
	case 74:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:608
		{
			plpgsqllex.(*lexer).ReadSqlExpressionStr(';')
		}
	case 75:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:614
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtAssign{
				Var:   plpgsqlDollar[1].str,
				Value: plpgsqlDollar[3].str,
			}
		}
	case 76:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-5 : plpgsqlpt+1]
//line plpgsql-gen.y:623
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtGetDiag{
				IsStacked: plpgsqlDollar[2].union.bool(),
				DiagItems: plpgsqlDollar[4].union.pLpgSQLStmtGetDiagItemList(),
			}

		}
	case 77:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:633
		{
			plpgsqlVAL.union.val = false
		}
	case 78:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:637
		{
			plpgsqlVAL.union.val = false
		}
	case 79:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:641
		{
			plpgsqlVAL.union.val = true
		}
	case 80:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:647
		{
			plpgsqlVAL.union.val = append(plpgsqlDollar[1].union.pLpgSQLStmtGetDiagItemList(), plpgsqlDollar[3].union.pLpgSQLStmtGetDiagItem())
		}
	case 81:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:651
		{
			plpgsqlVAL.union.val = plpgsqltree.PLpgSQLStmtGetDiagItemList{plpgsqlDollar[1].union.pLpgSQLStmtGetDiagItem()}
		}
	case 82:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:657
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtGetDiagItem{
				Kind:       plpgsqlDollar[3].union.pLpgSQLGetDiagKind(),
				TargetName: plpgsqlDollar[1].str,
			}
		}
	case 83:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:666
		{
			switch plpgsqlDollar[1].str {
			case "row_count":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagRowCount
			case "pg_context":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagContext
			case "pg_exception_detail":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagErrorDetail
			case "pg_exception_hint":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagErrorHint
			case "pg_exception_context":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagErrorContext
			case "column_name":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagColumnName
			case "constraint_name":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagConstraintName
			case "pg_datatype_name":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagDatatypeName
			case "message_text":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagMessageText
			case "table_name":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagTableName
			case "schema_name":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagSchemaName
			case "returned_sqlstate":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagReturnedSqlstate
			default:

				setErr(plpgsqllex, errors.Newf("unrecognized GET DIAGNOSTICS item: %s", redact.Safe(plpgsqlDollar[1].str)))
			}
		}
	case 84:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:703
		{
		}
	case 85:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-9 : plpgsqlpt+1]
//line plpgsql-gen.y:708
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtIf{
				Condition:  plpgsqlDollar[2].str,
				ThenBody:   plpgsqlDollar[4].union.plpgsqlStatements(),
				ElseIfList: plpgsqlDollar[5].union.pLpgSQLStmtIfElseIfArmList(),
				ElseBody:   plpgsqlDollar[6].union.plpgsqlStatements(),
			}
		}
	case 86:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:719
		{
			plpgsqlVAL.union.val = []*plpgsqltree.PLpgSQLStmtIfElseIfArm{}
		}
	case 87:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-5 : plpgsqlpt+1]
//line plpgsql-gen.y:723
		{
			newStmt := &plpgsqltree.PLpgSQLStmtIfElseIfArm{
				Condition: plpgsqlDollar[3].str,
				Stmts:     plpgsqlDollar[5].union.plpgsqlStatements(),
			}
			plpgsqlVAL.union.val = append(plpgsqlDollar[1].union.pLpgSQLStmtIfElseIfArmList(), newStmt)
		}
	case 88:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:733
		{
			plpgsqlVAL.union.val = []plpgsqltree.PLpgSQLStatement{}
		}
	case 89:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:737
		{
			plpgsqlVAL.union.val = plpgsqlDollar[2].union.plpgsqlStatements()
		}
	case 90:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-7 : plpgsqlpt+1]
//line plpgsql-gen.y:743
		{
			expr := &plpgsqltree.PLpgSQLStmtCase{
				TestExpr:     plpgsqlDollar[2].str,
				CaseWhenList: plpgsqlDollar[3].union.plpgsqlStmtCaseWhenArms(),
			}
			if plpgsqlDollar[4].union.val != nil {
				expr.HaveElse = true
				expr.ElseStmts = plpgsqlDollar[4].union.plpgsqlStatements()
			}
			plpgsqlVAL.union.val = expr
		}
	case 91:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:757
		{
			expr := ""
			tok := plpgsqllex.(*lexer).Peek()
			if tok.id != WHEN {
				expr = plpgsqllex.(*lexer).ReadSqlExpressionStr(WHEN)
			}
			plpgsqlVAL.str = expr
		}
	case 92:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:768
		{
			stmts := plpgsqlDollar[1].union.plpgsqlStmtCaseWhenArms()
			stmts = append(stmts, plpgsqlDollar[2].union.plpgsqlStmtCaseWhenArm())
			plpgsqlVAL.union.val = stmts
		}
	case 93:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:774
		{
			stmts := []*plpgsqltree.PLpgSQLStmtCaseWhenArm{}
			stmts = append(stmts, plpgsqlDollar[1].union.plpgsqlStmtCaseWhenArm())
			plpgsqlVAL.union.val = stmts
		}
	case 94:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:782
		{
			expr := &plpgsqltree.PLpgSQLStmtCaseWhenArm{
				Expr:  plpgsqlDollar[2].str,
				Stmts: plpgsqlDollar[4].union.plpgsqlStatements(),
			}
			plpgsqlVAL.union.val = expr
		}
	case 95:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:792
		{
			plpgsqlVAL.union.val = nil
		}
	case 96:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:796
		{
			plpgsqlVAL.union.val = plpgsqlDollar[2].union.plpgsqlStatements()
		}
	case 97:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:802
		{
		}
	case 98:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:807
		{
		}
	case 99:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:812
		{
		}
	case 100:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:818
		{
		}
	case 101:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:841
		{
		}
	case 102:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-8 : plpgsqlpt+1]
//line plpgsql-gen.y:846
		{
		}
	case 103:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:851
		{
		}
	case 104:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:854
		{
		}
	case 105:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:859
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtExit{}
		}
	case 106:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:865
		{
		}
	case 107:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:868
		{
		}
	case 108:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:879
		{
		}
	case 109:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:882
		{
		}
	case 110:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:884
		{
		}
	case 111:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:887
		{
		}
	case 112:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:892
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtAssert{}
		}
	case 113:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:898
		{
			_, terminator := plpgsqllex.(*lexer).ReadSqlExpressionStr2(',', ';')
			if terminator == ',' {
				plpgsqllex.(*lexer).ReadSqlExpressionStr(';')
			}
		}
	case 114:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-5 : plpgsqlpt+1]
//line plpgsql-gen.y:906
		{
		}
	case 115:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:912
		{
			plpgsqlVAL.union.val = plpgsqllex.(*lexer).MakeExecSqlStmt(IMPORT)
		}
	case 116:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:916
		{
			plpgsqlVAL.union.val = plpgsqllex.(*lexer).MakeExecSqlStmt(INSERT)
		}
	case 117:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:920
		{
			plpgsqlVAL.union.val = plpgsqllex.(*lexer).MakeExecSqlStmt(MERGE)
		}
	case 118:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:924
		{
			plpgsqlVAL.union.val = plpgsqllex.(*lexer).MakeExecSqlStmt(IDENT)
		}
	case 119:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:930
		{
			plpgsqlVAL.union.val = plpgsqllex.(*lexer).MakeDynamicExecuteStmt()
		}
	case 120:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:937
		{
			openCursorStmt := plpgsqlDollar[3].union.pLpgSQLStmtOpen()
			openCursorStmt.CursorName = plpgsqlDollar[2].str
			plpgsqlVAL.union.val = openCursorStmt
		}
	case 121:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:945
		{
		}
	case 122:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:950
		{
		}
	case 123:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:955
		{
		}
	case 124:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:960
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtClose{}
		}
	case 125:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:966
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtNull{}
		}
	case 126:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:972
		{
		}
	case 127:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:977
		{
		}
	case 128:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:983
		{
		}
	case 129:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:985
		{
		}
	case 130:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:987
		{
		}
	case 131:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:991
		{
		}
	case 132:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:995
		{
		}
	case 133:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:997
		{
		}
	case 134:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1000
		{
		}
	case 135:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1005
		{
		}
	case 136:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1008
		{
		}
	case 137:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:1013
		{
		}
	case 138:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1018
		{
		}
	case 139:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1021
		{
		}
	case 140:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1026
		{
		}
	case 141:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1031
		{
			plpgsqlVAL.union.val = plpgsqllex.(*lexer).ProcessForOpenCursor(true)
		}
	case 142:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1036
		{
			plpgsqlVAL.str = plpgsqllex.(*lexer).ReadSqlExpressionStr(';')
		}
	case 143:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1042
		{
			plpgsqlVAL.str = plpgsqllex.(*lexer).ReadSqlExpressionStr(THEN)
		}
	case 144:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1048
		{
		}
	case 145:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1052
		{
			plpgsqlVAL.str = ""
		}
	case 146:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1056
		{
			plpgsqlVAL.str = plpgsqlDollar[2].str
		}
	case 147:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1062
		{
		}
	case 148:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1065
		{
		}
	case 149:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1070
		{
		}
	case 150:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1073
		{
		}
	case 151:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1078
		{
		}
	case 152:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1080
		{
		}
	case 153:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1088
		{
		}
	case 154:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1091
		{
		}
	}
	goto plpgsqlstack /* stack new state and value */
}
