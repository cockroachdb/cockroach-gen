// Code generated by goyacc. DO NOT EDIT.
// GENERATED FILE DO NOT EDIT
// Code generated by goyacc -p plpgsql -o plpgsql.go.tmp plpgsql-gen.y. DO NOT EDIT.

//line plpgsql-gen.y:2
package parser

import (
	"fmt"
	__yyfmt__ "fmt"

	"github.com/cockroachdb/cockroach/pkg/sql/plpgsql/parser/lexbase"
	"github.com/cockroachdb/cockroach/pkg/sql/scanner"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/plpgsqltree"
	"github.com/cockroachdb/cockroach/pkg/sql/sem/tree"
	"github.com/cockroachdb/errors"
	"github.com/cockroachdb/redact"
) //line plpgsql-gen.y:2

//line plpgsql-gen.y:17
func setErr(plpgsqllex plpgsqlLexer, err error) int {
	plpgsqllex.(*lexer).setErr(err)
	return 1
}

func unimplemented(plpgsqllex plpgsqlLexer, feature string) int {
	plpgsqllex.(*lexer).Unimplemented(feature)
	return 1
}

var _ scanner.ScanSymType = &plpgsqlSymType{}

func (s *plpgsqlSymType) ID() int32 {
	return s.id
}

func (s *plpgsqlSymType) SetID(id int32) {
	s.id = id
}

func (s *plpgsqlSymType) Pos() int32 {
	return s.pos
}

func (s *plpgsqlSymType) SetPos(pos int32) {
	s.pos = pos
}

func (s *plpgsqlSymType) Str() string {
	return s.str
}

func (s *plpgsqlSymType) SetStr(str string) {
	s.str = str
}

func (s *plpgsqlSymType) UnionVal() interface{} {
	return s.union.val
}

func (s *plpgsqlSymType) SetUnionVal(val interface{}) {
	s.union.val = val
}

func (s *plpgsqlSymType) plpgsqlScanSymType() {}

type plpgsqlSymUnion struct {
	val interface{}
}

func (u *plpgsqlSymUnion) plpgsqlStmtBlock() *plpgsqltree.PLpgSQLStmtBlock {
	return u.val.(*plpgsqltree.PLpgSQLStmtBlock)
}

func (u *plpgsqlSymUnion) plpgsqlStmtCaseWhenArm() *plpgsqltree.PLpgSQLStmtCaseWhenArm {
	return u.val.(*plpgsqltree.PLpgSQLStmtCaseWhenArm)
}

func (u *plpgsqlSymUnion) plpgsqlStmtCaseWhenArms() []*plpgsqltree.PLpgSQLStmtCaseWhenArm {
	return u.val.([]*plpgsqltree.PLpgSQLStmtCaseWhenArm)
}

func (u *plpgsqlSymUnion) plpgsqlStatement() plpgsqltree.PLpgSQLStatement {
	return u.val.(plpgsqltree.PLpgSQLStatement)
}

func (u *plpgsqlSymUnion) plpgsqlDeclareheader() *declareHeader {
	return u.val.(*declareHeader)
}

func (u *plpgsqlSymUnion) plpgsqlStatements() []plpgsqltree.PLpgSQLStatement {
	return u.val.([]plpgsqltree.PLpgSQLStatement)
}

func (u *plpgsqlSymUnion) int32() int32 {
	return u.val.(int32)
}

func (u *plpgsqlSymUnion) uint32() uint32 {
	return u.val.(uint32)
}

func (u *plpgsqlSymUnion) bool() bool {
	return u.val.(bool)
}

func (u *plpgsqlSymUnion) numVal() *tree.NumVal {
	return u.val.(*tree.NumVal)
}

func (u *plpgsqlSymUnion) pLpgSQLGetDiagKind() plpgsqltree.PLpgSQLGetDiagKind {
	return u.val.(plpgsqltree.PLpgSQLGetDiagKind)
}

func (u *plpgsqlSymUnion) pLpgSQLStmtGetDiagItem() *plpgsqltree.PLpgSQLStmtGetDiagItem {
	return u.val.(*plpgsqltree.PLpgSQLStmtGetDiagItem)
}

func (u *plpgsqlSymUnion) pLpgSQLStmtGetDiagItemList() plpgsqltree.PLpgSQLStmtGetDiagItemList {
	return u.val.(plpgsqltree.PLpgSQLStmtGetDiagItemList)
}

func (u *plpgsqlSymUnion) pLpgSQLStmtIfElseIfArmList() []*plpgsqltree.PLpgSQLStmtIfElseIfArm {
	return u.val.([]*plpgsqltree.PLpgSQLStmtIfElseIfArm)
}

func (u *plpgsqlSymUnion) pLpgSQLStmtOpen() *plpgsqltree.PLpgSQLStmtOpen {
	return u.val.(*plpgsqltree.PLpgSQLStmtOpen)
}

//line plpgsql-gen.y:264
type plpgsqlSymType struct {
	yys   int
	id    int32
	pos   int32
	str   string
	union plpgsqlSymUnion
}

const IDENT = lexbase.IDENT
const UIDENT = lexbase.UIDENT
const FCONST = lexbase.FCONST
const SCONST = lexbase.SCONST
const USCONST = lexbase.USCONST
const BCONST = lexbase.BCONST
const XCONST = lexbase.XCONST
const Op = 57353
const ICONST = lexbase.ICONST
const PARAM = lexbase.PARAM
const TYPECAST = lexbase.TYPECAST
const DOT_DOT = lexbase.DOT_DOT
const COLON_EQUALS = lexbase.COLON_EQUALS
const EQUALS_GREATER = lexbase.EQUALS_GREATER
const LESS_EQUALS = lexbase.LESS_EQUALS
const GREATER_EQUALS = lexbase.GREATER_EQUALS
const NOT_EQUALS = lexbase.NOT_EQUALS
const LESS_LESS = lexbase.LESS_LESS
const GREATER_GREATER = lexbase.GREATER_GREATER
const ABSOLUTE = lexbase.ABSOLUTE
const ALIAS = lexbase.ALIAS
const ALL = lexbase.ALL
const AND = lexbase.AND
const ARRAY = lexbase.ARRAY
const ASSERT = lexbase.ASSERT
const BACKWARD = lexbase.BACKWARD
const BEGIN = lexbase.BEGIN
const BY = lexbase.BY
const CALL = lexbase.CALL
const CASE = lexbase.CASE
const CHAIN = lexbase.CHAIN
const CLOSE = lexbase.CLOSE
const COLLATE = lexbase.COLLATE
const COLUMN = lexbase.COLUMN
const COLUMN_NAME = lexbase.COLUMN_NAME
const COMMIT = lexbase.COMMIT
const CONSTANT = lexbase.CONSTANT
const CONSTRAINT = lexbase.CONSTRAINT
const CONSTRAINT_NAME = lexbase.CONSTRAINT_NAME
const CONTINUE = lexbase.CONTINUE
const CURRENT = lexbase.CURRENT
const CURSOR = lexbase.CURSOR
const DATATYPE = lexbase.DATATYPE
const DEBUG = lexbase.DEBUG
const DECLARE = lexbase.DECLARE
const DEFAULT = lexbase.DEFAULT
const DETAIL = lexbase.DETAIL
const DIAGNOSTICS = lexbase.DIAGNOSTICS
const DO = lexbase.DO
const DUMP = lexbase.DUMP
const ELSE = lexbase.ELSE
const ELSIF = lexbase.ELSIF
const END = lexbase.END
const END_CASE = lexbase.END_CASE
const END_IF = lexbase.END_IF
const ERRCODE = lexbase.ERRCODE
const ERROR = lexbase.ERROR
const EXCEPTION = lexbase.EXCEPTION
const EXECUTE = lexbase.EXECUTE
const EXIT = lexbase.EXIT
const FETCH = lexbase.FETCH
const FIRST = lexbase.FIRST
const FOR = lexbase.FOR
const FOREACH = lexbase.FOREACH
const FORWARD = lexbase.FORWARD
const FROM = lexbase.FROM
const GET = lexbase.GET
const HINT = lexbase.HINT
const IF = lexbase.IF
const IMPORT = lexbase.IMPORT
const IN = lexbase.IN
const INFO = lexbase.INFO
const INSERT = lexbase.INSERT
const INTO = lexbase.INTO
const IS = lexbase.IS
const LAST = lexbase.LAST
const LOG = lexbase.LOG
const LOOP = lexbase.LOOP
const MERGE = lexbase.MERGE
const MESSAGE = lexbase.MESSAGE
const MESSAGE_TEXT = lexbase.MESSAGE_TEXT
const MOVE = lexbase.MOVE
const NEXT = lexbase.NEXT
const NO = lexbase.NO
const NO_SCROLL = lexbase.NO_SCROLL
const NOT = lexbase.NOT
const NOTICE = lexbase.NOTICE
const NULL = lexbase.NULL
const OPEN = lexbase.OPEN
const OPTION = lexbase.OPTION
const OR = lexbase.OR
const PERFORM = lexbase.PERFORM
const PG_CONTEXT = lexbase.PG_CONTEXT
const PG_DATATYPE_NAME = lexbase.PG_DATATYPE_NAME
const PG_EXCEPTION_CONTEXT = lexbase.PG_EXCEPTION_CONTEXT
const PG_EXCEPTION_DETAIL = lexbase.PG_EXCEPTION_DETAIL
const PG_EXCEPTION_HINT = lexbase.PG_EXCEPTION_HINT
const PRINT_STRICT_PARAMS = lexbase.PRINT_STRICT_PARAMS
const PRIOR = lexbase.PRIOR
const QUERY = lexbase.QUERY
const RAISE = lexbase.RAISE
const RELATIVE = lexbase.RELATIVE
const RETURN = lexbase.RETURN
const RETURN_NEXT = lexbase.RETURN_NEXT
const RETURN_QUERY = lexbase.RETURN_QUERY
const RETURNED_SQLSTATE = lexbase.RETURNED_SQLSTATE
const REVERSE = lexbase.REVERSE
const ROLLBACK = lexbase.ROLLBACK
const ROW_COUNT = lexbase.ROW_COUNT
const ROWTYPE = lexbase.ROWTYPE
const SCHEMA = lexbase.SCHEMA
const SCHEMA_NAME = lexbase.SCHEMA_NAME
const SCROLL = lexbase.SCROLL
const SLICE = lexbase.SLICE
const SQLSTATE = lexbase.SQLSTATE
const STACKED = lexbase.STACKED
const STRICT = lexbase.STRICT
const TABLE = lexbase.TABLE
const TABLE_NAME = lexbase.TABLE_NAME
const THEN = lexbase.THEN
const TO = lexbase.TO
const TYPE = lexbase.TYPE
const USE_COLUMN = lexbase.USE_COLUMN
const USE_VARIABLE = lexbase.USE_VARIABLE
const USING = lexbase.USING
const VARIABLE_CONFLICT = lexbase.VARIABLE_CONFLICT
const WARNING = lexbase.WARNING
const WHEN = lexbase.WHEN
const WHILE = lexbase.WHILE

var plpgsqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"UIDENT",
	"FCONST",
	"SCONST",
	"USCONST",
	"BCONST",
	"XCONST",
	"Op",
	"ICONST",
	"PARAM",
	"TYPECAST",
	"DOT_DOT",
	"COLON_EQUALS",
	"EQUALS_GREATER",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"LESS_LESS",
	"GREATER_GREATER",
	"ABSOLUTE",
	"ALIAS",
	"ALL",
	"AND",
	"ARRAY",
	"ASSERT",
	"BACKWARD",
	"BEGIN",
	"BY",
	"CALL",
	"CASE",
	"CHAIN",
	"CLOSE",
	"COLLATE",
	"COLUMN",
	"COLUMN_NAME",
	"COMMIT",
	"CONSTANT",
	"CONSTRAINT",
	"CONSTRAINT_NAME",
	"CONTINUE",
	"CURRENT",
	"CURSOR",
	"DATATYPE",
	"DEBUG",
	"DECLARE",
	"DEFAULT",
	"DETAIL",
	"DIAGNOSTICS",
	"DO",
	"DUMP",
	"ELSE",
	"ELSIF",
	"END",
	"END_CASE",
	"END_IF",
	"ERRCODE",
	"ERROR",
	"EXCEPTION",
	"EXECUTE",
	"EXIT",
	"FETCH",
	"FIRST",
	"FOR",
	"FOREACH",
	"FORWARD",
	"FROM",
	"GET",
	"HINT",
	"IF",
	"IMPORT",
	"IN",
	"INFO",
	"INSERT",
	"INTO",
	"IS",
	"LAST",
	"LOG",
	"LOOP",
	"MERGE",
	"MESSAGE",
	"MESSAGE_TEXT",
	"MOVE",
	"NEXT",
	"NO",
	"NO_SCROLL",
	"NOT",
	"NOTICE",
	"NULL",
	"OPEN",
	"OPTION",
	"OR",
	"PERFORM",
	"PG_CONTEXT",
	"PG_DATATYPE_NAME",
	"PG_EXCEPTION_CONTEXT",
	"PG_EXCEPTION_DETAIL",
	"PG_EXCEPTION_HINT",
	"PRINT_STRICT_PARAMS",
	"PRIOR",
	"QUERY",
	"RAISE",
	"RELATIVE",
	"RETURN",
	"RETURN_NEXT",
	"RETURN_QUERY",
	"RETURNED_SQLSTATE",
	"REVERSE",
	"ROLLBACK",
	"ROW_COUNT",
	"ROWTYPE",
	"SCHEMA",
	"SCHEMA_NAME",
	"SCROLL",
	"SLICE",
	"SQLSTATE",
	"STACKED",
	"STRICT",
	"TABLE",
	"TABLE_NAME",
	"THEN",
	"TO",
	"TYPE",
	"USE_COLUMN",
	"USE_VARIABLE",
	"USING",
	"VARIABLE_CONFLICT",
	"WARNING",
	"WHEN",
	"WHILE",
	"';'",
	"'('",
	"')'",
	"','",
	"'='",
}

var plpgsqlStatenames = [...]string{}

const plpgsqlEofCode = 1
const plpgsqlErrCode = 2
const plpgsqlInitialStackSize = 16

//line plpgsql-gen.y:1325

//line yacctab:1
var plpgsqlExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 98,
	30, 166,
	48, 166,
	56, 151,
	-2, 168,
	-1, 103,
	45, 16,
	-2, 31,
	-1, 227,
	30, 166,
	48, 166,
	-2, 168,
	-1, 262,
	30, 167,
	48, 167,
	-2, 169,
	-1, 276,
	30, 166,
	48, 166,
	54, 86,
	55, 86,
	58, 86,
	-2, 168,
	-1, 319,
	30, 166,
	48, 166,
	57, 96,
	-2, 168,
	-1, 342,
	30, 166,
	48, 166,
	56, 156,
	131, 156,
	-2, 168,
	-1, 348,
	30, 166,
	48, 166,
	54, 94,
	57, 94,
	131, 94,
	-2, 168,
	-1, 363,
	30, 166,
	48, 166,
	58, 89,
	-2, 168,
	-1, 375,
	30, 166,
	48, 166,
	54, 87,
	55, 87,
	58, 87,
	-2, 168,
}

const plpgsqlPrivate = 57344

const plpgsqlLast = 1309

var plpgsqlAct = [...]int16{
	227, 226, 185, 13, 103, 312, 175, 228, 181, 98,
	172, 297, 182, 105, 290, 272, 224, 219, 11, 212,
	241, 183, 230, 208, 203, 197, 339, 340, 329, 184,
	269, 330, 235, 174, 234, 104, 374, 365, 364, 359,
	358, 324, 307, 301, 299, 289, 179, 180, 288, 275,
	261, 258, 174, 257, 14, 15, 252, 16, 17, 18,
	19, 177, 251, 20, 250, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 102,
	35, 36, 37, 38, 39, 336, 40, 249, 240, 236,
	41, 42, 43, 207, 44, 45, 46, 171, 7, 47,
	220, 48, 49, 105, 50, 225, 51, 52, 279, 53,
	54, 55, 178, 56, 57, 58, 59, 60, 61, 62,
	291, 63, 372, 64, 65, 320, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 196, 91, 92, 173, 315, 93, 94, 95, 186,
	96, 97, 222, 191, 244, 164, 200, 242, 286, 333,
	188, 216, 211, 173, 337, 221, 198, 190, 217, 204,
	304, 166, 210, 100, 314, 225, 259, 187, 321, 326,
	310, 193, 231, 231, 300, 322, 192, 284, 328, 371,
	214, 361, 309, 232, 318, 346, 345, 253, 215, 238,
	327, 169, 245, 246, 247, 248, 10, 264, 267, 302,
	347, 8, 325, 276, 350, 209, 262, 106, 5, 167,
	282, 283, 280, 273, 323, 316, 270, 298, 287, 260,
	278, 201, 213, 256, 255, 206, 194, 202, 110, 2,
	218, 170, 195, 189, 334, 311, 308, 168, 265, 101,
	292, 293, 294, 295, 99, 9, 6, 1, 306, 165,
	356, 296, 199, 105, 313, 277, 223, 271, 243, 107,
	319, 117, 113, 162, 133, 132, 131, 130, 129, 128,
	127, 126, 125, 124, 116, 123, 122, 121, 120, 119,
	118, 115, 114, 112, 111, 108, 344, 317, 239, 331,
	137, 4, 229, 285, 335, 342, 205, 233, 176, 237,
	254, 348, 268, 263, 338, 332, 138, 303, 273, 163,
	349, 343, 3, 341, 0, 357, 351, 352, 353, 354,
	0, 0, 355, 0, 105, 313, 360, 363, 0, 0,
	0, 0, 362, 0, 367, 368, 369, 370, 366, 104,
	0, 0, 0, 0, 0, 0, 0, 0, 373, 0,
	0, 0, 0, 375, 0, 0, 0, 0, 14, 15,
	0, 16, 17, 18, 19, 0, 0, 20, 0, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 0, 35, 36, 37, 38, 39, 0,
	40, 0, 0, 0, 41, 42, 43, 0, 44, 45,
	46, 0, 0, 47, 0, 48, 49, 0, 50, 0,
	51, 52, 0, 53, 54, 55, 0, 56, 57, 58,
	59, 60, 61, 62, 0, 63, 0, 64, 65, 0,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
	86, 87, 88, 89, 90, 12, 91, 92, 0, 0,
	93, 94, 95, 0, 96, 97, 0, 0, 0, 0,
	0, 0, 0, 0, 14, 15, 0, 16, 17, 18,
	19, 0, 0, 20, 0, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 0,
	35, 36, 37, 38, 39, 0, 40, 0, 0, 0,
	41, 42, 43, 0, 44, 45, 46, 0, 0, 47,
	0, 48, 49, 0, 50, 0, 51, 52, 0, 53,
	54, 55, 0, 56, 57, 58, 59, 60, 61, 62,
	0, 63, 0, 64, 65, 0, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	80, 81, 82, 83, 84, 85, 86, 87, 88, 89,
	90, 12, 91, 92, 0, 0, 93, 94, 95, 0,
	96, 97, 0, 0, 0, 0, 0, 0, 0, 0,
	14, 15, 0, 16, 17, 18, 19, 0, 0, 20,
	0, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 0, 35, 36, 37, 38,
	39, 0, 40, 0, 0, 0, 41, 42, 43, 0,
	44, 45, 46, 0, 0, 47, 0, 48, 49, 0,
	50, 0, 51, 52, 0, 53, 54, 55, 0, 56,
	57, 58, 59, 60, 61, 62, 0, 63, 0, 64,
	65, 0, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 88, 274, 90, 305, 91, 92,
	0, 0, 93, 94, 95, 0, 96, 97, 0, 0,
	0, 0, 0, 0, 0, 0, 14, 15, 0, 16,
	17, 18, 19, 0, 0, 20, 0, 21, 22, 23,
	24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
	34, 0, 35, 36, 37, 38, 39, 0, 40, 0,
	0, 0, 41, 42, 43, 0, 44, 45, 46, 0,
	0, 47, 0, 48, 49, 0, 50, 0, 51, 52,
	0, 53, 54, 55, 0, 56, 57, 58, 59, 60,
	61, 62, 0, 63, 0, 64, 65, 0, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 77,
	78, 79, 80, 81, 82, 83, 84, 85, 86, 87,
	88, 89, 90, 266, 91, 92, 0, 0, 93, 94,
	95, 0, 96, 97, 0, 0, 0, 0, 0, 0,
	0, 0, 14, 15, 0, 16, 17, 18, 19, 0,
	0, 20, 0, 21, 22, 23, 24, 25, 26, 27,
	28, 29, 30, 31, 32, 33, 34, 0, 35, 36,
	37, 38, 39, 0, 40, 0, 0, 0, 41, 42,
	43, 0, 44, 45, 46, 0, 0, 47, 0, 48,
	49, 0, 50, 0, 51, 52, 0, 53, 54, 55,
	0, 56, 57, 58, 59, 60, 61, 62, 0, 63,
	0, 64, 65, 0, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 0,
	91, 92, 0, 0, 93, 94, 95, 0, 96, 97,
	14, 15, 0, 16, 17, 18, 19, 0, 0, 20,
	0, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 31, 32, 33, 34, 0, 35, 36, 37, 38,
	39, 0, 40, 0, 0, 0, 41, 42, 43, 0,
	44, 45, 46, 0, 0, 47, 0, 48, 49, 0,
	50, 0, 51, 52, 0, 53, 54, 55, 0, 56,
	57, 58, 59, 60, 61, 62, 0, 63, 0, 64,
	65, 0, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 77, 78, 79, 80, 81, 82, 83,
	84, 85, 86, 87, 88, 89, 90, 134, 91, 92,
	0, 0, 93, 94, 95, 0, 96, 97, 0, 0,
	0, 0, 0, 0, 159, 0, 0, 0, 0, 0,
	0, 143, 0, 0, 0, 149, 136, 0, 155, 0,
	0, 0, 157, 0, 0, 0, 161, 0, 0, 0,
	0, 0, 0, 0, 0, 150, 0, 0, 0, 281,
	0, 0, 0, 0, 0, 147, 160, 153, 0, 0,
	0, 0, 0, 151, 0, 135, 144, 0, 0, 145,
	0, 0, 0, 0, 134, 146, 0, 0, 154, 0,
	0, 0, 0, 0, 156, 152, 0, 0, 148, 0,
	0, 159, 0, 0, 0, 0, 0, 142, 143, 139,
	140, 141, 149, 136, 158, 155, 0, 0, 0, 157,
	0, 0, 0, 161, 0, 0, 0, 0, 0, 0,
	0, 0, 150, 0, 0, 0, 0, 0, 0, 0,
	0, 109, 147, 160, 153, 0, 0, 0, 0, 0,
	151, 0, 135, 144, 0, 0, 145, 0, 0, 0,
	0, 134, 146, 0, 0, 154, 0, 0, 0, 0,
	0, 156, 152, 0, 0, 148, 0, 0, 159, 0,
	0, 0, 0, 0, 142, 143, 139, 140, 141, 149,
	136, 158, 155, 0, 0, 0, 157, 0, 0, 0,
	161, 0, 0, 0, 0, 0, 0, 0, 0, 150,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 147,
	160, 153, 0, 0, 0, 0, 0, 151, 0, 135,
	144, 0, 0, 145, 0, 0, 0, 0, 0, 146,
	0, 0, 154, 0, 0, 0, 0, 0, 156, 152,
	0, 0, 148, 0, 0, 0, 0, 0, 0, 0,
	0, 142, 0, 139, 140, 141, 0, 0, 158,
}

var plpgsqlPact = [...]int16{
	207, -1000, -35, 191, 168, 471, -1000, -1000, -1000, 31,
	-1000, 205, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1120, 31,
	-1000, -1000, -1000, 141, -1000, -1000, -1000, 155, -1000, -1000,
	-36, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 17, -1000, -1000, -20, 471, 25,
	101, 67, 116, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 122, 243, -1000, -1000, 241, -40, 199, 199, 471,
	-1000, -1000, -1000, 238, 134, 163, -1000, 55, -1000, 471,
	-31, -1000, -1000, -1000, -1000, 39, -26, -1000, -1000, 471,
	471, -99, -1000, -44, -1000, -1000, -1000, 25, -1000, -45,
	160, 160, 160, 160, 160, -46, -69, -71, -77, 156,
	-1000, -1000, -1000, 240, 239, -80, -1000, -1000, -82, 152,
	-83, 204, 181, -1000, 819, -104, -1000, -1000, -31, -1000,
	587, -84, -1000, 54, -1000, -1000, -1000, 1043, -1000, -1000,
	123, -1000, 51, -1000, -1000, -1000, -1000, -1000, -85, -88,
	-1000, -8, -1000, -1000, -1000, -8, -8, -8, -8, -1000,
	-1000, -1000, -1000, 233, -89, 117, -90, -1000, -1000, -1000,
	185, -1000, -1000, 91, 703, -91, -1000, -1000, 124, 355,
	-1000, 61, -1000, -1000, 228, -1000, 1197, 147, -1000, -1000,
	2, 107, -1000, -1000, -1000, 121, 222, -92, -1000, -1000,
	-1000, 139, -1000, -1000, -1000, -1000, -105, -1000, 17, -1000,
	-1000, -1000, -1000, 36, 83, -1000, -1000, -1000, -1000, -1000,
	-1000, -109, -1000, 238, -1000, 587, -1000, 151, 187, 1197,
	-1000, 471, 197, -1000, -1000, 17, 17, 17, 17, -1000,
	233, 927, -1000, -1000, -93, -1000, -1000, -1000, -94, -1000,
	355, -1000, 1197, -1000, 143, -1000, -1000, -95, 1197, -96,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 127, -1, 1197, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -97, -1000, -1000, -1000, 1197,
}

var plpgsqlPgo = [...]int16{
	0, 332, 4, 329, 327, 326, 325, 324, 19, 323,
	322, 320, 2, 319, 6, 7, 318, 317, 316, 5,
	22, 21, 313, 312, 12, 311, 310, 8, 308, 0,
	307, 306, 1, 248, 305, 304, 303, 302, 301, 300,
	299, 298, 297, 296, 295, 294, 293, 292, 291, 290,
	289, 288, 287, 286, 285, 284, 282, 281, 279, 17,
	277, 15, 16, 276, 275, 272, 271, 11, 270, 269,
	24, 23, 3, 267, 266, 265, 264, 183, 259, 258,
	256, 255, 254, 10, 25, 254, 253, 20, 14, 252,
	251, 250, 250,
}

var plpgsqlR1 = [...]int8{
	0, 73, 74, 74, 33, 1, 1, 1, 75, 76,
	76, 77, 77, 78, 78, 78, 69, 69, 69, 7,
	10, 10, 81, 81, 19, 80, 80, 79, 79, 2,
	2, 3, 3, 8, 9, 9, 9, 4, 4, 6,
	6, 82, 82, 83, 83, 29, 29, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 46, 47, 47, 84, 35, 48, 65, 65, 65,
	66, 66, 67, 68, 85, 36, 30, 30, 31, 31,
	56, 16, 63, 63, 62, 64, 64, 37, 38, 45,
	23, 20, 57, 22, 22, 39, 5, 5, 40, 40,
	40, 28, 21, 21, 21, 41, 86, 86, 86, 86,
	86, 86, 87, 87, 87, 87, 88, 88, 88, 88,
	88, 42, 89, 32, 43, 43, 43, 43, 44, 49,
	50, 51, 70, 52, 53, 54, 55, 71, 71, 71,
	18, 58, 90, 58, 91, 91, 59, 60, 60, 61,
	61, 11, 12, 14, 15, 13, 25, 25, 26, 26,
	27, 27, 17, 17, 24, 24, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92, 92, 92, 92, 92,
	92, 92, 92, 92, 92, 92,
}

var plpgsqlR2 = [...]int8{
	0, 2, 0, 1, 6, 1, 2, 3, 1, 2,
	1, 1, 1, 6, 5, 7, 0, 2, 1, 0,
	0, 3, 1, 3, 2, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 0, 2, 2, 0, 2, 1,
	2, 1, 1, 1, 1, 0, 2, 2, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 3, 3, 0, 4, 5, 0, 1, 1,
	3, 1, 3, 1, 1, 9, 0, 5, 0, 2,
	7, 0, 2, 1, 4, 0, 2, 3, 4, 4,
	2, 1, 8, 0, 2, 3, 1, 1, 3, 4,
	4, 0, 1, 1, 2, 3, 0, 3, 3, 3,
	3, 3, 0, 1, 1, 1, 0, 4, 4, 4,
	4, 3, 0, 5, 1, 1, 1, 1, 1, 4,
	4, 4, 0, 3, 2, 3, 3, 2, 3, 0,
	1, 0, 0, 3, 2, 1, 4, 3, 1, 1,
	2, 0, 0, 0, 0, 0, 0, 3, 0, 3,
	0, 1, 1, 3, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}

var plpgsqlChk = [...]int16{
	-1000, -73, -33, -1, -25, 21, -74, 133, 30, -75,
	48, -24, 4, -72, 23, 24, 26, 27, 28, 29,
	32, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 49, 50, 51, 52, 53,
	55, 59, 60, 61, 63, 64, 65, 68, 70, 71,
	73, 75, 76, 78, 79, 80, 82, 83, 84, 85,
	86, 87, 88, 90, 92, 93, 95, 96, 97, 98,
	99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
	109, 110, 111, 112, 113, 114, 115, 116, 117, 118,
	119, 121, 122, 125, 126, 127, 129, 130, -29, -76,
	-77, -78, 48, -2, 4, -72, 22, -58, -34, 61,
	-33, -35, -36, -56, -37, -38, -45, -57, -39, -40,
	-41, -42, -43, -44, -46, -47, -48, -49, -50, -51,
	-52, -53, -54, -55, 4, 72, 33, -26, -5, 106,
	107, 108, 104, 28, 73, 76, 82, 62, 95, 32,
	52, 70, 92, 64, 85, 35, 91, 39, 111, 21,
	63, 43, -77, -3, 24, -69, 40, 88, 116, 56,
	-90, 133, -83, 137, 16, -14, -16, 81, 132, 66,
	67, -27, -24, -21, 4, -12, 134, 86, 103, -86,
	61, 47, 80, 75, 130, -89, -12, -84, -84, -65,
	44, 119, 4, -70, -70, -18, 4, 133, -71, 26,
	-71, -24, -8, 4, 66, 45, 116, -27, -91, -59,
	131, -12, 123, -63, -62, 131, -32, -29, -15, -23,
	-20, -24, -20, -17, 133, 131, 133, -13, -21, -28,
	133, -87, 7, 118, 4, -87, -87, -87, -87, 133,
	133, 133, 133, 51, -11, 4, 4, 133, 133, 34,
	87, 133, 22, -9, 36, -79, 4, -72, -10, 134,
	-59, -60, -61, -24, 118, 133, -29, -64, -62, 54,
	-14, 56, -32, -32, 74, -22, 117, -12, 133, 133,
	-88, 128, -88, -88, -88, -88, -66, -67, 4, 133,
	77, 133, 34, -4, 89, 4, -72, 133, -80, 78,
	66, -81, -19, -2, 123, 94, 7, -30, 57, -29,
	123, 81, 74, 12, 133, 83, 50, 71, 59, 133,
	136, -83, -6, 133, -82, -83, 49, 91, -7, 135,
	136, -8, -29, -61, -31, 55, 54, 33, -29, -27,
	27, -83, -83, -83, -83, -67, -68, -72, 133, 133,
	-19, 58, -14, -29, 133, 133, -15, -12, -12, -12,
	-12, 72, 123, -32, 133, -29,
}

var plpgsqlDef = [...]int16{
	166, -2, 2, 0, 5, 0, 1, 3, 45, 6,
	8, 0, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 196, 197, 198, 199, 200, 201,
	202, 203, 204, 205, 206, 207, 208, 209, 210, 211,
	212, 213, 214, 215, 216, 217, 218, 219, 220, 221,
	222, 223, 224, 225, 226, 227, 228, 229, 230, 231,
	232, 233, 234, 235, 236, 237, 238, 239, 240, 241,
	242, 243, 244, 245, 246, 247, 248, 249, 250, 251,
	252, 253, 254, 255, 256, 257, 258, 259, -2, 7,
	10, 11, 12, -2, 29, 30, 167, 0, 46, 152,
	0, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 137, 163, 91, 0, 170, 162,
	0, 0, 116, 132, 134, 135, 136, 138, 162, 74,
	74, 77, 0, 142, 142, 0, 0, 149, 149, 0,
	106, 107, 9, 0, 0, 0, 32, 0, 18, 170,
	0, 47, 162, 43, 44, 0, 0, 45, 164, 0,
	0, 0, 171, 0, 112, 113, 165, 162, 111, 0,
	122, 122, 122, 122, 122, 0, 0, 0, 0, 0,
	78, 79, 161, 0, 0, 0, 150, 144, 0, 0,
	0, 0, 34, 33, 0, 20, 17, 4, 153, 155,
	0, 0, 45, 95, 93, 163, 97, -2, 45, 45,
	0, 101, 103, 105, 172, 162, 108, 114, 0, 0,
	115, 126, 123, 124, 125, 126, 126, 126, 126, 131,
	71, 72, 73, 0, 0, 0, 0, 143, 145, 147,
	0, 146, -2, 37, 0, 0, 27, 28, 0, 0,
	154, 0, 158, 159, 251, 75, -2, 0, 92, 45,
	0, 0, 98, 99, 100, 0, 0, 0, 109, 110,
	117, 0, 118, 119, 120, 121, 0, 81, 0, 139,
	140, 141, 148, 0, 0, 35, 36, 14, 19, 25,
	26, 0, 22, 0, 45, 0, 160, 88, 0, -2,
	45, 170, 0, 104, 173, 0, 0, 0, 0, 76,
	0, 0, 13, 39, 0, 41, 42, 38, 0, 21,
	0, 24, -2, 157, 0, 163, 45, 0, -2, 0,
	164, 162, 162, 162, 162, 80, 82, 83, 40, 15,
	23, 0, 0, -2, 90, 133, 45, 127, 128, 129,
	130, 0, 45, 102, 85, -2,
}

var plpgsqlTok1 = [...]uint8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	134, 135, 3, 3, 136, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 133,
	3, 137,
}

var plpgsqlTok2 = [...]uint8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79, 80, 81,
	82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
	92, 93, 94, 95, 96, 97, 98, 99, 100, 101,
	102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 117, 118, 119, 120, 121,
	122, 123, 124, 125, 126, 127, 128, 129, 130, 131,
	132,
}

var plpgsqlTok3 = [...]int8{
	0,
}

var plpgsqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	plpgsqlDebug        = 0
	plpgsqlErrorVerbose = false
)

type plpgsqlLexer interface {
	Lex(lval *plpgsqlSymType) int
	Error(s string)
}

type plpgsqlParser interface {
	Parse(plpgsqlLexer) int
	Lookahead() int
}

type plpgsqlParserImpl struct {
	lval  plpgsqlSymType
	stack [plpgsqlInitialStackSize]plpgsqlSymType
	char  int
}

func (p *plpgsqlParserImpl) Lookahead() int {
	return p.char
}

func plpgsqlNewParser() plpgsqlParser {
	return &plpgsqlParserImpl{}
}

const plpgsqlFlag = -1000

func plpgsqlTokname(c int) string {
	if c >= 1 && c-1 < len(plpgsqlToknames) {
		if plpgsqlToknames[c-1] != "" {
			return plpgsqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func plpgsqlStatname(s int) string {
	if s >= 0 && s < len(plpgsqlStatenames) {
		if plpgsqlStatenames[s] != "" {
			return plpgsqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func plpgsqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !plpgsqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range plpgsqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + plpgsqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(plpgsqlPact[state])
	for tok := TOKSTART; tok-1 < len(plpgsqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < plpgsqlLast && int(plpgsqlChk[int(plpgsqlAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if plpgsqlDef[state] == -2 {
		i := 0
		for plpgsqlExca[i] != -1 || int(plpgsqlExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; plpgsqlExca[i] >= 0; i += 2 {
			tok := int(plpgsqlExca[i])
			if tok < TOKSTART || plpgsqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if plpgsqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += plpgsqlTokname(tok)
	}
	return res
}

func plpgsqllex1(lex plpgsqlLexer, lval *plpgsqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(plpgsqlTok1[0])
		goto out
	}
	if char < len(plpgsqlTok1) {
		token = int(plpgsqlTok1[char])
		goto out
	}
	if char >= plpgsqlPrivate {
		if char < plpgsqlPrivate+len(plpgsqlTok2) {
			token = int(plpgsqlTok2[char-plpgsqlPrivate])
			goto out
		}
	}
	for i := 0; i < len(plpgsqlTok3); i += 2 {
		token = int(plpgsqlTok3[i+0])
		if token == char {
			token = int(plpgsqlTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(plpgsqlTok2[1]) /* unknown char */
	}
	if plpgsqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", plpgsqlTokname(token), uint(char))
	}
	return char, token
}

func plpgsqlParse(plpgsqllex plpgsqlLexer) int {
	return plpgsqlNewParser().Parse(plpgsqllex)
}

func (plpgsqlrcvr *plpgsqlParserImpl) Parse(plpgsqllex plpgsqlLexer) int {
	var plpgsqln int
	var plpgsqlVAL plpgsqlSymType
	var plpgsqlDollar []plpgsqlSymType
	_ = plpgsqlDollar // silence set and not used
	plpgsqlS := plpgsqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	plpgsqlstate := 0
	plpgsqlrcvr.char = -1
	plpgsqltoken := -1 // plpgsqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		plpgsqlstate = -1
		plpgsqlrcvr.char = -1
		plpgsqltoken = -1
	}()
	plpgsqlp := -1
	goto plpgsqlstack

ret0:
	return 0

ret1:
	return 1

plpgsqlstack:
	/* put a state and value onto the stack */
	if plpgsqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", plpgsqlTokname(plpgsqltoken), plpgsqlStatname(plpgsqlstate))
	}

	plpgsqlp++
	if plpgsqlp >= len(plpgsqlS) {
		nyys := make([]plpgsqlSymType, len(plpgsqlS)*2)
		copy(nyys, plpgsqlS)
		plpgsqlS = nyys
	}
	plpgsqlS[plpgsqlp] = plpgsqlVAL
	plpgsqlS[plpgsqlp].yys = plpgsqlstate

plpgsqlnewstate:
	plpgsqln = int(plpgsqlPact[plpgsqlstate])
	if plpgsqln <= plpgsqlFlag {
		goto plpgsqldefault /* simple state */
	}
	if plpgsqlrcvr.char < 0 {
		plpgsqlrcvr.char, plpgsqltoken = plpgsqllex1(plpgsqllex, &plpgsqlrcvr.lval)
	}
	plpgsqln += plpgsqltoken
	if plpgsqln < 0 || plpgsqln >= plpgsqlLast {
		goto plpgsqldefault
	}
	plpgsqln = int(plpgsqlAct[plpgsqln])
	if int(plpgsqlChk[plpgsqln]) == plpgsqltoken { /* valid shift */
		plpgsqlrcvr.char = -1
		plpgsqltoken = -1
		plpgsqlVAL = plpgsqlrcvr.lval
		plpgsqlstate = plpgsqln
		if Errflag > 0 {
			Errflag--
		}
		goto plpgsqlstack
	}

plpgsqldefault:
	/* default state action */
	plpgsqln = int(plpgsqlDef[plpgsqlstate])
	if plpgsqln == -2 {
		if plpgsqlrcvr.char < 0 {
			plpgsqlrcvr.char, plpgsqltoken = plpgsqllex1(plpgsqllex, &plpgsqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if plpgsqlExca[xi+0] == -1 && int(plpgsqlExca[xi+1]) == plpgsqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			plpgsqln = int(plpgsqlExca[xi+0])
			if plpgsqln < 0 || plpgsqln == plpgsqltoken {
				break
			}
		}
		plpgsqln = int(plpgsqlExca[xi+1])
		if plpgsqln < 0 {
			goto ret0
		}
	}
	if plpgsqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			plpgsqllex.Error(plpgsqlErrorMessage(plpgsqlstate, plpgsqltoken))
			Nerrs++
			if plpgsqlDebug >= 1 {
				__yyfmt__.Printf("%s", plpgsqlStatname(plpgsqlstate))
				__yyfmt__.Printf(" saw %s\n", plpgsqlTokname(plpgsqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for plpgsqlp >= 0 {
				plpgsqln = int(plpgsqlPact[plpgsqlS[plpgsqlp].yys]) + plpgsqlErrCode
				if plpgsqln >= 0 && plpgsqln < plpgsqlLast {
					plpgsqlstate = int(plpgsqlAct[plpgsqln]) /* simulate a shift of "error" */
					if int(plpgsqlChk[plpgsqlstate]) == plpgsqlErrCode {
						goto plpgsqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if plpgsqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", plpgsqlS[plpgsqlp].yys)
				}
				plpgsqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if plpgsqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", plpgsqlTokname(plpgsqltoken))
			}
			if plpgsqltoken == plpgsqlEofCode {
				goto ret1
			}
			plpgsqlrcvr.char = -1
			plpgsqltoken = -1
			goto plpgsqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production plpgsqln */
	if plpgsqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", plpgsqln, plpgsqlStatname(plpgsqlstate))
	}

	plpgsqlnt := plpgsqln
	plpgsqlpt := plpgsqlp
	_ = plpgsqlpt // guard against "declared and not used"

	plpgsqlp -= int(plpgsqlR2[plpgsqln])
	// plpgsqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if plpgsqlp+1 >= len(plpgsqlS) {
		nyys := make([]plpgsqlSymType, len(plpgsqlS)*2)
		copy(nyys, plpgsqlS)
		plpgsqlS = nyys
	}
	plpgsqlVAL = plpgsqlS[plpgsqlp+1]

	/* consult goto table to find next state */
	plpgsqln = int(plpgsqlR1[plpgsqln])
	plpgsqlg := int(plpgsqlPgo[plpgsqln])
	plpgsqlj := plpgsqlg + plpgsqlS[plpgsqlp].yys + 1

	if plpgsqlj >= plpgsqlLast {
		plpgsqlstate = int(plpgsqlAct[plpgsqlg])
	} else {
		plpgsqlstate = int(plpgsqlAct[plpgsqlj])
		if int(plpgsqlChk[plpgsqlstate]) != -plpgsqln {
			plpgsqlstate = int(plpgsqlAct[plpgsqlg])
		}
	}
	// dummy call; replaced with literal code
	switch plpgsqlnt {

	case 1:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:330
		{
			plpgsqllex.(*lexer).SetStmt(plpgsqlDollar[1].union.plpgsqlStatement())
		}
	case 4:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-6 : plpgsqlpt+1]
//line plpgsql-gen.y:339
		{

			header := plpgsqlDollar[1].union.plpgsqlDeclareheader()
			stmtBlock := &plpgsqltree.PLpgSQLStmtBlock{
				Label: header.label,
				Body:  plpgsqlDollar[3].union.plpgsqlStatements(),
			}
			if header.initVars != nil {
				stmtBlock.InitVars = header.initVars
			}
			plpgsqlVAL.union.val = stmtBlock
		}
	case 5:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:354
		{
			plpgsqlVAL.union.val = &declareHeader{label: plpgsqlDollar[1].str}
		}
	case 6:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:358
		{
			plpgsqlVAL.union.val = &declareHeader{
				label:    plpgsqlDollar[1].str,
				initVars: make([]plpgsqltree.PLpgSQLVariable, 0),
			}
		}
	case 7:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:365
		{
			h := &declareHeader{
				label: plpgsqlDollar[1].str,

				initVars: make([]plpgsqltree.PLpgSQLVariable, 1),
			}
			h.initVars = append(h.initVars, nil)
			plpgsqlVAL.union.val = h
		}
	case 8:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:380
		{
		}
	case 12:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:390
		{

		}
	case 13:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-6 : plpgsqlpt+1]
//line plpgsql-gen.y:402
		{
		}
	case 14:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-5 : plpgsqlpt+1]
//line plpgsql-gen.y:405
		{
		}
	case 15:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-7 : plpgsqlpt+1]
//line plpgsql-gen.y:408
		{
		}
	case 16:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:413
		{
			fmt.Println("plpgsqllex.(*lexer).pos in opt_scrollable empty", plpgsqllex.(*lexer).lastPos)
		}
	case 17:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:417
		{
			fmt.Println("plpgsqllex.(*lexer).pos in opt_scrollable no_scroll", plpgsqllex.(*lexer).lastPos)
		}
	case 18:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:421
		{
			fmt.Println("plpgsqllex.(*lexer).pos in opt_scrollable scroll", plpgsqllex.(*lexer).lastPos)
		}
	case 19:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:427
		{
			plpgsqllex.(*lexer).ReadSqlExpressionStr(';')
		}
	case 20:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:433
		{
		}
	case 21:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:436
		{
		}
	case 22:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:441
		{
		}
	case 23:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:444
		{
		}
	case 24:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:449
		{
		}
	case 27:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:458
		{
		}
	case 28:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:461
		{
		}
	case 29:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:466
		{
		}
	case 30:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:469
		{
		}
	case 31:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:474
		{
		}
	case 32:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:476
		{
		}
	case 33:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:481
		{
		}
	case 34:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:486
		{
		}
	case 35:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:488
		{
		}
	case 36:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:491
		{
		}
	case 37:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:496
		{
		}
	case 38:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:498
		{
		}
	case 39:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:502
		{
		}
	case 40:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:504
		{
		}
	case 41:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:508
		{
			plpgsqllex.(*lexer).ReadSqlExpressionStr(';')
		}
	case 42:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:512
		{
			plpgsqllex.(*lexer).ReadSqlExpressionStr(';')
		}
	case 45:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:527
		{
			plpgsqlVAL.union.val = []plpgsqltree.PLpgSQLStatement{}
		}
	case 46:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:531
		{
			stmts := plpgsqlDollar[1].union.plpgsqlStatements()
			stmts = append(stmts, plpgsqlDollar[2].union.plpgsqlStatement())
			plpgsqlVAL.union.val = stmts
		}
	case 47:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:539
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.plpgsqlStmtBlock()
		}
	case 48:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:543
		{
		}
	case 49:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:545
		{
		}
	case 50:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:547
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.plpgsqlStatement()
		}
	case 51:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:551
		{
		}
	case 52:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:553
		{
		}
	case 53:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:555
		{
		}
	case 54:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:557
		{
		}
	case 55:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:559
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.plpgsqlStatement()
		}
	case 56:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:563
		{
		}
	case 57:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:565
		{
		}
	case 58:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:567
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.plpgsqlStatement()
		}
	case 59:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:571
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.plpgsqlStatement()
		}
	case 60:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:575
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.plpgsqlStatement()
		}
	case 61:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:579
		{
		}
	case 62:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:581
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.plpgsqlStatement()
		}
	case 63:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:585
		{
		}
	case 64:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:587
		{
		}
	case 65:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:589
		{
		}
	case 66:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:591
		{
		}
	case 67:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:593
		{
			plpgsqlVAL.union.val = plpgsqlDollar[1].union.plpgsqlStatement()
		}
	case 68:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:597
		{
		}
	case 69:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:599
		{
		}
	case 70:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:601
		{
		}
	case 71:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:605
		{
			return unimplemented(plpgsqllex, "perform")
		}
	case 72:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:611
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtCall{IsCall: true}
		}
	case 73:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:615
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtCall{IsCall: false}
		}
	case 74:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:620
		{
			plpgsqllex.(*lexer).ReadSqlExpressionStr(';')
		}
	case 75:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:626
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtAssign{
				Var:   plpgsqlDollar[1].str,
				Value: plpgsqlDollar[3].str,
			}
		}
	case 76:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-5 : plpgsqlpt+1]
//line plpgsql-gen.y:635
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtGetDiag{
				IsStacked: plpgsqlDollar[2].union.bool(),
				DiagItems: plpgsqlDollar[4].union.pLpgSQLStmtGetDiagItemList(),
			}

		}
	case 77:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:645
		{
			plpgsqlVAL.union.val = false
		}
	case 78:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:649
		{
			plpgsqlVAL.union.val = false
		}
	case 79:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:653
		{
			plpgsqlVAL.union.val = true
		}
	case 80:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:659
		{
			plpgsqlVAL.union.val = append(plpgsqlDollar[1].union.pLpgSQLStmtGetDiagItemList(), plpgsqlDollar[3].union.pLpgSQLStmtGetDiagItem())
		}
	case 81:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:663
		{
			plpgsqlVAL.union.val = plpgsqltree.PLpgSQLStmtGetDiagItemList{plpgsqlDollar[1].union.pLpgSQLStmtGetDiagItem()}
		}
	case 82:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:669
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtGetDiagItem{
				Kind:       plpgsqlDollar[3].union.pLpgSQLGetDiagKind(),
				TargetName: plpgsqlDollar[1].str,
			}
		}
	case 83:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:678
		{
			switch plpgsqlDollar[1].str {
			case "row_count":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagRowCount
			case "pg_context":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagContext
			case "pg_exception_detail":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagErrorDetail
			case "pg_exception_hint":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagErrorHint
			case "pg_exception_context":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagErrorContext
			case "column_name":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagColumnName
			case "constraint_name":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagConstraintName
			case "pg_datatype_name":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagDatatypeName
			case "message_text":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagMessageText
			case "table_name":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagTableName
			case "schema_name":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagSchemaName
			case "returned_sqlstate":
				plpgsqlVAL.union.val = plpgsqltree.PlpgsqlGetdiagReturnedSqlstate
			default:

				setErr(plpgsqllex, errors.Newf("unrecognized GET DIAGNOSTICS item: %s", redact.Safe(plpgsqlDollar[1].str)))
			}
		}
	case 84:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:714
		{
		}
	case 85:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-9 : plpgsqlpt+1]
//line plpgsql-gen.y:719
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtIf{
				Condition:  plpgsqlDollar[2].str,
				ThenBody:   plpgsqlDollar[4].union.plpgsqlStatements(),
				ElseIfList: plpgsqlDollar[5].union.pLpgSQLStmtIfElseIfArmList(),
				ElseBody:   plpgsqlDollar[6].union.plpgsqlStatements(),
			}
		}
	case 86:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:730
		{
			plpgsqlVAL.union.val = []*plpgsqltree.PLpgSQLStmtIfElseIfArm{}
		}
	case 87:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-5 : plpgsqlpt+1]
//line plpgsql-gen.y:734
		{
			newStmt := &plpgsqltree.PLpgSQLStmtIfElseIfArm{
				Condition: plpgsqlDollar[3].str,
				Stmts:     plpgsqlDollar[5].union.plpgsqlStatements(),
			}
			plpgsqlVAL.union.val = append(plpgsqlDollar[1].union.pLpgSQLStmtIfElseIfArmList(), newStmt)
		}
	case 88:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:744
		{
			plpgsqlVAL.union.val = []plpgsqltree.PLpgSQLStatement{}
		}
	case 89:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:748
		{
			plpgsqlVAL.union.val = plpgsqlDollar[2].union.plpgsqlStatements()
		}
	case 90:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-7 : plpgsqlpt+1]
//line plpgsql-gen.y:754
		{
			expr := &plpgsqltree.PLpgSQLStmtCase{
				TestExpr:     plpgsqlDollar[2].str,
				CaseWhenList: plpgsqlDollar[3].union.plpgsqlStmtCaseWhenArms(),
			}
			if plpgsqlDollar[4].union.val != nil {
				expr.HaveElse = true
				expr.ElseStmts = plpgsqlDollar[4].union.plpgsqlStatements()
			}
			plpgsqlVAL.union.val = expr
		}
	case 91:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:768
		{
			expr := ""
			tok := plpgsqllex.(*lexer).Peek()
			if tok.id != WHEN {
				expr = plpgsqllex.(*lexer).ReadSqlExpressionStr(WHEN)
			}
			plpgsqlVAL.str = expr
		}
	case 92:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:779
		{
			stmts := plpgsqlDollar[1].union.plpgsqlStmtCaseWhenArms()
			stmts = append(stmts, plpgsqlDollar[2].union.plpgsqlStmtCaseWhenArm())
			plpgsqlVAL.union.val = stmts
		}
	case 93:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:785
		{
			stmts := []*plpgsqltree.PLpgSQLStmtCaseWhenArm{}
			stmts = append(stmts, plpgsqlDollar[1].union.plpgsqlStmtCaseWhenArm())
			plpgsqlVAL.union.val = stmts
		}
	case 94:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:793
		{
			expr := &plpgsqltree.PLpgSQLStmtCaseWhenArm{
				Expr:  plpgsqlDollar[2].str,
				Stmts: plpgsqlDollar[4].union.plpgsqlStatements(),
			}
			plpgsqlVAL.union.val = expr
		}
	case 95:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:803
		{
			plpgsqlVAL.union.val = nil
		}
	case 96:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:807
		{
			plpgsqlVAL.union.val = plpgsqlDollar[2].union.plpgsqlStatements()
		}
	case 97:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:813
		{
			return unimplemented(plpgsqllex, "simple loop")
		}
	case 98:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:819
		{
			return unimplemented(plpgsqllex, "while loop")
		}
	case 99:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:825
		{
			return unimplemented(plpgsqllex, "for loop")
		}
	case 100:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:832
		{
			return unimplemented(plpgsqllex, "for loop")
		}
	case 101:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:856
		{
			return unimplemented(plpgsqllex, "for loop")
		}
	case 102:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-8 : plpgsqlpt+1]
//line plpgsql-gen.y:862
		{
			return unimplemented(plpgsqllex, "for each loop")
		}
	case 103:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:868
		{
		}
	case 104:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:871
		{
		}
	case 105:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:876
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtExit{}
		}
	case 106:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:882
		{
		}
	case 107:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:885
		{
		}
	case 108:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:896
		{
			return unimplemented(plpgsqllex, "return")
		}
	case 109:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:900
		{
			return unimplemented(plpgsqllex, "return next")
		}
	case 110:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:904
		{
			return unimplemented(plpgsqllex, "return query")
		}
	case 111:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:911
		{
			_, terminator := plpgsqllex.(*lexer).ReadSqlExpressionStr2(EXECUTE, ';')
			if terminator == EXECUTE {
				return unimplemented(plpgsqllex, "return dynamic sql query")
			}
			plpgsqllex.(*lexer).ReadSqlExpressionStr(';')
		}
	case 112:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:922
		{
			return unimplemented(plpgsqllex, "return identifier")
		}
	case 113:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:926
		{
			return unimplemented(plpgsqllex, "return expression")
		}
	case 114:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:930
		{
			return unimplemented(plpgsqllex, "return composite type")
		}
	case 115:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:936
		{
		}
	case 116:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:941
		{
			return unimplemented(plpgsqllex, "raise")
		}
	case 117:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:945
		{
			return unimplemented(plpgsqllex, "raise exception")
		}
	case 118:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:949
		{
			return unimplemented(plpgsqllex, "raise debug")
		}
	case 119:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:953
		{
			return unimplemented(plpgsqllex, "raise log")
		}
	case 120:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:957
		{
			return unimplemented(plpgsqllex, "raise info")
		}
	case 121:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:961
		{
			return unimplemented(plpgsqllex, "raise warning")
		}
	case 122:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:967
		{
		}
	case 123:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:969
		{
		}
	case 124:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:971
		{
		}
	case 125:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:973
		{
		}
	case 126:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:978
		{
		}
	case 127:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:980
		{
		}
	case 128:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:982
		{
		}
	case 129:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:984
		{
		}
	case 130:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:986
		{
		}
	case 131:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:989
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtAssert{}
		}
	case 132:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:995
		{
			_, terminator := plpgsqllex.(*lexer).ReadSqlExpressionStr2(',', ';')
			if terminator == ',' {
				plpgsqllex.(*lexer).ReadSqlExpressionStr(';')
			}
		}
	case 133:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-5 : plpgsqlpt+1]
//line plpgsql-gen.y:1003
		{
		}
	case 134:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1009
		{
			plpgsqlVAL.union.val = plpgsqllex.(*lexer).MakeExecSqlStmt(IMPORT)
		}
	case 135:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1013
		{
			plpgsqlVAL.union.val = plpgsqllex.(*lexer).MakeExecSqlStmt(INSERT)
		}
	case 136:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1017
		{
			plpgsqlVAL.union.val = plpgsqllex.(*lexer).MakeExecSqlStmt(MERGE)
		}
	case 137:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1021
		{
			plpgsqlVAL.union.val = plpgsqllex.(*lexer).MakeExecSqlStmt(IDENT)
		}
	case 138:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1027
		{
			plpgsqlVAL.union.val = plpgsqllex.(*lexer).MakeDynamicExecuteStmt()
		}
	case 139:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:1034
		{
			openCursorStmt := plpgsqlDollar[3].union.pLpgSQLStmtOpen()
			openCursorStmt.CursorName = plpgsqlDollar[2].str
			plpgsqlVAL.union.val = openCursorStmt
		}
	case 140:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:1042
		{
			return unimplemented(plpgsqllex, "fetch")
		}
	case 141:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:1048
		{
			return unimplemented(plpgsqllex, "move")
		}
	case 142:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1054
		{
			return unimplemented(plpgsqllex, "fetch direction")
		}
	case 143:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1059
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtClose{}
		}
	case 144:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1065
		{
			plpgsqlVAL.union.val = &plpgsqltree.PLpgSQLStmtNull{}
		}
	case 145:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1071
		{
			return unimplemented(plpgsqllex, "commit")
		}
	case 146:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1077
		{
			return unimplemented(plpgsqllex, "rollback")
		}
	case 147:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1084
		{
		}
	case 148:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1086
		{
		}
	case 149:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1088
		{
		}
	case 150:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1091
		{
			unimplemented(plpgsqllex, "cursor variable")
		}
	case 151:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1097
		{
		}
	case 152:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1099
		{
			return unimplemented(plpgsqllex, "exception")
		}
	case 153:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1103
		{
			unimplemented(plpgsqllex, "exception")
		}
	case 154:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1109
		{
		}
	case 155:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1112
		{
		}
	case 156:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-4 : plpgsqlpt+1]
//line plpgsql-gen.y:1117
		{
		}
	case 157:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1122
		{
		}
	case 158:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1125
		{
		}
	case 159:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1130
		{
		}
	case 160:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-2 : plpgsqlpt+1]
//line plpgsql-gen.y:1133
		{
		}
	case 161:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1138
		{
			plpgsqlVAL.union.val = plpgsqllex.(*lexer).ProcessForOpenCursor(true)
		}
	case 162:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1143
		{
			plpgsqlVAL.str = plpgsqllex.(*lexer).ReadSqlExpressionStr(';')
		}
	case 163:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1149
		{
			plpgsqlVAL.str = plpgsqllex.(*lexer).ReadSqlExpressionStr(THEN)
		}
	case 164:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1155
		{
			return unimplemented(plpgsqllex, "loop expr")
		}
	case 165:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1161
		{
			plpgsqlVAL.str = plpgsqllex.(*lexer).ReadSqlExpressionStr(')')
		}
	case 166:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1167
		{
			plpgsqlVAL.str = ""
		}
	case 167:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1171
		{
			plpgsqlVAL.str = plpgsqlDollar[2].str
		}
	case 168:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1177
		{
		}
	case 169:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1180
		{
			return unimplemented(plpgsqllex, "loop label")
		}
	case 170:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-0 : plpgsqlpt+1]
//line plpgsql-gen.y:1186
		{
		}
	case 171:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1189
		{
		}
	case 172:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1194
		{
		}
	case 173:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-3 : plpgsqlpt+1]
//line plpgsql-gen.y:1196
		{
		}
	case 174:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1204
		{
		}
	case 175:
		plpgsqlDollar = plpgsqlS[plpgsqlpt-1 : plpgsqlpt+1]
//line plpgsql-gen.y:1207
		{
		}
	}
	goto plpgsqlstack /* stack new state and value */
}
