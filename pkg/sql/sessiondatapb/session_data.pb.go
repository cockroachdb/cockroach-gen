// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/sessiondatapb/session_data.proto

package sessiondatapb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_security_username "github.com/cockroachdb/cockroach/pkg/security/username"
	lex "github.com/cockroachdb/cockroach/pkg/sql/lex"
	duration "github.com/cockroachdb/cockroach/pkg/util/duration"
	pgdate "github.com/cockroachdb/cockroach/pkg/util/timeutil/pgdate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VectorizeExecMode controls if an when the Executor executes queries using
// the columnar execution engine.
type VectorizeExecMode int32

const (
	// VectorizeUnset means the VectorizeExecMode wasn't explicitly set. Having
	// the first enum value as zero is required by proto3. This is mapped to
	// VectorizeOn.
	VectorizeUnset VectorizeExecMode = 0
	// VectorizeOn means that any supported queries will be run using the
	// columnar execution.
	VectorizeOn VectorizeExecMode = 2
	// VectorizeExperimentalAlways means that we attempt to vectorize all
	// queries; unsupported queries will fail. Mostly used for testing.
	VectorizeExperimentalAlways VectorizeExecMode = 3
	// VectorizeOff means that columnar execution is disabled.
	VectorizeOff VectorizeExecMode = 4
)

var VectorizeExecMode_name = map[int32]string{
	0: "unset",
	2: "on",
	3: "experimental_always",
	4: "off",
}

var VectorizeExecMode_value = map[string]int32{
	"unset":               0,
	"on":                  2,
	"experimental_always": 3,
	"off":                 4,
}

func (VectorizeExecMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9fa1c5a4e61eec38, []int{0}
}

// SessionData contains session parameters that are easily serializable and are
// required to be propagated to the remote nodes for the correct execution of
// DistSQL flows.
type SessionData struct {
	// Database indicates the "current" database for the purpose of resolving
	// names.
	Database string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	// ApplicationName is the name of the application running the current
	// session. This can be used for logging and per-application statistics.
	ApplicationName string `protobuf:"bytes,2,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	// User is the name of the user logged into the session.
	UserProto github_com_cockroachdb_cockroach_pkg_security_username.SQLUsernameProto `protobuf:"bytes,3,opt,name=user_proto,json=userProto,proto3,casttype=github.com/cockroachdb/cockroach/pkg/security/username.SQLUsernameProto" json:"user_proto,omitempty"`
	// DataConversion gives access to the data conversion configuration.
	DataConversionConfig DataConversionConfig `protobuf:"bytes,4,opt,name=data_conversion_config,json=dataConversionConfig,proto3" json:"data_conversion_config"`
	// VectorizeMode indicates which kinds of queries to use vectorized execution
	// engine for.
	VectorizeMode VectorizeExecMode `protobuf:"varint,5,opt,name=vectorize_mode,json=vectorizeMode,proto3,enum=cockroach.sql.sessiondatapb.VectorizeExecMode" json:"vectorize_mode,omitempty"`
	// TestingVectorizeInjectPanics indicates whether random panics are injected
	// into the vectorized flow execution. The goal of such behavior is making
	// sure that errors that are propagated as panics in the vectorized engine
	// are caught in all scenarios.
	TestingVectorizeInjectPanics bool `protobuf:"varint,6,opt,name=testing_vectorize_inject_panics,json=testingVectorizeInjectPanics,proto3" json:"testing_vectorize_inject_panics,omitempty"`
	// DefaultIntSize specifies the size in bits or bytes (preferred) of how a
	// "naked" INT type should be parsed.
	DefaultIntSize int32 `protobuf:"varint,7,opt,name=default_int_size,json=defaultIntSize,proto3" json:"default_int_size,omitempty"`
	// The name of the location according to whose current timezone we're going to
	// parse timestamps. Used to initialize sessiondata.SessionData.Location on
	// the remote nodes.
	//
	// Note that the current serialization of the time.Location objects as
	// strings has many drawbacks which could lead to unstable computation on the
	// remote nodes. See #36864 and
	// https://github.com/cockroachdb/cockroach/pull/55377#issuecomment-707794695
	// for more details.
	Location string `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	// SearchPath is a list of namespaces to search builtins in. Used to
	// initialize sessiondata.SessionData.SearchPath on the remote nodes.
	SearchPath          []string `protobuf:"bytes,9,rep,name=search_path,json=searchPath,proto3" json:"search_path,omitempty"`
	TemporarySchemaName string   `protobuf:"bytes,10,opt,name=temporary_schema_name,json=temporarySchemaName,proto3" json:"temporary_schema_name,omitempty"`
	// SeqState gives access to the SQL sequences that have been manipulated by
	// the session.
	SeqState SequenceState `protobuf:"bytes,11,opt,name=seq_state,json=seqState,proto3" json:"seq_state"`
	// WorkMemLimit determines how much RAM (in bytes) a single operation of a
	// single query can use before it has to spill to disk.
	WorkMemLimit int64 `protobuf:"varint,12,opt,name=WorkMemLimit,proto3" json:"WorkMemLimit,omitempty"`
	// LockTimeout is the maximum amount of time that a query will wait while
	// attempting to acquire a lock on a key or while blocking on an existing
	// lock in order to perform a non-locking read on a key.
	LockTimeout time.Duration `protobuf:"bytes,15,opt,name=lock_timeout,json=lockTimeout,proto3,stdduration" json:"lock_timeout"`
	// Internal is true if this query came from InternalExecutor or an internal
	// planner.
	Internal bool `protobuf:"varint,16,opt,name=internal,proto3" json:"internal,omitempty"`
	// OnUpdateRehomeRowEnabled controls whether the ON UPDATE rehome_row()
	// will actually trigger on row updates.
	OnUpdateRehomeRowEnabled bool `protobuf:"varint,17,opt,name=on_update_rehome_row_enabled,json=onUpdateRehomeRowEnabled,proto3" json:"on_update_rehome_row_enabled,omitempty"`
	// JoinReaderOrderingStrategyBatchSize is the size limit on the input rows to
	// the joinReader processor (when ordering is required to be maintained) to
	// construct a single lookup KV batch.
	JoinReaderOrderingStrategyBatchSize int64 `protobuf:"varint,18,opt,name=join_reader_ordering_strategy_batch_size,json=joinReaderOrderingStrategyBatchSize,proto3" json:"join_reader_ordering_strategy_batch_size,omitempty"`
	// ParallelizeMultiKeyLookupJoinsEnabled is true when the join reader should
	// parallelize lookup batches under all circumstances. Enabling this will
	// increase the speed of lookup joins when each input row might get multiple
	// looked up rows at the cost of increased memory usage.
	ParallelizeMultiKeyLookupJoinsEnabled bool `protobuf:"varint,19,opt,name=parallelize_multi_key_lookup_joins_enabled,json=parallelizeMultiKeyLookupJoinsEnabled,proto3" json:"parallelize_multi_key_lookup_joins_enabled,omitempty"`
	// TrigramSimilarityThreshold configures the value that's used to compare
	// trigram similarities to in order to evaluate the string % string overload.
	TrigramSimilarityThreshold float64 `protobuf:"fixed64,20,opt,name=trigram_similarity_threshold,json=trigramSimilarityThreshold,proto3" json:"trigram_similarity_threshold,omitempty"`
	// Troubleshooting mode determines whether we refuse to do additional work
	// with the query (i.e. collect & emit telemetry data). Troubleshooting mode
	// is disabled by default.
	TroubleshootingMode bool `protobuf:"varint,21,opt,name=troubleshooting_mode,json=troubleshootingMode,proto3" json:"troubleshooting_mode,omitempty"`
	// JoinReaderNoOrderingStrategyBatchSize is the size limit on the input rows
	// to the joinReader processor (when ordering is **not** required to be
	// maintained) to construct a single lookup KV batch.
	JoinReaderNoOrderingStrategyBatchSize int64 `protobuf:"varint,22,opt,name=join_reader_no_ordering_strategy_batch_size,json=joinReaderNoOrderingStrategyBatchSize,proto3" json:"join_reader_no_ordering_strategy_batch_size,omitempty"`
	// JoinReaderIndexJoinStrategyBatchSize is the size limit on the input rows
	// to the joinReader processor (when performing index joins) to construct a
	// single lookup KV batch.
	JoinReaderIndexJoinStrategyBatchSize int64 `protobuf:"varint,23,opt,name=join_reader_index_join_strategy_batch_size,json=joinReaderIndexJoinStrategyBatchSize,proto3" json:"join_reader_index_join_strategy_batch_size,omitempty"`
	// IndexJoinStreamerBatchSize is the size limit on the input rows to the
	// ColIndexJoin operator (when it is using the Streamer API) to construct a
	// single lookup KV batch.
	IndexJoinStreamerBatchSize int64 `protobuf:"varint,24,opt,name=index_join_streamer_batch_size,json=indexJoinStreamerBatchSize,proto3" json:"index_join_streamer_batch_size,omitempty"`
	// StreamerAlwaysMaintainOrdering indicates that the SQL users of the Streamer
	// should always ask it to maintain the ordering, even when it might not be
	// strictly necessary for the query.
	//
	// This session variable is introduced as a possible workaround in case we
	// have more bugs like #113013.
	StreamerAlwaysMaintainOrdering bool `protobuf:"varint,27,opt,name=streamer_always_maintain_ordering,json=streamerAlwaysMaintainOrdering,proto3" json:"streamer_always_maintain_ordering,omitempty"`
	// StreamerInOrderEagerMemoryUsageFraction controls the fraction of the
	// streamer's memory budget that might be used for issuing requests eagerly,
	// in the InOrder mode.
	StreamerInOrderEagerMemoryUsageFraction float64 `protobuf:"fixed64,28,opt,name=streamer_in_order_eager_memory_usage_fraction,json=streamerInOrderEagerMemoryUsageFraction,proto3" json:"streamer_in_order_eager_memory_usage_fraction,omitempty"`
	// StreamerOutOfOrderEagerMemoryUsageFraction controls the fraction of the
	// streamer's memory budget that might be used for issuing requests eagerly,
	// in the OutOfOrder mode.
	StreamerOutOfOrderEagerMemoryUsageFraction float64 `protobuf:"fixed64,29,opt,name=streamer_out_of_order_eager_memory_usage_fraction,json=streamerOutOfOrderEagerMemoryUsageFraction,proto3" json:"streamer_out_of_order_eager_memory_usage_fraction,omitempty"`
	// StreamerHeadOfLineOnlyFraction controls the fraction of the available
	// streamer's memory budget that will be used to set the TargetBytes limit on
	// head-of-the-line request in case the "eager" memory usage limit has been
	// exceeded.
	StreamerHeadOfLineOnlyFraction float64 `protobuf:"fixed64,30,opt,name=streamer_head_of_line_only_fraction,json=streamerHeadOfLineOnlyFraction,proto3" json:"streamer_head_of_line_only_fraction,omitempty"`
}

func (m *SessionData) Reset()         { *m = SessionData{} }
func (m *SessionData) String() string { return proto.CompactTextString(m) }
func (*SessionData) ProtoMessage()    {}
func (*SessionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fa1c5a4e61eec38, []int{0}
}
func (m *SessionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SessionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SessionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionData.Merge(m, src)
}
func (m *SessionData) XXX_Size() int {
	return m.Size()
}
func (m *SessionData) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionData.DiscardUnknown(m)
}

var xxx_messageInfo_SessionData proto.InternalMessageInfo

// DataConversionConfig contains the parameters that influence the output
// of certain data types as strings or bytes.
type DataConversionConfig struct {
	// BytesEncodeFormat indicates how to encode byte arrays when converting to
	// string.
	BytesEncodeFormat lex.BytesEncodeFormat `protobuf:"varint,1,opt,name=bytes_encode_format,json=bytesEncodeFormat,proto3,enum=cockroach.sql.sessiondatapb.BytesEncodeFormat" json:"bytes_encode_format,omitempty"`
	// ExtraFloatDigits indicates the number of digits beyond the standard number
	// to use for float conversions.This must be set to a value between -15 and
	// 3, inclusive.
	ExtraFloatDigits int32 `protobuf:"varint,2,opt,name=extra_float_digits,json=extraFloatDigits,proto3" json:"extra_float_digits,omitempty"`
	// IntervalStyle indicates the style to parse and display intervals as.
	IntervalStyle duration.IntervalStyle `protobuf:"varint,3,opt,name=interval_style,json=intervalStyle,proto3,enum=cockroach.util.duration.IntervalStyle" json:"interval_style,omitempty"`
	// DateStyle indicates the style to parse and display dates as.
	DateStyle pgdate.DateStyle `protobuf:"bytes,4,opt,name=date_style,json=dateStyle,proto3" json:"date_style"`
}

func (m *DataConversionConfig) Reset()         { *m = DataConversionConfig{} }
func (m *DataConversionConfig) String() string { return proto.CompactTextString(m) }
func (*DataConversionConfig) ProtoMessage()    {}
func (*DataConversionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fa1c5a4e61eec38, []int{1}
}
func (m *DataConversionConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataConversionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *DataConversionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataConversionConfig.Merge(m, src)
}
func (m *DataConversionConfig) XXX_Size() int {
	return m.Size()
}
func (m *DataConversionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DataConversionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DataConversionConfig proto.InternalMessageInfo

// SequenceState is used to marshall the sessiondata.SequenceState struct.
type SequenceState struct {
	Seqs []*SequenceState_Seq `protobuf:"bytes,1,rep,name=seqs,proto3" json:"seqs,omitempty"`
	// last_seq_incremented is the id of the last sequence incremented by the
	// session. This field is filled in iff seqs is not empty.
	LastSeqIncremented uint32 `protobuf:"varint,2,opt,name=last_seq_incremented,json=lastSeqIncremented,proto3" json:"last_seq_incremented,omitempty"`
}

func (m *SequenceState) Reset()         { *m = SequenceState{} }
func (m *SequenceState) String() string { return proto.CompactTextString(m) }
func (*SequenceState) ProtoMessage()    {}
func (*SequenceState) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fa1c5a4e61eec38, []int{2}
}
func (m *SequenceState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SequenceState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SequenceState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequenceState.Merge(m, src)
}
func (m *SequenceState) XXX_Size() int {
	return m.Size()
}
func (m *SequenceState) XXX_DiscardUnknown() {
	xxx_messageInfo_SequenceState.DiscardUnknown(m)
}

var xxx_messageInfo_SequenceState proto.InternalMessageInfo

// Seq represents the last value of one sequence modified by the session.
type SequenceState_Seq struct {
	SeqID     uint32 `protobuf:"varint,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	LatestVal int64  `protobuf:"varint,2,opt,name=latest_val,json=latestVal,proto3" json:"latest_val,omitempty"`
}

func (m *SequenceState_Seq) Reset()         { *m = SequenceState_Seq{} }
func (m *SequenceState_Seq) String() string { return proto.CompactTextString(m) }
func (*SequenceState_Seq) ProtoMessage()    {}
func (*SequenceState_Seq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9fa1c5a4e61eec38, []int{2, 0}
}
func (m *SequenceState_Seq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SequenceState_Seq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SequenceState_Seq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SequenceState_Seq.Merge(m, src)
}
func (m *SequenceState_Seq) XXX_Size() int {
	return m.Size()
}
func (m *SequenceState_Seq) XXX_DiscardUnknown() {
	xxx_messageInfo_SequenceState_Seq.DiscardUnknown(m)
}

var xxx_messageInfo_SequenceState_Seq proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cockroach.sql.sessiondatapb.VectorizeExecMode", VectorizeExecMode_name, VectorizeExecMode_value)
	proto.RegisterType((*SessionData)(nil), "cockroach.sql.sessiondatapb.SessionData")
	proto.RegisterType((*DataConversionConfig)(nil), "cockroach.sql.sessiondatapb.DataConversionConfig")
	proto.RegisterType((*SequenceState)(nil), "cockroach.sql.sessiondatapb.SequenceState")
	proto.RegisterType((*SequenceState_Seq)(nil), "cockroach.sql.sessiondatapb.SequenceState.Seq")
}

func init() {
	proto.RegisterFile("sql/sessiondatapb/session_data.proto", fileDescriptor_9fa1c5a4e61eec38)
}

var fileDescriptor_9fa1c5a4e61eec38 = []byte{
	// 1404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x41, 0x77, 0x13, 0x47,
	0x12, 0xd6, 0x58, 0x36, 0x2b, 0xb5, 0x6d, 0x59, 0xb4, 0x0d, 0x0c, 0xc2, 0xc8, 0xc2, 0xc0, 0xae,
	0xf0, 0xee, 0x4a, 0x8b, 0xf7, 0xb2, 0xa7, 0x7d, 0xbb, 0xc2, 0xf6, 0xae, 0xc0, 0xc6, 0x64, 0x84,
	0x49, 0xc2, 0x81, 0x7e, 0xad, 0x99, 0x92, 0xd4, 0xb8, 0x67, 0x5a, 0xea, 0xe9, 0x31, 0x16, 0xbf,
	0x20, 0xcf, 0xb9, 0xe4, 0x98, 0x8b, 0x4f, 0xc9, 0x21, 0xc7, 0xfc, 0x87, 0x5c, 0xb8, 0xe4, 0x3d,
	0x8e, 0x9c, 0x48, 0x62, 0xfe, 0x45, 0x4e, 0x79, 0xdd, 0x33, 0x1a, 0xc9, 0x86, 0x98, 0x9c, 0xd4,
	0xd5, 0xf5, 0x7d, 0x5f, 0xb5, 0xaa, 0xba, 0xba, 0x06, 0xdd, 0x0a, 0x07, 0xbc, 0x1e, 0x42, 0x18,
	0x32, 0x11, 0x78, 0x54, 0xd1, 0x7e, 0x7b, 0x64, 0x11, 0x6d, 0xd6, 0xfa, 0x52, 0x28, 0x81, 0xaf,
	0xb9, 0xc2, 0xdd, 0x97, 0x82, 0xba, 0xbd, 0x5a, 0x38, 0xe0, 0xb5, 0x53, 0xf8, 0xd2, 0x92, 0x96,
	0xe0, 0x70, 0x58, 0x87, 0xc0, 0x15, 0x1e, 0xc4, 0x94, 0xd2, 0x72, 0xa4, 0x18, 0xaf, 0x7b, 0x91,
	0xa4, 0x8a, 0x89, 0x20, 0x5d, 0x24, 0xde, 0x1b, 0xc6, 0xab, 0x98, 0x0f, 0x66, 0xd1, 0xef, 0x7a,
	0x54, 0x41, 0xf2, 0x93, 0x40, 0x96, 0xba, 0xa2, 0x2b, 0xcc, 0xb2, 0xae, 0x57, 0xc9, 0x6e, 0xb9,
	0x2b, 0x44, 0x97, 0x43, 0xdd, 0x58, 0xed, 0xa8, 0x73, 0x46, 0x78, 0xf5, 0xcb, 0x02, 0x9a, 0x6d,
	0xc5, 0xc7, 0xdb, 0xa0, 0x8a, 0xe2, 0x12, 0xca, 0xe9, 0x63, 0xb6, 0x69, 0x08, 0xb6, 0x55, 0xb1,
	0xaa, 0x79, 0x27, 0xb5, 0xf1, 0x1d, 0x54, 0xa4, 0xfd, 0x3e, 0x67, 0xae, 0x11, 0x20, 0x01, 0xf5,
	0xc1, 0x9e, 0x32, 0x98, 0x85, 0x89, 0xfd, 0x87, 0xd4, 0x07, 0xfc, 0x1c, 0xa1, 0x28, 0x04, 0x49,
	0x4c, 0x10, 0x3b, 0xab, 0x41, 0x8d, 0x07, 0xbf, 0xbe, 0x5d, 0xf9, 0x5f, 0x97, 0xa9, 0x5e, 0xd4,
	0xae, 0xb9, 0xc2, 0xaf, 0xa7, 0x39, 0xf2, 0xda, 0xe3, 0x75, 0xbd, 0xbf, 0xdf, 0xad, 0x87, 0xe0,
	0x46, 0x92, 0xa9, 0x61, 0x5d, 0x6b, 0xe8, 0x30, 0xb5, 0xd6, 0x27, 0xdb, 0x7b, 0xc9, 0xfa, 0x91,
	0x96, 0x74, 0xf2, 0xda, 0x65, 0x96, 0xd8, 0x47, 0x97, 0xf5, 0x11, 0x89, 0x2b, 0x82, 0x03, 0x90,
	0xa6, 0x14, 0xae, 0x08, 0x3a, 0xac, 0x6b, 0x4f, 0x57, 0xac, 0xea, 0xec, 0xfa, 0xdd, 0xda, 0x39,
	0xd5, 0xa8, 0xe9, 0x7f, 0x7d, 0x2f, 0x65, 0xde, 0x33, 0xc4, 0xc6, 0xf4, 0xab, 0xb7, 0x2b, 0x19,
	0x67, 0xc9, 0xfb, 0x80, 0x0f, 0xef, 0xa1, 0xc2, 0x01, 0xb8, 0x4a, 0x48, 0xf6, 0x12, 0x88, 0x2f,
	0x3c, 0xb0, 0x67, 0x2a, 0x56, 0xb5, 0xb0, 0x5e, 0x3b, 0x37, 0xcc, 0x93, 0x11, 0x65, 0xf3, 0x10,
	0xdc, 0x1d, 0xe1, 0x81, 0x33, 0x9f, 0xaa, 0x68, 0x13, 0x6f, 0xa2, 0x15, 0x05, 0xa1, 0x62, 0x41,
	0x97, 0x8c, 0xe5, 0x59, 0xf0, 0x1c, 0x5c, 0x45, 0xfa, 0x34, 0x60, 0x6e, 0x68, 0x5f, 0xa8, 0x58,
	0xd5, 0x9c, 0xb3, 0x9c, 0xc0, 0x52, 0xc5, 0xa6, 0x01, 0x3d, 0x32, 0x18, 0x5c, 0x45, 0x45, 0x0f,
	0x3a, 0x34, 0xe2, 0x8a, 0xb0, 0x40, 0x91, 0x90, 0xbd, 0x04, 0xfb, 0x4f, 0x15, 0xab, 0x3a, 0xe3,
	0x14, 0x92, 0xfd, 0x66, 0xa0, 0x5a, 0xec, 0x25, 0xe8, 0x4a, 0x73, 0x11, 0x97, 0xcc, 0xce, 0xc5,
	0x95, 0x1e, 0xd9, 0x78, 0x05, 0xcd, 0x86, 0x40, 0xa5, 0xdb, 0x23, 0x7d, 0xaa, 0x7a, 0x76, 0xbe,
	0x92, 0xad, 0xe6, 0x1d, 0x14, 0x6f, 0x3d, 0xa2, 0xaa, 0x87, 0xd7, 0xd1, 0x25, 0x05, 0x7e, 0x5f,
	0x48, 0x2a, 0x87, 0x24, 0x74, 0x7b, 0xe0, 0xd3, 0xf8, 0x3e, 0x20, 0xa3, 0xb4, 0x98, 0x3a, 0x5b,
	0xc6, 0x67, 0xee, 0xc4, 0x0e, 0xca, 0x87, 0x30, 0x20, 0xa1, 0xa2, 0x0a, 0xec, 0x59, 0x53, 0x9a,
	0xb5, 0x73, 0x73, 0xd6, 0x82, 0x41, 0x04, 0x81, 0x0b, 0x2d, 0xcd, 0x48, 0x6a, 0x92, 0x0b, 0x61,
	0x60, 0x6c, 0xbc, 0x8a, 0xe6, 0x3e, 0x15, 0x72, 0x7f, 0x07, 0xfc, 0x6d, 0xe6, 0x33, 0x65, 0xcf,
	0x55, 0xac, 0x6a, 0xd6, 0x39, 0xb5, 0x87, 0xb7, 0xd0, 0x1c, 0x17, 0xee, 0x3e, 0xd1, 0x8d, 0x23,
	0x22, 0x65, 0x2f, 0x98, 0xa8, 0x57, 0x6b, 0x71, 0x53, 0xd4, 0x46, 0x4d, 0x51, 0xdb, 0x48, 0x9a,
	0xa2, 0x91, 0xd3, 0x41, 0xbe, 0xfe, 0x69, 0xc5, 0x72, 0x66, 0x35, 0xf1, 0x71, 0xcc, 0xd3, 0xb9,
	0x62, 0x81, 0xd2, 0xf7, 0x8f, 0xdb, 0x45, 0x53, 0x85, 0xd4, 0xc6, 0xff, 0x46, 0xcb, 0x22, 0x20,
	0x51, 0x5f, 0xb7, 0x22, 0x91, 0xd0, 0x13, 0x3e, 0x10, 0x29, 0x5e, 0x10, 0x08, 0x68, 0x9b, 0x83,
	0x67, 0x5f, 0x34, 0x78, 0x5b, 0x04, 0x7b, 0x06, 0xe2, 0x18, 0x84, 0x23, 0x5e, 0x6c, 0xc6, 0x7e,
	0xbc, 0x87, 0xaa, 0xcf, 0x05, 0x0b, 0x88, 0x04, 0xea, 0x81, 0x24, 0x42, 0x7a, 0x20, 0xf5, 0x2d,
	0x08, 0x95, 0xa4, 0x0a, 0xba, 0x43, 0xd2, 0xa6, 0xca, 0xed, 0xc5, 0x95, 0xc4, 0xe6, 0x3f, 0xde,
	0xd4, 0x78, 0xc7, 0xc0, 0x77, 0x13, 0x74, 0x2b, 0x01, 0x37, 0x34, 0xd6, 0x94, 0xf7, 0x73, 0xb4,
	0xd6, 0xa7, 0x92, 0x72, 0x0e, 0xdc, 0x5c, 0xd4, 0x88, 0x2b, 0x46, 0xf6, 0x61, 0x48, 0xb8, 0x10,
	0xfb, 0x51, 0x9f, 0x68, 0x8d, 0x30, 0x3d, 0xe4, 0xa2, 0x39, 0xe4, 0xed, 0x09, 0xc6, 0x8e, 0x26,
	0x3c, 0x80, 0xe1, 0xb6, 0x81, 0xdf, 0xd7, 0xe8, 0xd1, 0x89, 0xff, 0x83, 0x96, 0x95, 0x64, 0x5d,
	0x49, 0x7d, 0x12, 0x32, 0x9f, 0x71, 0xaa, 0x7b, 0x95, 0xa8, 0x9e, 0x84, 0xb0, 0x27, 0xb8, 0x67,
	0x2f, 0x55, 0xac, 0xaa, 0xe5, 0x94, 0x12, 0x4c, 0x2b, 0x85, 0x3c, 0x1e, 0x21, 0xf0, 0x5d, 0xb4,
	0xa4, 0xa4, 0x88, 0xda, 0x5c, 0xdb, 0xc2, 0x5c, 0x7a, 0xd3, 0x49, 0x97, 0xcc, 0x31, 0x16, 0xcf,
	0xf8, 0x4c, 0x7f, 0x3c, 0x45, 0x7f, 0x9d, 0x4c, 0x53, 0x20, 0xce, 0xcf, 0xd4, 0x65, 0x93, 0xa9,
	0xdb, 0xe3, 0x4c, 0x3d, 0x14, 0xbf, 0x9f, 0xab, 0xcf, 0xd0, 0xda, 0xa4, 0x36, 0x0b, 0x3c, 0x38,
	0x34, 0x09, 0xfa, 0xa0, 0xf4, 0x15, 0x23, 0x7d, 0x6b, 0x2c, 0xdd, 0xd4, 0x78, 0x9d, 0xa1, 0xf7,
	0x95, 0x1b, 0xa8, 0x7c, 0x5a, 0x0d, 0xa8, 0x0f, 0x72, 0x52, 0xcd, 0x36, 0x6a, 0x25, 0x36, 0xa1,
	0x61, 0x30, 0x63, 0x8d, 0x26, 0xba, 0x91, 0x12, 0x29, 0x7f, 0x41, 0x87, 0x21, 0xf1, 0x29, 0x0b,
	0x14, 0x65, 0x41, 0x9a, 0x03, 0xfb, 0x9a, 0xc9, 0x5c, 0x79, 0x04, 0xfc, 0xaf, 0xc1, 0xed, 0x24,
	0xb0, 0xd1, 0x3f, 0xc7, 0xcf, 0xd0, 0xdf, 0x53, 0xa9, 0x11, 0x9b, 0x00, 0xed, 0x82, 0x24, 0x3e,
	0xf8, 0x42, 0x0e, 0x49, 0x14, 0xd2, 0x2e, 0x90, 0x8e, 0xa4, 0xae, 0x79, 0x18, 0x96, 0x4d, 0x29,
	0xff, 0x32, 0x22, 0x35, 0x63, 0xa9, 0x4d, 0xcd, 0xd8, 0x31, 0x84, 0x3d, 0x8d, 0xdf, 0x4a, 0xe0,
	0x18, 0xd0, 0xdd, 0x54, 0x5f, 0x44, 0x8a, 0x88, 0xce, 0x1f, 0x88, 0x71, 0xdd, 0xc4, 0x58, 0x1b,
	0x11, 0x77, 0x23, 0xb5, 0xdb, 0x39, 0x3f, 0xcc, 0x03, 0x74, 0x33, 0x0d, 0xd3, 0x03, 0xea, 0xe9,
	0x38, 0x9c, 0x05, 0x40, 0x44, 0xc0, 0x87, 0x63, 0xe1, 0xb2, 0x11, 0x4e, 0x73, 0xf2, 0x7f, 0xa0,
	0xde, 0x6e, 0x67, 0x9b, 0x05, 0xb0, 0x1b, 0xf0, 0xe1, 0x48, 0xec, 0xfe, 0x74, 0x6e, 0xbe, 0x58,
	0xb8, 0x3f, 0x9d, 0x2b, 0x14, 0x17, 0x56, 0x7f, 0x98, 0x42, 0x4b, 0x1f, 0x1a, 0x08, 0xf8, 0x19,
	0x5a, 0x6c, 0x0f, 0x15, 0xe8, 0x86, 0xd1, 0x33, 0x9b, 0x74, 0x84, 0xf4, 0xa9, 0x32, 0x13, 0xf2,
	0x63, 0x2f, 0x7f, 0x43, 0xf3, 0x36, 0x0d, 0x6d, 0xcb, 0xb0, 0x9c, 0x8b, 0xed, 0xb3, 0x5b, 0xf8,
	0x6f, 0x08, 0xc3, 0xa1, 0x92, 0x94, 0x74, 0xb8, 0xa0, 0x8a, 0x78, 0xac, 0xcb, 0x54, 0x68, 0x86,
	0xeb, 0x8c, 0x53, 0x34, 0x9e, 0x2d, 0xed, 0xd8, 0x30, 0xfb, 0x78, 0x07, 0x15, 0xcc, 0xf3, 0x73,
	0x40, 0x39, 0x09, 0xd5, 0x90, 0x83, 0x99, 0xb0, 0x85, 0xf5, 0x3f, 0x4f, 0x1c, 0x44, 0x7f, 0x27,
	0xd4, 0xd2, 0x61, 0xdf, 0x4c, 0xe0, 0x2d, 0x8d, 0x76, 0xe6, 0xd9, 0xa4, 0x89, 0x1f, 0x22, 0x64,
	0x1e, 0xaf, 0x58, 0x2a, 0x1e, 0x9a, 0x77, 0xce, 0x4a, 0x8d, 0xbe, 0x3d, 0x6a, 0xc9, 0x47, 0xc7,
	0x06, 0x55, 0x60, 0xe8, 0xc9, 0xc3, 0x9c, 0xf7, 0x46, 0x1b, 0xab, 0x3f, 0x5a, 0x68, 0xfe, 0xd4,
	0xdb, 0x8d, 0x1b, 0x68, 0x3a, 0x84, 0x41, 0x68, 0x5b, 0x95, 0x6c, 0x75, 0xf6, 0x23, 0xf9, 0x3a,
	0xc5, 0xd4, 0x96, 0x63, 0xb8, 0xf8, 0x1f, 0x68, 0x89, 0xd3, 0x50, 0x11, 0x3d, 0x43, 0x58, 0xe0,
	0x4a, 0xf0, 0x21, 0x50, 0xe0, 0x99, 0x24, 0xcd, 0x3b, 0x58, 0xfb, 0x5a, 0x30, 0x68, 0x8e, 0x3d,
	0xa5, 0x2d, 0x94, 0x6d, 0xc1, 0x00, 0x57, 0xd0, 0x05, 0xc3, 0xf1, 0x4c, 0xb9, 0xe6, 0x1b, 0xf9,
	0x93, 0xb7, 0x2b, 0x33, 0x1a, 0xba, 0xe1, 0xcc, 0x84, 0x30, 0x68, 0x7a, 0xf8, 0x3a, 0x42, 0x9c,
	0xea, 0xb1, 0x4a, 0x0e, 0x28, 0x37, 0x82, 0x59, 0x27, 0x1f, 0xef, 0x3c, 0xa1, 0x7c, 0xed, 0x7b,
	0x0b, 0x5d, 0x7c, 0x6f, 0x7e, 0xe3, 0xeb, 0x68, 0x26, 0x0a, 0x42, 0x50, 0xc5, 0x4c, 0x09, 0x1f,
	0x1d, 0x57, 0x0a, 0x29, 0x62, 0x4f, 0xef, 0xe2, 0x2b, 0x68, 0x4a, 0x04, 0xc5, 0xa9, 0xd2, 0xc2,
	0xd1, 0x71, 0x65, 0x36, 0xf5, 0xed, 0x06, 0xf8, 0x5f, 0x68, 0x11, 0x0e, 0xfb, 0x20, 0x99, 0x3e,
	0x25, 0xe5, 0x49, 0x4b, 0x17, 0xb3, 0xa5, 0x95, 0xa3, 0xe3, 0xca, 0xb5, 0x89, 0x38, 0x63, 0x4c,
	0xdc, 0xcd, 0xf8, 0x2a, 0xca, 0x8a, 0x4e, 0xa7, 0x38, 0x5d, 0x2a, 0x1e, 0x1d, 0x57, 0xe6, 0xc6,
	0x9a, 0x9d, 0x4e, 0x29, 0xf7, 0xc5, 0x37, 0xe5, 0xcc, 0x77, 0xdf, 0x96, 0x33, 0xab, 0xd3, 0x39,
	0xab, 0x68, 0x35, 0xea, 0xaf, 0x7e, 0x29, 0x67, 0x5e, 0x9d, 0x94, 0xad, 0xd7, 0x27, 0x65, 0xeb,
	0xcd, 0x49, 0xd9, 0xfa, 0xf9, 0xa4, 0x6c, 0x7d, 0xf5, 0xae, 0x9c, 0x79, 0xfd, 0xae, 0x9c, 0x79,
	0xf3, 0xae, 0x9c, 0x79, 0x3a, 0x7f, 0x2a, 0xeb, 0xed, 0x0b, 0x66, 0x16, 0xfe, 0xf3, 0xb7, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xc5, 0x83, 0x67, 0x3d, 0xe0, 0x0a, 0x00, 0x00,
}

func (m *SessionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SessionData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SessionData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StreamerHeadOfLineOnlyFraction != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StreamerHeadOfLineOnlyFraction))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf1
	}
	if m.StreamerOutOfOrderEagerMemoryUsageFraction != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StreamerOutOfOrderEagerMemoryUsageFraction))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe9
	}
	if m.StreamerInOrderEagerMemoryUsageFraction != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.StreamerInOrderEagerMemoryUsageFraction))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe1
	}
	if m.StreamerAlwaysMaintainOrdering {
		i--
		if m.StreamerAlwaysMaintainOrdering {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.IndexJoinStreamerBatchSize != 0 {
		i = encodeVarintSessionData(dAtA, i, uint64(m.IndexJoinStreamerBatchSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.JoinReaderIndexJoinStrategyBatchSize != 0 {
		i = encodeVarintSessionData(dAtA, i, uint64(m.JoinReaderIndexJoinStrategyBatchSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.JoinReaderNoOrderingStrategyBatchSize != 0 {
		i = encodeVarintSessionData(dAtA, i, uint64(m.JoinReaderNoOrderingStrategyBatchSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.TroubleshootingMode {
		i--
		if m.TroubleshootingMode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.TrigramSimilarityThreshold != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TrigramSimilarityThreshold))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa1
	}
	if m.ParallelizeMultiKeyLookupJoinsEnabled {
		i--
		if m.ParallelizeMultiKeyLookupJoinsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.JoinReaderOrderingStrategyBatchSize != 0 {
		i = encodeVarintSessionData(dAtA, i, uint64(m.JoinReaderOrderingStrategyBatchSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.OnUpdateRehomeRowEnabled {
		i--
		if m.OnUpdateRehomeRowEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Internal {
		i--
		if m.Internal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.LockTimeout, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.LockTimeout):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintSessionData(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x7a
	if m.WorkMemLimit != 0 {
		i = encodeVarintSessionData(dAtA, i, uint64(m.WorkMemLimit))
		i--
		dAtA[i] = 0x60
	}
	{
		size, err := m.SeqState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	if len(m.TemporarySchemaName) > 0 {
		i -= len(m.TemporarySchemaName)
		copy(dAtA[i:], m.TemporarySchemaName)
		i = encodeVarintSessionData(dAtA, i, uint64(len(m.TemporarySchemaName)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SearchPath) > 0 {
		for iNdEx := len(m.SearchPath) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SearchPath[iNdEx])
			copy(dAtA[i:], m.SearchPath[iNdEx])
			i = encodeVarintSessionData(dAtA, i, uint64(len(m.SearchPath[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintSessionData(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x42
	}
	if m.DefaultIntSize != 0 {
		i = encodeVarintSessionData(dAtA, i, uint64(m.DefaultIntSize))
		i--
		dAtA[i] = 0x38
	}
	if m.TestingVectorizeInjectPanics {
		i--
		if m.TestingVectorizeInjectPanics {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.VectorizeMode != 0 {
		i = encodeVarintSessionData(dAtA, i, uint64(m.VectorizeMode))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.DataConversionConfig.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.UserProto) > 0 {
		i -= len(m.UserProto)
		copy(dAtA[i:], m.UserProto)
		i = encodeVarintSessionData(dAtA, i, uint64(len(m.UserProto)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ApplicationName) > 0 {
		i -= len(m.ApplicationName)
		copy(dAtA[i:], m.ApplicationName)
		i = encodeVarintSessionData(dAtA, i, uint64(len(m.ApplicationName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Database) > 0 {
		i -= len(m.Database)
		copy(dAtA[i:], m.Database)
		i = encodeVarintSessionData(dAtA, i, uint64(len(m.Database)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataConversionConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataConversionConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataConversionConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DateStyle.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSessionData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.IntervalStyle != 0 {
		i = encodeVarintSessionData(dAtA, i, uint64(m.IntervalStyle))
		i--
		dAtA[i] = 0x18
	}
	if m.ExtraFloatDigits != 0 {
		i = encodeVarintSessionData(dAtA, i, uint64(m.ExtraFloatDigits))
		i--
		dAtA[i] = 0x10
	}
	if m.BytesEncodeFormat != 0 {
		i = encodeVarintSessionData(dAtA, i, uint64(m.BytesEncodeFormat))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SequenceState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SequenceState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SequenceState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastSeqIncremented != 0 {
		i = encodeVarintSessionData(dAtA, i, uint64(m.LastSeqIncremented))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Seqs) > 0 {
		for iNdEx := len(m.Seqs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Seqs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSessionData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SequenceState_Seq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SequenceState_Seq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SequenceState_Seq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LatestVal != 0 {
		i = encodeVarintSessionData(dAtA, i, uint64(m.LatestVal))
		i--
		dAtA[i] = 0x10
	}
	if m.SeqID != 0 {
		i = encodeVarintSessionData(dAtA, i, uint64(m.SeqID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSessionData(dAtA []byte, offset int, v uint64) int {
	offset -= sovSessionData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SessionData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Database)
	if l > 0 {
		n += 1 + l + sovSessionData(uint64(l))
	}
	l = len(m.ApplicationName)
	if l > 0 {
		n += 1 + l + sovSessionData(uint64(l))
	}
	l = len(m.UserProto)
	if l > 0 {
		n += 1 + l + sovSessionData(uint64(l))
	}
	l = m.DataConversionConfig.Size()
	n += 1 + l + sovSessionData(uint64(l))
	if m.VectorizeMode != 0 {
		n += 1 + sovSessionData(uint64(m.VectorizeMode))
	}
	if m.TestingVectorizeInjectPanics {
		n += 2
	}
	if m.DefaultIntSize != 0 {
		n += 1 + sovSessionData(uint64(m.DefaultIntSize))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovSessionData(uint64(l))
	}
	if len(m.SearchPath) > 0 {
		for _, s := range m.SearchPath {
			l = len(s)
			n += 1 + l + sovSessionData(uint64(l))
		}
	}
	l = len(m.TemporarySchemaName)
	if l > 0 {
		n += 1 + l + sovSessionData(uint64(l))
	}
	l = m.SeqState.Size()
	n += 1 + l + sovSessionData(uint64(l))
	if m.WorkMemLimit != 0 {
		n += 1 + sovSessionData(uint64(m.WorkMemLimit))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.LockTimeout)
	n += 1 + l + sovSessionData(uint64(l))
	if m.Internal {
		n += 3
	}
	if m.OnUpdateRehomeRowEnabled {
		n += 3
	}
	if m.JoinReaderOrderingStrategyBatchSize != 0 {
		n += 2 + sovSessionData(uint64(m.JoinReaderOrderingStrategyBatchSize))
	}
	if m.ParallelizeMultiKeyLookupJoinsEnabled {
		n += 3
	}
	if m.TrigramSimilarityThreshold != 0 {
		n += 10
	}
	if m.TroubleshootingMode {
		n += 3
	}
	if m.JoinReaderNoOrderingStrategyBatchSize != 0 {
		n += 2 + sovSessionData(uint64(m.JoinReaderNoOrderingStrategyBatchSize))
	}
	if m.JoinReaderIndexJoinStrategyBatchSize != 0 {
		n += 2 + sovSessionData(uint64(m.JoinReaderIndexJoinStrategyBatchSize))
	}
	if m.IndexJoinStreamerBatchSize != 0 {
		n += 2 + sovSessionData(uint64(m.IndexJoinStreamerBatchSize))
	}
	if m.StreamerAlwaysMaintainOrdering {
		n += 3
	}
	if m.StreamerInOrderEagerMemoryUsageFraction != 0 {
		n += 10
	}
	if m.StreamerOutOfOrderEagerMemoryUsageFraction != 0 {
		n += 10
	}
	if m.StreamerHeadOfLineOnlyFraction != 0 {
		n += 10
	}
	return n
}

func (m *DataConversionConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BytesEncodeFormat != 0 {
		n += 1 + sovSessionData(uint64(m.BytesEncodeFormat))
	}
	if m.ExtraFloatDigits != 0 {
		n += 1 + sovSessionData(uint64(m.ExtraFloatDigits))
	}
	if m.IntervalStyle != 0 {
		n += 1 + sovSessionData(uint64(m.IntervalStyle))
	}
	l = m.DateStyle.Size()
	n += 1 + l + sovSessionData(uint64(l))
	return n
}

func (m *SequenceState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Seqs) > 0 {
		for _, e := range m.Seqs {
			l = e.Size()
			n += 1 + l + sovSessionData(uint64(l))
		}
	}
	if m.LastSeqIncremented != 0 {
		n += 1 + sovSessionData(uint64(m.LastSeqIncremented))
	}
	return n
}

func (m *SequenceState_Seq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeqID != 0 {
		n += 1 + sovSessionData(uint64(m.SeqID))
	}
	if m.LatestVal != 0 {
		n += 1 + sovSessionData(uint64(m.LatestVal))
	}
	return n
}

func sovSessionData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSessionData(x uint64) (n int) {
	return sovSessionData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SessionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SessionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SessionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserProto", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserProto = github_com_cockroachdb_cockroach_pkg_security_username.SQLUsernameProto(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataConversionConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DataConversionConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VectorizeMode", wireType)
			}
			m.VectorizeMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VectorizeMode |= VectorizeExecMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestingVectorizeInjectPanics", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TestingVectorizeInjectPanics = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultIntSize", wireType)
			}
			m.DefaultIntSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DefaultIntSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchPath = append(m.SearchPath, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemporarySchemaName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSessionData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemporarySchemaName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SeqState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WorkMemLimit", wireType)
			}
			m.WorkMemLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WorkMemLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTimeout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.LockTimeout, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Internal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Internal = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnUpdateRehomeRowEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnUpdateRehomeRowEnabled = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinReaderOrderingStrategyBatchSize", wireType)
			}
			m.JoinReaderOrderingStrategyBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinReaderOrderingStrategyBatchSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParallelizeMultiKeyLookupJoinsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ParallelizeMultiKeyLookupJoinsEnabled = bool(v != 0)
		case 20:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrigramSimilarityThreshold", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TrigramSimilarityThreshold = float64(math.Float64frombits(v))
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TroubleshootingMode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TroubleshootingMode = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinReaderNoOrderingStrategyBatchSize", wireType)
			}
			m.JoinReaderNoOrderingStrategyBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinReaderNoOrderingStrategyBatchSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinReaderIndexJoinStrategyBatchSize", wireType)
			}
			m.JoinReaderIndexJoinStrategyBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinReaderIndexJoinStrategyBatchSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexJoinStreamerBatchSize", wireType)
			}
			m.IndexJoinStreamerBatchSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexJoinStreamerBatchSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamerAlwaysMaintainOrdering", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StreamerAlwaysMaintainOrdering = bool(v != 0)
		case 28:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamerInOrderEagerMemoryUsageFraction", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StreamerInOrderEagerMemoryUsageFraction = float64(math.Float64frombits(v))
		case 29:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamerOutOfOrderEagerMemoryUsageFraction", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StreamerOutOfOrderEagerMemoryUsageFraction = float64(math.Float64frombits(v))
		case 30:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamerHeadOfLineOnlyFraction", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.StreamerHeadOfLineOnlyFraction = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipSessionData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataConversionConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataConversionConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataConversionConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesEncodeFormat", wireType)
			}
			m.BytesEncodeFormat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesEncodeFormat |= lex.BytesEncodeFormat(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraFloatDigits", wireType)
			}
			m.ExtraFloatDigits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtraFloatDigits |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntervalStyle", wireType)
			}
			m.IntervalStyle = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IntervalStyle |= duration.IntervalStyle(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateStyle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DateStyle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSessionData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SequenceState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SequenceState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SequenceState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSessionData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSessionData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seqs = append(m.Seqs, &SequenceState_Seq{})
			if err := m.Seqs[len(m.Seqs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeqIncremented", wireType)
			}
			m.LastSeqIncremented = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSeqIncremented |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSessionData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SequenceState_Seq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSessionData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Seq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Seq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqID", wireType)
			}
			m.SeqID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestVal", wireType)
			}
			m.LatestVal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestVal |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSessionData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSessionData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSessionData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSessionData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSessionData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSessionData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSessionData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSessionData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSessionData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSessionData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSessionData = fmt.Errorf("proto: unexpected end of group")
)
