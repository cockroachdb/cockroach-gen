// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sql/contentionpb/contention.proto

package contentionpb

import (
	fmt "fmt"
	github_com_cockroachdb_cockroach_pkg_roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	roachpb "github.com/cockroachdb/cockroach/pkg/roachpb"
	github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb "github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb"
	github_com_cockroachdb_cockroach_pkg_util_uuid "github.com/cockroachdb/cockroach/pkg/util/uuid"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// IndexContentionEvents describes all of the available contention information
// about a single index.
type IndexContentionEvents struct {
	// TableID is the ID of the table experiencing contention.
	TableID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID `protobuf:"varint,1,opt,name=table_id,json=tableId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.ID" json:"table_id,omitempty"`
	// IndexID is the ID of the index experiencing contention.
	IndexID github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID `protobuf:"varint,2,opt,name=index_id,json=indexId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/sql/catalog/descpb.IndexID" json:"index_id,omitempty"`
	// NumContentionEvents is the number of contention events that have happened
	// on the index.
	NumContentionEvents uint64 `protobuf:"varint,3,opt,name=num_contention_events,json=numContentionEvents,proto3" json:"num_contention_events,omitempty"`
	// CumulativeContentionTime is the total duration that transactions touching
	// the index have spent contended.
	CumulativeContentionTime time.Duration `protobuf:"bytes,4,opt,name=cumulative_contention_time,json=cumulativeContentionTime,proto3,stdduration" json:"cumulative_contention_time"`
	// Events are all contention events on the index that we kept track of. Note
	// that some events could have been forgotten since we're keeping a limited
	// LRU cache of them.
	//
	// The events are ordered by the key.
	Events []SingleKeyContention `protobuf:"bytes,5,rep,name=events,proto3" json:"events"`
}

func (m *IndexContentionEvents) Reset()      { *m = IndexContentionEvents{} }
func (*IndexContentionEvents) ProtoMessage() {}
func (*IndexContentionEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c0595d203733853, []int{0}
}
func (m *IndexContentionEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IndexContentionEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *IndexContentionEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexContentionEvents.Merge(m, src)
}
func (m *IndexContentionEvents) XXX_Size() int {
	return m.Size()
}
func (m *IndexContentionEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexContentionEvents.DiscardUnknown(m)
}

var xxx_messageInfo_IndexContentionEvents proto.InternalMessageInfo

// SingleTxnContention describes a single transaction that contended with the
// key.
type SingleTxnContention struct {
	// TxnID is the contending transaction.
	TxnID github_com_cockroachdb_cockroach_pkg_util_uuid.UUID `protobuf:"bytes,2,opt,name=txn_id,json=txnId,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"txn_id"`
	// Count is the number of times the corresponding transaction was
	// encountered.
	Count uint64 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *SingleTxnContention) Reset()      { *m = SingleTxnContention{} }
func (*SingleTxnContention) ProtoMessage() {}
func (*SingleTxnContention) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c0595d203733853, []int{1}
}
func (m *SingleTxnContention) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SingleTxnContention) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SingleTxnContention) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleTxnContention.Merge(m, src)
}
func (m *SingleTxnContention) XXX_Size() int {
	return m.Size()
}
func (m *SingleTxnContention) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleTxnContention.DiscardUnknown(m)
}

var xxx_messageInfo_SingleTxnContention proto.InternalMessageInfo

// SingleKeyContention describes all of the available contention information for
// a single key.
type SingleKeyContention struct {
	// Key is the key that other transactions conflicted on.
	Key github_com_cockroachdb_cockroach_pkg_roachpb.Key `protobuf:"bytes,1,opt,name=key,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.Key" json:"key,omitempty"`
	// Txns are all contending transactions that we kept track of. Note that some
	// transactions could have been forgotten since we're keeping a limited LRU
	// cache of them.
	//
	// The transactions are ordered by the number of times they were encountered
	// in DESC order (i.e. most frequent first).
	Txns []SingleTxnContention `protobuf:"bytes,2,rep,name=txns,proto3" json:"txns"`
}

func (m *SingleKeyContention) Reset()      { *m = SingleKeyContention{} }
func (*SingleKeyContention) ProtoMessage() {}
func (*SingleKeyContention) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c0595d203733853, []int{2}
}
func (m *SingleKeyContention) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SingleKeyContention) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SingleKeyContention) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleKeyContention.Merge(m, src)
}
func (m *SingleKeyContention) XXX_Size() int {
	return m.Size()
}
func (m *SingleKeyContention) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleKeyContention.DiscardUnknown(m)
}

var xxx_messageInfo_SingleKeyContention proto.InternalMessageInfo

// SingleNonSQLKeyContention describes all of the available contention
// information for a single non-SQL key.
type SingleNonSQLKeyContention struct {
	// Key is the key that other transactions conflicted on.
	Key github_com_cockroachdb_cockroach_pkg_roachpb.Key `protobuf:"bytes,1,opt,name=key,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.Key" json:"key,omitempty"`
	// NumContentionEvents is the number of contention events that have happened
	// on the key.
	NumContentionEvents uint64 `protobuf:"varint,2,opt,name=num_contention_events,json=numContentionEvents,proto3" json:"num_contention_events,omitempty"`
	// CumulativeContentionTime is the total duration that transactions touching
	// the key have spent contended.
	CumulativeContentionTime time.Duration `protobuf:"bytes,3,opt,name=cumulative_contention_time,json=cumulativeContentionTime,proto3,stdduration" json:"cumulative_contention_time"`
	// Txns are all contending transactions that we kept track of. Note that some
	// transactions could have been forgotten since we're keeping a limited LRU
	// cache of them.
	//
	// The transactions are ordered by the number of times they were encountered
	// in DESC order (i.e. most frequent first).
	Txns []SingleTxnContention `protobuf:"bytes,4,rep,name=txns,proto3" json:"txns"`
}

func (m *SingleNonSQLKeyContention) Reset()      { *m = SingleNonSQLKeyContention{} }
func (*SingleNonSQLKeyContention) ProtoMessage() {}
func (*SingleNonSQLKeyContention) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c0595d203733853, []int{3}
}
func (m *SingleNonSQLKeyContention) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SingleNonSQLKeyContention) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SingleNonSQLKeyContention) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleNonSQLKeyContention.Merge(m, src)
}
func (m *SingleNonSQLKeyContention) XXX_Size() int {
	return m.Size()
}
func (m *SingleNonSQLKeyContention) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleNonSQLKeyContention.DiscardUnknown(m)
}

var xxx_messageInfo_SingleNonSQLKeyContention proto.InternalMessageInfo

// SerializedRegistry is the serialized representation of contention.Registry.
type SerializedRegistry struct {
	// IndexContentionEvents contains all of the available contention information
	// on the SQL keys. The following orderings are maintained:
	// - on the highest level, all IndexContentionEvents objects are ordered
	//   according to their importance
	// - on the middle level, all SingleKeyContention objects are ordered by their
	//   keys
	// - on the lowest level, all SingleTxnContention objects are ordered by the
	//   number of times that transaction was observed to contend with other
	//   transactions.
	IndexContentionEvents []IndexContentionEvents `protobuf:"bytes,1,rep,name=index_contention_events,json=indexContentionEvents,proto3" json:"index_contention_events"`
	// NonSQLKeysContention contains all of the available contention information
	// on the non-SQL keys. The following orderings are maintained:
	// - on the top level, all SingleNonSQLKeyContention objects are ordered
	//   by their keys
	// - on the bottom level, all SingleTxnContention objects are ordered by the
	//   number of times that transaction was observed to contend with other
	//   transactions.
	NonSQLKeysContention []SingleNonSQLKeyContention `protobuf:"bytes,2,rep,name=non_sql_keys_contention,json=nonSqlKeysContention,proto3" json:"non_sql_keys_contention"`
}

func (m *SerializedRegistry) Reset()         { *m = SerializedRegistry{} }
func (m *SerializedRegistry) String() string { return proto.CompactTextString(m) }
func (*SerializedRegistry) ProtoMessage()    {}
func (*SerializedRegistry) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c0595d203733853, []int{4}
}
func (m *SerializedRegistry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SerializedRegistry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SerializedRegistry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SerializedRegistry.Merge(m, src)
}
func (m *SerializedRegistry) XXX_Size() int {
	return m.Size()
}
func (m *SerializedRegistry) XXX_DiscardUnknown() {
	xxx_messageInfo_SerializedRegistry.DiscardUnknown(m)
}

var xxx_messageInfo_SerializedRegistry proto.InternalMessageInfo

type ResolvedTxnID struct {
	TxnID github_com_cockroachdb_cockroach_pkg_util_uuid.UUID `protobuf:"bytes,1,opt,name=txnID,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"txnID"`
	// txnFingerprintID is the corresponding transaction fingerprint ID of the
	// txnID. However, if the transaction fingerprint ID of the txnID is not yet
	// known, (i.e. when the transaction is still executing), this value is filled
	// with roachpb.InvalidTransactionFingerprintID.
	TxnFingerprintID github_com_cockroachdb_cockroach_pkg_roachpb.TransactionFingerprintID `protobuf:"varint,2,opt,name=txnFingerprintID,proto3,customtype=github.com/cockroachdb/cockroach/pkg/roachpb.TransactionFingerprintID" json:"txnFingerprintID"`
}

func (m *ResolvedTxnID) Reset()         { *m = ResolvedTxnID{} }
func (m *ResolvedTxnID) String() string { return proto.CompactTextString(m) }
func (*ResolvedTxnID) ProtoMessage()    {}
func (*ResolvedTxnID) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c0595d203733853, []int{5}
}
func (m *ResolvedTxnID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResolvedTxnID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ResolvedTxnID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolvedTxnID.Merge(m, src)
}
func (m *ResolvedTxnID) XXX_Size() int {
	return m.Size()
}
func (m *ResolvedTxnID) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolvedTxnID.DiscardUnknown(m)
}

var xxx_messageInfo_ResolvedTxnID proto.InternalMessageInfo

type ExtendedContentionEvent struct {
	BlockingEvent            roachpb.ContentionEvent                                               `protobuf:"bytes,1,opt,name=blocking_event,json=blockingEvent,proto3" json:"blocking_event"`
	BlockingTxnFingerprintID github_com_cockroachdb_cockroach_pkg_roachpb.TransactionFingerprintID `protobuf:"varint,2,opt,name=blocking_txn_fingerprint_id,json=blockingTxnFingerprintId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.TransactionFingerprintID" json:"blocking_txn_fingerprint_id,omitempty"`
	WaitingTxnID             github_com_cockroachdb_cockroach_pkg_util_uuid.UUID                   `protobuf:"bytes,3,opt,name=waiting_txn_id,json=waitingTxnId,proto3,customtype=github.com/cockroachdb/cockroach/pkg/util/uuid.UUID" json:"waiting_txn_id"`
	WaitingTxnFingerprintID  github_com_cockroachdb_cockroach_pkg_roachpb.TransactionFingerprintID `protobuf:"varint,4,opt,name=waiting_txn_fingerprint_id,json=waitingTxnFingerprintId,proto3,casttype=github.com/cockroachdb/cockroach/pkg/roachpb.TransactionFingerprintID" json:"waiting_txn_fingerprint_id,omitempty"`
	CollectionTs             time.Time                                                             `protobuf:"bytes,5,opt,name=collection_ts,json=collectionTs,proto3,stdtime" json:"collection_ts"`
}

func (m *ExtendedContentionEvent) Reset()         { *m = ExtendedContentionEvent{} }
func (m *ExtendedContentionEvent) String() string { return proto.CompactTextString(m) }
func (*ExtendedContentionEvent) ProtoMessage()    {}
func (*ExtendedContentionEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c0595d203733853, []int{6}
}
func (m *ExtendedContentionEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtendedContentionEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ExtendedContentionEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtendedContentionEvent.Merge(m, src)
}
func (m *ExtendedContentionEvent) XXX_Size() int {
	return m.Size()
}
func (m *ExtendedContentionEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtendedContentionEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ExtendedContentionEvent proto.InternalMessageInfo

func init() {
	proto.RegisterType((*IndexContentionEvents)(nil), "cockroach.sql.contentionpb.IndexContentionEvents")
	proto.RegisterType((*SingleTxnContention)(nil), "cockroach.sql.contentionpb.SingleTxnContention")
	proto.RegisterType((*SingleKeyContention)(nil), "cockroach.sql.contentionpb.SingleKeyContention")
	proto.RegisterType((*SingleNonSQLKeyContention)(nil), "cockroach.sql.contentionpb.SingleNonSQLKeyContention")
	proto.RegisterType((*SerializedRegistry)(nil), "cockroach.sql.contentionpb.SerializedRegistry")
	proto.RegisterType((*ResolvedTxnID)(nil), "cockroach.sql.contentionpb.ResolvedTxnID")
	proto.RegisterType((*ExtendedContentionEvent)(nil), "cockroach.sql.contentionpb.ExtendedContentionEvent")
}

func init() { proto.RegisterFile("sql/contentionpb/contention.proto", fileDescriptor_0c0595d203733853) }

var fileDescriptor_0c0595d203733853 = []byte{
	// 905 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0x13, 0xf7, 0x87, 0xa6, 0xe9, 0x6a, 0x99, 0x6d, 0x95, 0x6c, 0x40, 0x76, 0xc9, 0xa9,
	0x27, 0x1b, 0xba, 0x70, 0x59, 0x0e, 0x48, 0xc6, 0x5d, 0xc9, 0x2a, 0x2c, 0x5a, 0x37, 0x2b, 0x24,
	0x38, 0x44, 0xb6, 0x67, 0xd6, 0x3b, 0x8a, 0x33, 0x93, 0xc4, 0xe3, 0x36, 0xe1, 0x4f, 0x40, 0x02,
	0xad, 0x38, 0xed, 0x11, 0x24, 0xce, 0xfc, 0x1d, 0x95, 0xb8, 0xec, 0x81, 0xc3, 0x8a, 0x83, 0x01,
	0xf7, 0x3f, 0x80, 0x5b, 0x4f, 0xc8, 0x33, 0x4e, 0x9c, 0x26, 0x59, 0x28, 0xbb, 0xed, 0xcd, 0x33,
	0xf3, 0xe6, 0xfb, 0xde, 0xfb, 0xe6, 0x7b, 0x2f, 0x01, 0xef, 0xc6, 0xc3, 0xc8, 0x0c, 0x18, 0xe5,
	0x98, 0x72, 0xc2, 0xe8, 0xc0, 0x9f, 0x5b, 0x18, 0x83, 0x11, 0xe3, 0x0c, 0xb6, 0x02, 0x16, 0xf4,
	0x46, 0xcc, 0x0b, 0x9e, 0x1a, 0xf1, 0x30, 0x32, 0xe6, 0x83, 0x5b, 0x6f, 0x89, 0xfd, 0x81, 0x6f,
	0x7a, 0x03, 0x22, 0xc3, 0x5b, 0x3b, 0x21, 0x0b, 0x99, 0xf8, 0x34, 0xf3, 0xaf, 0x62, 0x57, 0x0b,
	0x19, 0x0b, 0x23, 0x6c, 0x8a, 0x95, 0x9f, 0x3c, 0x31, 0x51, 0x32, 0xf2, 0x4a, 0x92, 0x96, 0xbe,
	0x78, 0xce, 0x49, 0x1f, 0xc7, 0xdc, 0xeb, 0x0f, 0x64, 0x40, 0xfb, 0xd7, 0x1a, 0xd8, 0x75, 0x28,
	0xc2, 0xe3, 0x4f, 0x66, 0xfc, 0x87, 0x27, 0x98, 0xf2, 0x18, 0x22, 0xb0, 0xc9, 0x3d, 0x3f, 0xc2,
	0x5d, 0x82, 0x9a, 0xca, 0x9e, 0xb2, 0xbf, 0x6d, 0x39, 0x59, 0xaa, 0x6f, 0x74, 0xf2, 0x3d, 0xc7,
	0xbe, 0x48, 0xf5, 0xfb, 0x21, 0xe1, 0x4f, 0x13, 0xdf, 0x08, 0x58, 0xdf, 0x9c, 0xd5, 0x82, 0xfc,
	0xf2, 0xdb, 0x1c, 0xf4, 0x42, 0x53, 0x08, 0xe1, 0x71, 0x2f, 0x62, 0xa1, 0x89, 0x70, 0x1c, 0x0c,
	0x7c, 0xc3, 0xb1, 0xdd, 0x0d, 0x01, 0xed, 0x20, 0x48, 0xc0, 0x26, 0xc9, 0xe9, 0x73, 0x96, 0xaa,
	0x60, 0x79, 0x98, 0xb3, 0x88, 0x94, 0x04, 0xcb, 0xc7, 0xaf, 0xcd, 0x22, 0x21, 0xdc, 0x0d, 0x81,
	0xef, 0x20, 0x78, 0x00, 0x76, 0x69, 0xd2, 0xef, 0x96, 0x42, 0x77, 0xb1, 0xa8, 0xb4, 0x59, 0xdb,
	0x53, 0xf6, 0x55, 0xf7, 0x0e, 0x4d, 0xfa, 0x4b, 0x22, 0x78, 0xa0, 0x15, 0x24, 0xfd, 0x24, 0xf2,
	0x38, 0x39, 0xc1, 0xf3, 0x57, 0x73, 0x1d, 0x9b, 0xea, 0x9e, 0xb2, 0xbf, 0x75, 0x70, 0xd7, 0x90,
	0x22, 0x1b, 0x53, 0x91, 0x0d, 0xbb, 0x78, 0x04, 0x6b, 0xf3, 0x2c, 0xd5, 0x2b, 0xcf, 0x7f, 0xd7,
	0x15, 0xb7, 0x59, 0xc2, 0x94, 0x24, 0x1d, 0xd2, 0xc7, 0xf0, 0x33, 0xb0, 0x5e, 0xe4, 0xb1, 0xb6,
	0x57, 0xdb, 0xdf, 0x3a, 0x30, 0x8d, 0x57, 0x1b, 0xc3, 0x38, 0x26, 0x34, 0x8c, 0xf0, 0x11, 0x9e,
	0x94, 0x20, 0x96, 0x9a, 0x93, 0xb8, 0x05, 0xc8, 0x7d, 0xf5, 0xf9, 0x0f, 0x7a, 0xa5, 0xfd, 0x9d,
	0x02, 0xee, 0xc8, 0xd8, 0xce, 0x98, 0x96, 0xb1, 0xf0, 0x2b, 0xb0, 0xce, 0xc7, 0x74, 0x2a, 0x76,
	0xdd, 0xb2, 0xf3, 0xbb, 0xbf, 0xa5, 0xfa, 0xbd, 0x2b, 0xa9, 0x9c, 0x70, 0x12, 0x99, 0x49, 0x42,
	0x90, 0xf1, 0xf8, 0xb1, 0x63, 0x67, 0xa9, 0xbe, 0xd6, 0x19, 0x53, 0xc7, 0x76, 0xd7, 0xf8, 0x98,
	0x3a, 0x08, 0xee, 0x80, 0xb5, 0x80, 0x25, 0x94, 0x17, 0x82, 0xca, 0x45, 0x91, 0xd0, 0xcf, 0xb3,
	0x84, 0x2e, 0x25, 0x0f, 0x1f, 0x80, 0x5a, 0x0f, 0x4f, 0x84, 0xc1, 0xea, 0xd6, 0x07, 0x17, 0xa9,
	0xfe, 0xde, 0x95, 0x32, 0x29, 0xfa, 0xc3, 0x38, 0xc2, 0x13, 0x37, 0x07, 0x80, 0x0e, 0x50, 0xf9,
	0x98, 0xc6, 0xcd, 0xea, 0x55, 0x35, 0xbc, 0xa4, 0x4b, 0xa1, 0xa1, 0x80, 0x28, 0x12, 0xfe, 0xa5,
	0x0a, 0xee, 0xca, 0xc8, 0x87, 0x8c, 0x1e, 0x3f, 0xfa, 0xf4, 0x66, 0xd2, 0x7e, 0xa5, 0x27, 0xab,
	0xaf, 0xeb, 0xc9, 0xda, 0x75, 0x78, 0x72, 0xaa, 0xa6, 0x7a, 0x5d, 0x6a, 0x7e, 0x5f, 0x05, 0xf0,
	0x18, 0x8f, 0x88, 0x17, 0x91, 0xaf, 0x31, 0x72, 0x71, 0x48, 0x62, 0x3e, 0x9a, 0x40, 0x06, 0x1a,
	0xb2, 0xfb, 0x97, 0x05, 0x50, 0x04, 0xf5, 0xfb, 0xff, 0x46, 0xbd, 0x72, 0x6e, 0x15, 0xe4, 0xbb,
	0x64, 0xe5, 0x50, 0xfb, 0x46, 0x01, 0x0d, 0xca, 0x68, 0x37, 0x1e, 0x46, 0xdd, 0x1e, 0x9e, 0xc4,
	0x73, 0xc4, 0x85, 0x75, 0x3e, 0xfc, 0xef, 0x62, 0x57, 0x18, 0xc2, 0x7a, 0x27, 0x67, 0xcd, 0x52,
	0x7d, 0x67, 0x76, 0x18, 0x97, 0xa7, 0xee, 0x0e, 0x65, 0xf4, 0x78, 0x18, 0x5d, 0xde, 0x6d, 0xff,
	0xa5, 0x80, 0x6d, 0x17, 0xc7, 0x2c, 0x3a, 0xc1, 0x48, 0x34, 0x12, 0x7c, 0x04, 0x44, 0x2b, 0xd9,
	0x85, 0xb1, 0x3e, 0x7a, 0x83, 0xee, 0x94, 0x4d, 0x69, 0xc3, 0x6f, 0x15, 0x70, 0x9b, 0x8f, 0xe9,
	0x03, 0x42, 0x43, 0x3c, 0x1a, 0x8c, 0x08, 0xe5, 0x8e, 0x2d, 0xdd, 0x65, 0x79, 0x05, 0xfc, 0xe1,
	0xff, 0xf2, 0x6e, 0x67, 0xe4, 0xd1, 0xd8, 0x0b, 0xf2, 0x0a, 0x2e, 0x81, 0x66, 0xa9, 0x7e, 0xbb,
	0xb3, 0x40, 0xe4, 0x2e, 0x51, 0xb7, 0xff, 0x56, 0x41, 0xe3, 0x70, 0xcc, 0x31, 0x45, 0x18, 0x2d,
	0x3c, 0x0f, 0xfc, 0x1c, 0xdc, 0xf2, 0x23, 0x16, 0xf4, 0x08, 0x0d, 0xa5, 0x0d, 0x84, 0x0e, 0x5b,
	0x07, 0xed, 0xb9, 0x37, 0x99, 0xa6, 0xb1, 0x70, 0xb7, 0x78, 0xf6, 0xed, 0xe9, 0x7d, 0x09, 0xf8,
	0x93, 0x02, 0xde, 0x9e, 0x21, 0xe6, 0x83, 0xef, 0x49, 0x99, 0xcb, 0x74, 0x08, 0xaa, 0x16, 0xce,
	0x52, 0xbd, 0x69, 0x15, 0x61, 0x8b, 0x25, 0x5c, 0x5c, 0x97, 0x3e, 0x6e, 0xd3, 0x5f, 0x4d, 0x81,
	0xe0, 0x10, 0xdc, 0x3a, 0xf5, 0x08, 0x9f, 0x26, 0x49, 0x90, 0xe8, 0xe2, 0xba, 0x75, 0xf4, 0x66,
	0xd3, 0xb9, 0xfe, 0x85, 0x04, 0x95, 0x43, 0xba, 0x7e, 0x5a, 0xae, 0x10, 0xfc, 0x51, 0x01, 0xad,
	0x79, 0xce, 0x05, 0x61, 0x54, 0x21, 0x0c, 0xca, 0x52, 0xbd, 0x51, 0x82, 0xdc, 0x90, 0x2e, 0x8d,
	0xd3, 0x95, 0x0c, 0x08, 0x3a, 0x60, 0x3b, 0x60, 0x51, 0x84, 0x03, 0x39, 0xdd, 0xf2, 0x1f, 0xc8,
	0xdc, 0x0d, 0xad, 0xa5, 0xd9, 0xd6, 0x99, 0xfe, 0xa9, 0x91, 0xc3, 0xed, 0x59, 0x3e, 0xdc, 0xea,
	0xe5, 0xd5, 0x4e, 0x6c, 0x19, 0x67, 0x7f, 0x6a, 0x95, 0xb3, 0x4c, 0x53, 0x5e, 0x64, 0x9a, 0xf2,
	0x32, 0xd3, 0x94, 0x3f, 0x32, 0x4d, 0x79, 0x76, 0xae, 0x55, 0x5e, 0x9c, 0x6b, 0x95, 0x97, 0xe7,
	0x5a, 0xe5, 0xcb, 0xfa, 0x7c, 0xa3, 0xfb, 0xeb, 0x02, 0xfb, 0xde, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xcd, 0xae, 0x23, 0x59, 0xc8, 0x09, 0x00, 0x00,
}

func (m *IndexContentionEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IndexContentionEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IndexContentionEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContention(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.CumulativeContentionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.CumulativeContentionTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintContention(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if m.NumContentionEvents != 0 {
		i = encodeVarintContention(dAtA, i, uint64(m.NumContentionEvents))
		i--
		dAtA[i] = 0x18
	}
	if m.IndexID != 0 {
		i = encodeVarintContention(dAtA, i, uint64(m.IndexID))
		i--
		dAtA[i] = 0x10
	}
	if m.TableID != 0 {
		i = encodeVarintContention(dAtA, i, uint64(m.TableID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SingleTxnContention) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleTxnContention) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleTxnContention) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintContention(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.TxnID.Size()
		i -= size
		if _, err := m.TxnID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintContention(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *SingleKeyContention) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleKeyContention) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleKeyContention) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txns) > 0 {
		for iNdEx := len(m.Txns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContention(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintContention(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SingleNonSQLKeyContention) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleNonSQLKeyContention) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleNonSQLKeyContention) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txns) > 0 {
		for iNdEx := len(m.Txns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContention(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.CumulativeContentionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.CumulativeContentionTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintContention(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if m.NumContentionEvents != 0 {
		i = encodeVarintContention(dAtA, i, uint64(m.NumContentionEvents))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintContention(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SerializedRegistry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SerializedRegistry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SerializedRegistry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NonSQLKeysContention) > 0 {
		for iNdEx := len(m.NonSQLKeysContention) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NonSQLKeysContention[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContention(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.IndexContentionEvents) > 0 {
		for iNdEx := len(m.IndexContentionEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IndexContentionEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContention(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResolvedTxnID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResolvedTxnID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResolvedTxnID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxnFingerprintID != 0 {
		i = encodeVarintContention(dAtA, i, uint64(m.TxnFingerprintID))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.TxnID.Size()
		i -= size
		if _, err := m.TxnID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintContention(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ExtendedContentionEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtendedContentionEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExtendedContentionEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CollectionTs, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CollectionTs):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintContention(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	if m.WaitingTxnFingerprintID != 0 {
		i = encodeVarintContention(dAtA, i, uint64(m.WaitingTxnFingerprintID))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.WaitingTxnID.Size()
		i -= size
		if _, err := m.WaitingTxnID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintContention(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.BlockingTxnFingerprintID != 0 {
		i = encodeVarintContention(dAtA, i, uint64(m.BlockingTxnFingerprintID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.BlockingEvent.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintContention(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintContention(dAtA []byte, offset int, v uint64) int {
	offset -= sovContention(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IndexContentionEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TableID != 0 {
		n += 1 + sovContention(uint64(m.TableID))
	}
	if m.IndexID != 0 {
		n += 1 + sovContention(uint64(m.IndexID))
	}
	if m.NumContentionEvents != 0 {
		n += 1 + sovContention(uint64(m.NumContentionEvents))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.CumulativeContentionTime)
	n += 1 + l + sovContention(uint64(l))
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovContention(uint64(l))
		}
	}
	return n
}

func (m *SingleTxnContention) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TxnID.Size()
	n += 1 + l + sovContention(uint64(l))
	if m.Count != 0 {
		n += 1 + sovContention(uint64(m.Count))
	}
	return n
}

func (m *SingleKeyContention) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovContention(uint64(l))
	}
	if len(m.Txns) > 0 {
		for _, e := range m.Txns {
			l = e.Size()
			n += 1 + l + sovContention(uint64(l))
		}
	}
	return n
}

func (m *SingleNonSQLKeyContention) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovContention(uint64(l))
	}
	if m.NumContentionEvents != 0 {
		n += 1 + sovContention(uint64(m.NumContentionEvents))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.CumulativeContentionTime)
	n += 1 + l + sovContention(uint64(l))
	if len(m.Txns) > 0 {
		for _, e := range m.Txns {
			l = e.Size()
			n += 1 + l + sovContention(uint64(l))
		}
	}
	return n
}

func (m *SerializedRegistry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IndexContentionEvents) > 0 {
		for _, e := range m.IndexContentionEvents {
			l = e.Size()
			n += 1 + l + sovContention(uint64(l))
		}
	}
	if len(m.NonSQLKeysContention) > 0 {
		for _, e := range m.NonSQLKeysContention {
			l = e.Size()
			n += 1 + l + sovContention(uint64(l))
		}
	}
	return n
}

func (m *ResolvedTxnID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TxnID.Size()
	n += 1 + l + sovContention(uint64(l))
	if m.TxnFingerprintID != 0 {
		n += 1 + sovContention(uint64(m.TxnFingerprintID))
	}
	return n
}

func (m *ExtendedContentionEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BlockingEvent.Size()
	n += 1 + l + sovContention(uint64(l))
	if m.BlockingTxnFingerprintID != 0 {
		n += 1 + sovContention(uint64(m.BlockingTxnFingerprintID))
	}
	l = m.WaitingTxnID.Size()
	n += 1 + l + sovContention(uint64(l))
	if m.WaitingTxnFingerprintID != 0 {
		n += 1 + sovContention(uint64(m.WaitingTxnFingerprintID))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CollectionTs)
	n += 1 + l + sovContention(uint64(l))
	return n
}

func sovContention(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContention(x uint64) (n int) {
	return sovContention(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IndexContentionEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContention
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IndexContentionEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IndexContentionEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableID", wireType)
			}
			m.TableID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TableID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.ID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexID", wireType)
			}
			m.IndexID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexID |= github_com_cockroachdb_cockroach_pkg_sql_catalog_descpb.IndexID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumContentionEvents", wireType)
			}
			m.NumContentionEvents = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumContentionEvents |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeContentionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContention
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContention
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.CumulativeContentionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContention
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContention
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, SingleKeyContention{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContention(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContention
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleTxnContention) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContention
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleTxnContention: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleTxnContention: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthContention
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthContention
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxnID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContention(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContention
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleKeyContention) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContention
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleKeyContention: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleKeyContention: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthContention
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthContention
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContention
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContention
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txns = append(m.Txns, SingleTxnContention{})
			if err := m.Txns[len(m.Txns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContention(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContention
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleNonSQLKeyContention) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContention
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleNonSQLKeyContention: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleNonSQLKeyContention: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthContention
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthContention
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumContentionEvents", wireType)
			}
			m.NumContentionEvents = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumContentionEvents |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeContentionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContention
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContention
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.CumulativeContentionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContention
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContention
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txns = append(m.Txns, SingleTxnContention{})
			if err := m.Txns[len(m.Txns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContention(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContention
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SerializedRegistry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContention
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SerializedRegistry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SerializedRegistry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexContentionEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContention
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContention
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexContentionEvents = append(m.IndexContentionEvents, IndexContentionEvents{})
			if err := m.IndexContentionEvents[len(m.IndexContentionEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonSQLKeysContention", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContention
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContention
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NonSQLKeysContention = append(m.NonSQLKeysContention, SingleNonSQLKeyContention{})
			if err := m.NonSQLKeysContention[len(m.NonSQLKeysContention)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContention(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContention
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResolvedTxnID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContention
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResolvedTxnID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResolvedTxnID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthContention
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthContention
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxnID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxnFingerprintID", wireType)
			}
			m.TxnFingerprintID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxnFingerprintID |= github_com_cockroachdb_cockroach_pkg_roachpb.TransactionFingerprintID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContention(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContention
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtendedContentionEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContention
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtendedContentionEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtendedContentionEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockingEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContention
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContention
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BlockingEvent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockingTxnFingerprintID", wireType)
			}
			m.BlockingTxnFingerprintID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockingTxnFingerprintID |= github_com_cockroachdb_cockroach_pkg_roachpb.TransactionFingerprintID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitingTxnID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthContention
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthContention
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WaitingTxnID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitingTxnFingerprintID", wireType)
			}
			m.WaitingTxnFingerprintID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WaitingTxnFingerprintID |= github_com_cockroachdb_cockroach_pkg_roachpb.TransactionFingerprintID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectionTs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContention
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContention
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContention
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CollectionTs, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContention(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContention
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContention(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContention
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContention
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContention
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContention
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContention
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContention
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContention        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContention          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContention = fmt.Errorf("proto: unexpected end of group")
)
